!function(){var t={666:function(t){var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",o=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function s(t,e,n,r){var a=e&&e.prototype instanceof b?e:b,i=Object.create(a.prototype),o=new C(r||[]);return i._invoke=function(t,e,n){var r=d;return function(a,i){if(r===p)throw new Error("Generator is already running");if(r===f){if("throw"===a)throw i;return M()}for(n.method=a,n.arg=i;;){var o=n.delegate;if(o){var l=E(o,n);if(l){if(l===m)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=c(t,e,n);if("normal"===u.type){if(r=n.done?f:h,u.arg===m)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=f,n.method="throw",n.arg=u.arg)}}}(t,n,o),i}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var d="suspendedStart",h="suspendedYield",p="executing",f="completed",m={};function b(){}function v(){}function g(){}var y={};u(y,i,(function(){return this}));var S=Object.getPrototypeOf,N=S&&S(S(T([])));N&&N!==n&&r.call(N,i)&&(y=N);var A=g.prototype=b.prototype=Object.create(y);function L(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function n(a,i,o,l){var u=c(t[a],t,i);if("throw"!==u.type){var s=u.arg,d=s.value;return d&&"object"==typeof d&&r.call(d,"__await")?e.resolve(d.__await).then((function(t){n("next",t,o,l)}),(function(t){n("throw",t,o,l)})):e.resolve(d).then((function(t){s.value=t,o(s)}),(function(t){return n("throw",t,o,l)}))}l(u.arg)}var a;this._invoke=function(t,r){function i(){return new e((function(e,a){n(t,r,e,a)}))}return a=a?a.then(i,i):i()}}function E(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,E(t,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var a=c(r,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function x(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function D(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(x,this),this.reset(!0)}function T(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}return{next:M}}function M(){return{value:e,done:!0}}return v.prototype=g,u(A,"constructor",g),u(g,"constructor",v),v.displayName=u(g,l,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,u(t,l,"GeneratorFunction")),t.prototype=Object.create(A),t},t.awrap=function(t){return{__await:t}},L(w.prototype),u(w.prototype,o,(function(){return this})),t.AsyncIterator=w,t.async=function(e,n,r,a,i){void 0===i&&(i=Promise);var o=new w(s(e,n,r,a),i);return t.isGeneratorFunction(n)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},L(A),u(A,l,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=T,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(D),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],l=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var u=r.call(o,"catchLoc"),s=r.call(o,"finallyLoc");if(u&&s){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),D(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var a=r.arg;D(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};!function(){"use strict";function t(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function e(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t){return function(t){if(Array.isArray(t))return u(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||l(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=t[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(t,e)||l(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(t,e){if(t){if("string"==typeof t)return u(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?u(t,e):void 0}}function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.r(r),n(666);var c="http://www.w3.org/2000/svg",d=1e3,h=300,p=300,f=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.rootElement=e.root,this.data=null,this.sampleCount=null,this.parsedData=null,this.lastPoint=null,this.profitData=null,this.dataX=null,this.dataXRange=null,this.dataY=null,this.dataYRange=null,this.profitX=null,this.profitXRange=null,this.profitY=null,this.profitYRange=null}var n,r;return n=t,(r=[{key:"parseData",value:function(){var t=this,n=["open","low","high","close"],r=o(this.data.data.reduce((function(r,o){var l=i(r[0]),u=t.data.columns.reduce((function(t,n,r){return e(e({},t),{},"date"!==n?a({},n,o[r]):{date:moment(o[r]).valueOf()/d})}),{});l.push(u);var s=n.map((function(t){return u[t]})).sort((function(t,e){return t-e}));return[l,r[1]?Math.min(r[1],s[0]):s[0],r[2]?Math.max(r[2],s[s.length-1]):s[s.length-1]]}),[[],null,null]),3),l=r[0],u=r[1],s=r[2];l.sort((function(t,e){return t.date-e.date})),this.lastPoint=l[l.length-1].date*d,this.parsedData={startTime:l[0].date,endTime:l[l.length-1].date,candleMin:u,candleMax:s,data:l,candleData:l.map((function(t){return{date:t.date,open:t.open,low:t.low,high:t.high,close:t.close}})),signalData:l.reduce((function(t,e,n){var r=e.buy,a=e.sell,o=e.open,l=e.close,u=i(t);return(r||a)&&u.push({x:n,buy:r,sell:a,pos:o,direction:o>l?"down":"up"}),u}),[]),volumeData:l.map((function(t){return{date:t.date,volume:t.volume,color:t.open-t.close>0?"negative":"positive"}}))}}},{key:"setData",value:function(t){var e,n;this.data=t,this.data&&null!==(e=this.data)&&void 0!==e&&null!==(n=e.data)&&void 0!==n&&n.length&&(this.sampleCount=this.data.data.length,this.parseData()),this.renderDataChart()}},{key:"setProfitData",value:function(t){var n=o(i(t.trades).map((function(t){var e=t.close_timestamp,n=t.close_profit_pct;return{date:Math.round(e/d),profit:n}})).sort((function(t,e){return t.date-e.date})).reduce((function(t,n,r){var a=r?t[0][r-1].cumulative+n.profit:n.profit,o=e(e({},n),{},{cumulative:a}),l=null!==t[1]?Math.min(t[1],a):a,u=null!==t[2]?Math.max(t[2],a):a,s=i(t[0]);return s.push(o),[s,l,u]}),[[],null,null]),3),r=n[0],a=n[1],l=n[2];this.profitData={startTime:r[0].date,endTime:r[r.length-1].date,profitData:r,min:a,max:l},this.renderProfitChart()}},{key:"setDimensions",value:function(t,e){this.width=t,this.height=e}},{key:"setDataViewBox",value:function(t,e,n,r){this.dataX=t,this.dataY=e,this.dataXRange=n,this.dataYRange=r}},{key:"setProfitViewBox",value:function(t,e,n,r){this.profitX=t,this.profitY=e,this.profitXRange=n,this.profitYRange=r}},{key:"generateSVGs",value:function(t,e){var n=document.createElementNS(c,"svg");n.id="chart-graph",n.setAttributeNS(null,"version","1.1"),n.setAttribute("xmlns","http://www.w3.org/2000/svg"),n.setAttributeNS(null,"preserveAspectRatio","none"),n.setAttributeNS(null,"width","".concat(t,"px"));var r=document.createElementNS(c,"svg");r.id="chart-x-axis",r.setAttributeNS(null,"version","1.1"),r.setAttributeNS(null,"width","".concat(t,"px"));var a=document.createElementNS(c,"svg");return a.id="chart-y-axis",a.setAttributeNS(null,"version","1.1"),a.setAttributeNS(null,"height","".concat(e,"px")),this.setDimensions(t,e),[n,r,a]}},{key:"generateGrid",value:function(t,e,n,r,a,l,u,s,p){var f=64*a/this.width,m=16*u/this.height,b=[.5,1,2.5,5,10],v=1,g=o(function(){var t,e=f*h*d,n=s,r=1,a=1,o="",l=e,u=Math.log10(e);if(u<3){r*=Math.pow(10,Math.floor(u)),o="millisecond";for(var c=[2.5,5,10],m=[].concat(c).map((function(t){return t*r})).filter((function(t){return!(t-Math.trunc(t))})),b=0;m[b]<=e;)b++;l=m[b],a=c[b]*Math.pow(10,Math.floor(u))}else{var v=(t=e/(r*=1e3),60,Math.log(t)/Math.log(60));if(v<2){r*=Math.pow(60,Math.floor(v)),o=v<1?"second":"minute";for(var g=[5,10,30,60],y=[].concat(g).map((function(t){return t*r})),S=0;y[S]<=e;)S++;l=y[S],a=g[S]}else if(e<12*(r*=3600)){o="hour";for(var N=[3,6,12],A=[].concat(N).map((function(t){return t*r})),L=0;A[L]<=e;)L++;l=A[L],a=N[L]}else if(e<14*(r*=24)){o="date";for(var w=[1,2,3,5,7,14],E=[].concat(w).map((function(t){return t*r})),x=0;E[x]<=e;)x++;l=E[x],a=w[x]}else o="bigger"}var D=n,C=[];if("bigger"!==o){var T=(D=moment(D).startOf(o))[o]();D="date"===o?a>=7?moment(D.valueOf()).isoWeekday(8):moment(D.valueOf()).add(a-1-(T-1)%a,"day"):moment(D.valueOf()).add(a-1-(T-1)%a,o),C.push(D.valueOf());for(var M=C[C.length-1];M<p;){var O=M+l;C.push(O),M=C[C.length-1]}}else{if(e<6*(r*=30)){o="month";for(var k=[1,3,6],j=[].concat(k).map((function(t){return t*r})),P=0;j[P]<=e;)P++;a=k[P]}else!function(){r*=365/30,o="year";for(var t=[1,5,10],n=[].concat(t).map((function(t){return t*r})),i=0,l=0;n[i]<=e;)++i===n.length&&(l||t.splice(1,0,2.5),i=0,l++,n=[].concat(t).map((function(t){return t*Math.pow(10,l)*r})));a=t[i]*Math.pow(10,l)}();var Y=(D=moment(n).startOf(o).add(1,o))[o]();D=moment(D.valueOf()).add(a-1-(Y-1)%a,o),C.push(D.valueOf());for(var R=C[C.length-1];R<p;){var F=moment(R).add(a,o).valueOf();C.push(F),R=C[C.length-1]}C.pop()}return"month"===o&&a>1&&(C=i(C).map((function(t){return moment(t).subtract(1,"day").valueOf()}))),[C.map((function(t){return{x:(t-n)/h/d,value:t}})),o]}(),2),y=g[0],S=g[1],N=function(t,e){if(b[b.length-1]*v>m){for(;b[b.length-1]*v>m;)v/=10;v*=10}if(b[0]*v<m){for(;b[0]*v<m;)v*=10;v/=10}var n=o(b.reduce((function(t,e,n){return t[0]*v>m?[t[0],t[1]]:[e,2===n]}),[0,!1]),2),r=n[0],a=n[1],i=0;if(v)for(;Math.pow(10,i)<1/v;)i++;a&&i++,r=Number(Number.parseFloat(r*v).toFixed(i));var l=Number(Number.parseFloat(Math.ceil(e/r)*r).toFixed(i))||0,u=[];if(r)for(u.push(l);u[u.length-1]+r<=e+t;){var s=Number(Number.parseFloat(u[u.length-1]+r).toFixed(i));u.push(s)}return u}(u,l),A=a/this.width,L=u/this.height;y.forEach((function(n){var r=n.x,a=n.value,i=document.createElementNS(c,"line");i.classList.add("grid-line"),i.setAttributeNS(null,"x1",r),i.setAttributeNS(null,"x2",r),i.setAttributeNS(null,"y1",l),i.setAttributeNS(null,"y2",l+u),i.setAttributeNS(null,"stroke-width","1px"),t.appendChild(i);var o=document.createElementNS(c,"text");o.classList.add("xAxis-text"),o.setAttributeNS(null,"x",r),o.setAttributeNS(null,"y",0),o.setAttribute("font-size","".concat(12*A)),o.setAttribute("dominant-baseline","hanging"),o.setAttribute("text-anchor","middle"),o.innerHTML="".concat(moment(a).format(function(t){switch(t){case"millisecond":return"ss.SSS";case"second":return"mm:ss";case"minute":case"hour":return"DD.MM HH:mm";case"date":return"DD-MM";case"month":return"DD-MM-YY";case"year":return"YYYY";default:return null}}(S))),e.appendChild(o)})),N.forEach((function(e){var i=document.createElementNS(c,"line");i.classList.add("grid-line"),i.setAttributeNS(null,"x1",r),i.setAttributeNS(null,"x2",r+a),i.setAttributeNS(null,"y1",e),i.setAttributeNS(null,"y2",e),i.setAttributeNS(null,"stroke-width","1px"),t.appendChild(i);var o=document.createElementNS(c,"text");o.classList.add("yAxis-text"),o.setAttributeNS(null,"x",0),o.setAttributeNS(null,"y",e),o.setAttribute("font-size","".concat(12*L)),o.setAttribute("dominant-baseline","middle"),o.innerHTML="".concat(-e),n.appendChild(o)}))}},{key:"generateCandles",value:function(t){this.parsedData.candleData.forEach((function(e,n){var r=e.close-e.open,a=Math.abs(r),i=document.createElementNS(c,"rect");i.classList.add("candle-body"),i.setAttributeNS(null,"x",0+n*p/h),i.setAttributeNS(null,"y",-Math.max(e.close,e.open)),i.setAttributeNS(null,"width",1),i.setAttributeNS(null,"height",a);var o=document.createElementNS(c,"line");o.classList.add("candle-wick"),o.setAttributeNS(null,"x1",(.5+n)*p/h),o.setAttributeNS(null,"x2",(.5+n)*p/h),o.setAttributeNS(null,"y1",-e.high),o.setAttributeNS(null,"y2",-e.low),o.setAttributeNS(null,"stroke-width","1px"),r&&(i.classList.add("".concat(r>0?"positive":"negative")),o.classList.add("".concat(r>0?"positive":"negative"))),t.appendChild(i),t.appendChild(o)}))}},{key:"generateVolumes",value:function(t){var e=this,n=this.parsedData.volumeData.reduce((function(t,e){var n=e.volume;return Math.max(t,n)}),0);this.parsedData.volumeData.forEach((function(r,a){r.date;var i=r.volume,o=r.color;if(i){var l=i/n*e.dataYRange*.3,u=document.createElementNS(c,"rect");u.classList.add("volume"),u.setAttributeNS(null,"x",0+a*p/h),u.setAttributeNS(null,"y",e.dataY+e.dataYRange-l),u.setAttributeNS(null,"width",1),u.setAttributeNS(null,"height",l),u.classList.add("".concat(o)),t.appendChild(u)}}))}},{key:"createSignalPath",value:function(t,e,n,r){var a=this.dataXRange/this.width,i=this.dataYRange/this.height,o=t-16*a/2,l=e-16*i/2+("up"===n?16*i:0),u=document.createElementNS(c,"g");u.classList.add("signal");var s=document.createElementNS(c,"circle");s.classList.add("signal-ring"),s.setAttributeNS(null,"cx",50),s.setAttributeNS(null,"cy",50),s.setAttributeNS(null,"r",60),u.appendChild(s);var d=document.createElementNS(c,"mask");d.id="holesMask";var h=document.createElementNS(c,"rect");h.classList.add("mask-white"),h.setAttributeNS(null,"x",0),h.setAttributeNS(null,"y",0),h.setAttributeNS(null,"width",100),h.setAttributeNS(null,"height",100),d.appendChild(h);var p=document.createElementNS(c,"circle");p.classList.add("mask-black"),p.setAttributeNS(null,"cx",34.5),p.setAttributeNS(null,"cy",71.5),p.setAttributeNS(null,"r",1.5),d.appendChild(p);var f=document.createElementNS(c,"circle");f.classList.add("mask-black"),f.setAttributeNS(null,"cx",65.5),f.setAttributeNS(null,"cy",71.5),f.setAttributeNS(null,"r",1.5),d.appendChild(f),u.appendChild(d);var m=document.createElementNS(c,"path");m.classList.add("buoy-stem"),m.setAttributeNS(null,"d","M 47.5 15.5 L 48 24 L 52 24 L 52.5 15.5 Z"),m.classList.add(r),u.appendChild(m);var b=document.createElementNS(c,"circle");b.classList.add("buoy-head"),b.setAttributeNS(null,"cx",50),b.setAttributeNS(null,"cy",10),b.setAttributeNS(null,"r",6),b.classList.add(r),u.appendChild(b);var v=document.createElementNS(c,"path");v.classList.add("buoy-body"),v.setAttributeNS(null,"mask","url(#holesMask)"),v.setAttributeNS(null,"d","M 45 24 L 43 71.5 L 40 71.5 L 40.5 76 L 37 76 L 37.5 72 C 38 67, 31 67, 31.5 72 L 32 76 L 28.5 76 L 30.5 91 L 69.5 91 L 71.5 76 L 68 76 L 68.5 72 C 69 67, 62 67, 62.5 72 L 63 76 L 59.5 76 L 60 71.5 L 57 71.5 L 55 24 Z"),v.classList.add(r),u.setAttributeNS(null,"transform","translate(".concat(o," ").concat(l,") scale(").concat(.16*a," ").concat(.16*i,")")),u.appendChild(v);var g=document.createElementNS(c,"circle");g.classList.add("buoy-circle"),g.setAttributeNS(null,"cx",50),g.setAttributeNS(null,"cy",10),g.setAttributeNS(null,"r",6),g.classList.add(r),u.appendChild(g);var y=document.createElementNS(c,"animate");y.id="anim-r-1",y.setAttributeNS(null,"attributeName","r"),y.setAttributeNS(null,"attributeType","XML"),y.setAttributeNS(null,"begin","anim-r-1.end + 3s"),y.setAttributeNS(null,"dur","3.6s"),y.setAttributeNS(null,"from","6"),y.setAttributeNS(null,"to","128"),g.appendChild(y);var S=document.createElementNS(c,"animate");S.id="anim-o-1",S.setAttributeNS(null,"attributeName","opacity"),S.setAttributeNS(null,"attributeType","XML"),S.setAttributeNS(null,"begin","anim-r-1.begin + 0.1s"),S.setAttributeNS(null,"dur","3s"),S.setAttributeNS(null,"from","0.6"),S.setAttributeNS(null,"to","0"),S.setAttributeNS(null,"fill","freeze"),g.appendChild(S);var N=document.createElementNS(c,"circle");N.classList.add("buoy-circle"),N.setAttributeNS(null,"cx",50),N.setAttributeNS(null,"cy",10),N.setAttributeNS(null,"r",6),N.classList.add(r),u.appendChild(N);var A=document.createElementNS(c,"animate");A.id="anim-r-2",A.setAttributeNS(null,"attributeName","r"),A.setAttributeNS(null,"attributeType","XML"),A.setAttributeNS(null,"begin","anim-r-1.begin + 1s"),A.setAttributeNS(null,"dur","3.6s"),A.setAttributeNS(null,"from","6"),A.setAttributeNS(null,"to","128"),N.appendChild(A);var L=document.createElementNS(c,"animate");L.id="anim-o-2",L.setAttributeNS(null,"attributeName","opacity"),L.setAttributeNS(null,"attributeType","XML"),L.setAttributeNS(null,"begin","anim-r-2.begin + 0.1s"),L.setAttributeNS(null,"dur","3s"),L.setAttributeNS(null,"from","0.6"),L.setAttributeNS(null,"to","0"),L.setAttributeNS(null,"fill","freeze"),N.appendChild(L);var w=document.createElementNS(c,"circle");w.classList.add("buoy-circle"),w.setAttributeNS(null,"cx",50),w.setAttributeNS(null,"cy",10),w.setAttributeNS(null,"r",6),w.classList.add(r),u.appendChild(w);var E=document.createElementNS(c,"animate");E.id="anim-r-3",E.setAttributeNS(null,"attributeName","r"),E.setAttributeNS(null,"attributeType","XML"),E.setAttributeNS(null,"begin","anim-r-2.begin + 1s"),E.setAttributeNS(null,"dur","3.6s"),E.setAttributeNS(null,"from","6"),E.setAttributeNS(null,"to","128"),w.appendChild(E);var x=document.createElementNS(c,"animate");return x.id="anim-o-3",x.setAttributeNS(null,"attributeName","opacity"),x.setAttributeNS(null,"attributeType","XML"),x.setAttributeNS(null,"begin","anim-r-3.begin + 0.1s"),x.setAttributeNS(null,"dur","3s"),x.setAttributeNS(null,"from","0.6"),x.setAttributeNS(null,"to","0"),x.setAttributeNS(null,"fill","freeze"),w.appendChild(x),"undefined"==typeof InstallTrigger?y.beginElement():setTimeout((function(){y.beginElement()}),0),u}},{key:"generateSignals",value:function(t){var e=this,n=document.createElementNS(c,"defs");t.appendChild(n);var r=document.createElementNS(c,"linearGradient");r.id="signal-gradient-positive",n.appendChild(r);var a=document.createElementNS(c,"stop");a.classList.add("signal-gradient-stop"),a.classList.add("positive"),a.setAttributeNS(null,"offset","0%"),r.appendChild(a);var i=document.createElementNS(c,"stop");i.classList.add("signal-gradient-stop"),i.setAttributeNS(null,"offset","100%"),r.appendChild(i);var o=document.createElementNS(c,"linearGradient");o.id="signal-gradient-negative",n.appendChild(o);var l=document.createElementNS(c,"stop");l.classList.add("signal-gradient-stop"),l.classList.add("negative"),l.setAttributeNS(null,"offset","0%"),o.appendChild(l);var u=document.createElementNS(c,"stop");u.classList.add("signal-gradient-stop"),u.setAttributeNS(null,"offset","100%"),o.appendChild(u),this.parsedData.signalData.forEach((function(n,r){var a=n.x,i=n.buy,o=n.pos,l=n.direction,u=(a+.5)*p/h,s=-o,d=e.createSignalPath(u,s,l,"".concat(i>0?"positive":"negative")),f=document.createElementNS(c,"line");f.classList.add("signal-line"),f.setAttributeNS(null,"x1",u),f.setAttributeNS(null,"x2",u),f.setAttributeNS(null,"y1",e.dataY),f.setAttributeNS(null,"y2",e.dataY+e.dataYRange),f.setAttributeNS(null,"stroke-width","1px"),f.classList.add("".concat(i>0?"positive":"negative")),t.appendChild(f);var m=500;if(a<500){r<e.parsedData.signalData.length-1&&(m=e.parsedData.signalData[r+1].x);var b=document.createElementNS(c,"rect");b.classList.add("signal-area"),b.setAttributeNS(null,"x",u),b.setAttributeNS(null,"y",e.dataY),b.setAttributeNS(null,"width",m-a),b.setAttributeNS(null,"height",e.dataYRange),b.setAttributeNS(null,"fill","url(#signal-gradient-".concat(i>0?"positive":"negative",")")),t.appendChild(b)}t.appendChild(d)}))}},{key:"generateProfit",value:function(t){var n=this.profitData.startTime,r=this.profitData.endTime,a=this.profitData.profitData.map((function(t){return e(e({},t),{},{date:(t.date-n)/h})})),i=o(a.reduce((function(t,e,n){var r=-e.cumulative;return["".concat(t[0]).concat(0===n?"M":" L"," ").concat(e.date.toFixed(4)," ").concat(t[3]," L ").concat(e.date.toFixed(4)," ").concat(r.toFixed(4)),"".concat(t[1]).concat(0===n?"M":" L"," ").concat(e.date.toFixed(4)," ").concat(t[3]<0?t[3]:0," L ").concat(e.date.toFixed(4)," ").concat(r<0?r.toFixed(4):0).concat(n===a.length-1?" L ".concat(e.date.toFixed(4)," 0"):""),"".concat(t[2]).concat(0===n?"M":" L"," ").concat(e.date.toFixed(4)," ").concat(t[3]>0?t[3]:0," L ").concat(e.date.toFixed(4)," ").concat(r>0?r.toFixed(4):0).concat(n===a.length-1?" L ".concat(e.date.toFixed(4)," 0"):""),r]}),["","","",0]),3),l=i[0],u=i[1],s=i[2],d=document.createElementNS(c,"line");if(d.id="zero-line",d.setAttributeNS(null,"x1",0),d.setAttributeNS(null,"x2",(r-n)/h),d.setAttributeNS(null,"y1",0),d.setAttributeNS(null,"y2",0),d.setAttributeNS(null,"stroke-width","0.5px"),t.appendChild(d),a.length){var p=document.createElementNS(c,"path");p.classList.add("path"),p.classList.add("positive"),p.setAttributeNS(null,"d","".concat(u," Z")),p.setAttributeNS(null,"stroke-width","1px"),t.appendChild(p);var f=document.createElementNS(c,"path");f.classList.add("path"),f.classList.add("negative"),f.setAttributeNS(null,"d","".concat(s," Z")),f.setAttributeNS(null,"stroke-width","1px"),t.appendChild(f);var m=document.createElementNS(c,"path");m.classList.add("path"),m.setAttributeNS(null,"d",l),m.setAttributeNS(null,"stroke-width","1px"),t.appendChild(m)}}},{key:"populateDataSVG",value:function(t,e,n,r,a){var i,o,l=document.createElementNS(c,"g");l.id="chart-grid-group";var u=document.createElementNS(c,"g");u.id="chart-candle-group";var s=document.createElementNS(c,"g");s.id="chart-volume-group";var p=document.createElementNS(c,"g");p.id="chart-signal-group",t.appendChild(l),t.appendChild(u),t.appendChild(s),t.appendChild(p);var f=(this.parsedData.endTime-this.parsedData.startTime+300)/h,m=this.parsedData.candleMax-this.parsedData.candleMin,b=-this.parsedData.candleMax-.1*m,v=m*(1.1+.3);this.setDataViewBox(0,b,f,v);var g,y,S,N=r/30/(this.profitXRange/100),A=40/a/(this.profitYRange/100);t.setAttributeNS(null,"viewBox","".concat(this.dataX," ").concat(this.dataY," ").concat(this.dataXRange," ").concat(this.dataYRange)),e.setAttributeNS(null,"viewBox","".concat(this.dataX," 0 ").concat(this.dataXRange," 100")),e.setAttributeNS(null,"preserveAspectRatio","xMidYMin ".concat(N>1?"slice":"meet")),n.setAttributeNS(null,"viewBox","0 ".concat(this.dataY," 100 ").concat(this.dataYRange)),n.setAttributeNS(null,"preserveAspectRatio","xMinYMid ".concat(A<1?"slice":"meet")),null!==(i=this.parsedData)&&void 0!==i&&null!==(o=i.data)&&void 0!==o&&o.length&&(this.generateGrid(l,e,n,this.dataX,this.dataXRange,this.dataY,this.dataYRange,this.lastPoint-this.sampleCount*h*d,this.lastPoint),null!==(g=this.parsedData.candleData)&&void 0!==g&&g.length&&this.generateCandles(u),null!==(y=this.parsedData.volumeData)&&void 0!==y&&y.length&&this.generateVolumes(s),null!==(S=this.parsedData.signalData)&&void 0!==S&&S.length&&this.generateSignals(p)),document.getElementById("chart-area").scrollTo(this.width,0)}},{key:"populateProfitSVG",value:function(t,e,n,r,a){var i,o,l=document.createElementNS(c,"g");l.id="chart-grid-group";var u=document.createElementNS(c,"g");u.id="chart-profit-group",t.appendChild(l),t.appendChild(u);var s=(this.profitData.endTime-this.profitData.startTime)/h,p=this.profitData.max-this.profitData.min,f=-this.profitData.max-.1*p,m=1.2*p;this.setProfitViewBox(0,f,s,m);var b,v=r/30/(this.profitXRange/100),g=40/a/(this.profitYRange/100);t.setAttributeNS(null,"viewBox","".concat(this.profitX," ").concat(this.profitY," ").concat(this.profitXRange," ").concat(this.profitYRange)),e.setAttributeNS(null,"viewBox","".concat(this.profitX," 0 ").concat(this.profitXRange," 100")),e.setAttributeNS(null,"preserveAspectRatio","xMidYMin ".concat(v>1?"slice":"meet")),n.setAttributeNS(null,"viewBox","0 ".concat(this.profitY," 100 ").concat(this.profitYRange)),n.setAttributeNS(null,"preserveAspectRatio","xMinYMid ".concat(g<1?"slice":"meet")),null!==(i=this.profitData)&&void 0!==i&&null!==(o=i.profitData)&&void 0!==o&&o.length&&(this.generateGrid(l,e,n,this.profitX,this.profitXRange,this.profitY,this.profitYRange,this.profitData.startTime*d,this.profitData.endTime*d),null!==(b=this.profitData.profitData)&&void 0!==b&&b.length&&this.generateProfit(u))}},{key:"renderDataChart",value:function(){var t=document.createElement("DIV");t.id="chart-area",this.rootElement.innerHTML="",this.rootElement.appendChild(t);var e=8/p*(this.parsedData.endTime-this.parsedData.startTime),n=t.getBoundingClientRect().height-40-17,r=o(this.generateSVGs(e,n),3),a=r[0],i=r[1],l=r[2];this.rootElement.appendChild(l),t.appendChild(a),t.appendChild(i),this.populateDataSVG(a,i,l,e,n)}},{key:"renderProfitChart",value:function(){var t=document.createElement("DIV");t.id="chart-area",this.rootElement.innerHTML="",this.rootElement.appendChild(t);var e=t.getBoundingClientRect().width,n=t.getBoundingClientRect().height-40-0,r=o(this.generateSVGs(e,n),3),a=r[0],i=r[1],l=r[2];this.rootElement.appendChild(l),t.appendChild(a),t.appendChild(i),this.populateProfitSVG(a,i,l,e,n)}}])&&s(n.prototype,r),t}();function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}new f({root:document.getElementById("data-chart-wrapper")}),new f({root:document.getElementById("profit-chart-wrapper")});var b="http://www.w3.org/2000/svg",v=null,g=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.timestamp=null,this.signalType=""}var e,n;return e=t,(n=[{key:"setData",value:function(t,e){this.timestamp=t,this.signalType=e,clearInterval(v),this.render()}},{key:"updateTime",value:function(t){var e=Math.round((moment(Date.now()).valueOf()-this.timestamp)/1e3),n=Math.floor(e/60),r=Math.floor(n/60),a=Math.floor(r/24);e-=60*n,n-=60*r,r-=24*a,t.innerHTML="".concat(a?"".concat(a,"d "):"").concat(r?"".concat(r,"h "):"").concat(n?"".concat(n,"m "):"").concat(e?"".concat(e,"s "):""," ago")}},{key:"render",value:function(){var t=this,e="BUY"===this.signalType?"positive":"negative",n=document.getElementById("signal-panel");n.innerHTML="";var r=document.createElementNS(b,"svg");r.id="signal-svg",r.setAttributeNS(null,"version","1.1"),r.setAttribute("xmlns","http://www.w3.org/2000/svg"),r.setAttributeNS(null,"viewBox","-17.5 -75 125 250"),r.setAttributeNS(null,"preserveAspectRatio","none"),n.appendChild(r);var a=document.createElement("div");a.id="signal-div";var i=document.createElement("span");i.id="signal-span",i.innerHTML=this.signalType,i.classList.add(e),a.appendChild(i);var o=document.createElement("span");o.id="signal-time",o.classList.add(e),a.appendChild(o),n.appendChild(a),v=setInterval((function(){return t.updateTime(o)}),1e3);var l=document.createElementNS(b,"path");l.classList.add("buoy-stem"),l.setAttributeNS(null,"d","M 47.5 15.5 L 48 24 L 52 24 L 52.5 15.5 Z"),l.classList.add(e),r.appendChild(l);var u=document.createElementNS(b,"circle");u.classList.add("buoy-head"),u.setAttributeNS(null,"cx",50),u.setAttributeNS(null,"cy",10),u.setAttributeNS(null,"r",6),u.classList.add(e),r.appendChild(u);var s=document.createElementNS(b,"path");s.classList.add("buoy-body"),s.setAttributeNS(null,"mask","url(#holesMask)"),s.setAttributeNS(null,"d","M 45 24 L 43 71.5 L 40 71.5 L 40.5 76 L 37 76 L 37.5 72 C 38 67, 31 67, 31.5 72 L 32 76 L 28.5 76 L 30.5 91 L 69.5 91 L 71.5 76 L 68 76 L 68.5 72 C 69 67, 62 67, 62.5 72 L 63 76 L 59.5 76 L 60 71.5 L 57 71.5 L 55 24 Z"),s.classList.add(e),r.appendChild(s);var c=document.createElementNS(b,"circle");c.classList.add("buoy-circle"),c.setAttributeNS(null,"cx",50),c.setAttributeNS(null,"cy",10),c.setAttributeNS(null,"r",6),c.classList.add(e),r.appendChild(c);var d=document.createElementNS(b,"animate");d.id="anim-r-1",d.setAttributeNS(null,"attributeName","r"),d.setAttributeNS(null,"attributeType","XML"),d.setAttributeNS(null,"begin","anim-r-1.end + 3s"),d.setAttributeNS(null,"dur","3.6s"),d.setAttributeNS(null,"from","6"),d.setAttributeNS(null,"to","64"),c.appendChild(d);var h=document.createElementNS(b,"animate");h.id="anim-o-1",h.setAttributeNS(null,"attributeName","opacity"),h.setAttributeNS(null,"attributeType","XML"),h.setAttributeNS(null,"begin","anim-r-1.begin + 0.1s"),h.setAttributeNS(null,"dur","3s"),h.setAttributeNS(null,"from","0.6"),h.setAttributeNS(null,"to","0"),h.setAttributeNS(null,"fill","freeze"),c.appendChild(h);var p=document.createElementNS(b,"circle");p.classList.add("buoy-circle"),p.setAttributeNS(null,"cx",50),p.setAttributeNS(null,"cy",10),p.setAttributeNS(null,"r",6),p.classList.add(e),r.appendChild(p);var f=document.createElementNS(b,"animate");f.id="anim-r-2",f.setAttributeNS(null,"attributeName","r"),f.setAttributeNS(null,"attributeType","XML"),f.setAttributeNS(null,"begin","anim-r-1.begin + 1s"),f.setAttributeNS(null,"dur","3.6s"),f.setAttributeNS(null,"from","6"),f.setAttributeNS(null,"to","64"),p.appendChild(f);var m=document.createElementNS(b,"animate");m.id="anim-o-2",m.setAttributeNS(null,"attributeName","opacity"),m.setAttributeNS(null,"attributeType","XML"),m.setAttributeNS(null,"begin","anim-r-2.begin + 0.1s"),m.setAttributeNS(null,"dur","3s"),m.setAttributeNS(null,"from","0.6"),m.setAttributeNS(null,"to","0"),m.setAttributeNS(null,"fill","freeze"),p.appendChild(m);var g=document.createElementNS(b,"circle");g.classList.add("buoy-circle"),g.setAttributeNS(null,"cx",50),g.setAttributeNS(null,"cy",10),g.setAttributeNS(null,"r",6),g.classList.add(e),r.appendChild(g);var y=document.createElementNS(b,"animate");y.id="anim-r-3",y.setAttributeNS(null,"attributeName","r"),y.setAttributeNS(null,"attributeType","XML"),y.setAttributeNS(null,"begin","anim-r-2.begin + 1s"),y.setAttributeNS(null,"dur","3.6s"),y.setAttributeNS(null,"from","6"),y.setAttributeNS(null,"to","64"),g.appendChild(y);var S=document.createElementNS(b,"animate");S.id="anim-o-3",S.setAttributeNS(null,"attributeName","opacity"),S.setAttributeNS(null,"attributeType","XML"),S.setAttributeNS(null,"begin","anim-r-3.begin + 0.1s"),S.setAttributeNS(null,"dur","3s"),S.setAttributeNS(null,"from","0.6"),S.setAttributeNS(null,"to","0"),S.setAttributeNS(null,"fill","freeze"),g.appendChild(S),"undefined"==typeof InstallTrigger?d.beginElement():setTimeout((function(){d.beginElement()}),0)}}])&&m(e.prototype,n),t}();function y(t){return function(t){if(Array.isArray(t))return S(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return S(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?S(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}fetch;var N,A=(N=new Map,{addEventListener:function(t,e,n){var r=N.has(t)?N.get(t):{};r[e]=r[e]||[],r[e].push(n),N.set(t,r),t.addEventListener(e,n)},clear:function(t){if(y(t.children).forEach((function(t){if(N.has(t)){var e=N.get(t);Object.keys(e).forEach((function(n){e[n].forEach((function(e){t.removeEventListener(n,e)}))}))}t.children.length&&y(t.children).forEach(A.clear)})),N.has(t)){var e=N.get(t);Object.keys(e).forEach((function(n){e[n].forEach((function(e){t.removeEventListener(n,e)}))}))}}});function L(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}["BTC/USDT","ETH/USDT","MBOX/USDT","BUSD/USDT","SHIB/USDT","SAND/USDT","SOL/USDT","REQ/USDT","LUNA/USDT","MATIC/USDT","GALA/USDT","MANA/USDT","AVAX/USDT","TLM/USDT","ALICE/USDT","TRX/USDT","CTK/USDT","DOT/USDT","SANTOS/USDT","XRP/USDT"].map((function(t){return{name:t,frequency:"5m",delayed:!!Math.round(Math.random())}}));var w=[{name:"4h",value:144e5},{name:"12h",value:432e5},{name:"1D",value:864e5}],E=([{name:"5m",value:3e4}].concat(w),function(){var t=new FormData;return t.append("action","frequencies"),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:t}).then((function(t){return t.json()})).then((function(t){return[].concat(function(t){if(Array.isArray(t))return L(t)}(e=t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(e)||function(t,e){if(t){if("string"==typeof t)return L(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?L(t,e):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),w);var e}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))}))}),x=function(t,e,n){var r=new FormData;return r.append("action","data"),r.append("pair",t),r.append("frequency",e),r.append("limit",n),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:r}).then((function(t){return t.json()})).then((function(t){return t}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))}))};function D(t){return function(t){if(Array.isArray(t))return M(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||T(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=t[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(t,e)||T(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function T(t,e){if(t){if("string"==typeof t)return M(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?M(t,e):void 0}}function M(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function O(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}new(function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!e)throw Error("No root element passed to the App");this.rootHTML=e,this.dataCharter=null,this.profitCharter=null,this.signalHighlight=null,this.pairList=[],this.frequencyList=[],this.activePair=null,this.activeFrequency=null,this.loadingMeta=!1,this.metaFetchError=null,this.loadingData=!1,this.dataFetchError=null,this.initialize()}var e,n;return e=t,(n=[{key:"initialize",value:function(){var t,e=this;this.rootHTML.innerHTML='\n    <div id="signals">\n        <div id="signal-panel"></div>\n        <div id="data-chart-wrapper"></div>\n        <div id="profit-chart-wrapper"></div>\n      </div>\n      <div id="signal-controls">\n      </div>\n    ',this.dataCharter=new f({root:document.getElementById("data-chart-wrapper")}),this.profitCharter=new f({root:document.getElementById("profit-chart-wrapper")}),this.signalHighlight=new g({root:document.getElementById("signal-panel")}),this.loadingMeta=!0,Promise.all([(t=new FormData,t.append("action","pairs"),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:t}).then((function(t){return t.json()})).then((function(t){return t}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))}))),E()]).then((function(t){var n=C(t,2),r=n[0],a=n[1];e.setFrequencies(a),e.setPairs(r),e.loadingMeta=!1})).then((function(){return e.renderControls()})).catch((function(t){e.metaError=t,e.loadingMeta=!1}))}},{key:"renderControls",value:function(){var t=this,e=document.getElementById("signal-controls");A.clear(e),e.innerHTML="";var n=this.frequencyList.map((function(e){var n=e.name,r=e.value,a=document.createElement("BUTTON");return a.setAttribute("type","button"),a.setAttribute("disabled","5m"!==n),a.innerHTML=n,a.classList.add("freq-control"),a.dataset.id=n,a.dataset.period=r,n===(t.pairList.find((function(e){return e.name===t.activeFrequency}))?t.activeFrequency:t.frequencyList[0].name)&&(a.classList.add("active"),a.click()),a})),r=this.pairList.filter((function(e){return e.frequency===t.activeFrequency})).map((function(e){var n=e.name,r=e.frequency,a=e.delayed,i=document.createElement("BUTTON");i.setAttribute("type","button"),i.classList.add("pair-control"),i.dataset.id=n;var o=document.createElement("SPAN");if(o.innerHTML=n,i.appendChild(o),a){var l=document.createElement("SPAN");l.innerHTML=" (delayed)",i.appendChild(l);var u=document.createElement("DIV");u.classList.add("tooltip"),u.innerHTML="You are not subscribed to this signal.",i.appendChild(u)}A.addEventListener(i,"click",(function(e){var a;t.loadingData=!0,t.dataFetchError=null,(t.activePair!==n||t.activeFrequency!==r)&&(Promise.all([x(n,r,500),(a=new FormData,a.append("action","trades"),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:a}).then((function(t){return t.json()})).then((function(t){return t}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))})))]).then((function(e){var n=C(e,2),r=n[0],a=n[1];t.updateSignalData(r),t.updateProfitData(a),t.loadingData=!1})).catch((function(e){t.loadingData=!1,t.dataFetchError=e})),t.activePair=n,t.renderActiveClasses())}));var s=t.pairList.find((function(e){return e.name===t.activePair}))?t.activePair:t.pairList[0].name;return n===s&&(i.classList.add("active"),i.click()),i})),a=document.createElement("DIV");a.setAttribute("id","frequency-controls"),n.forEach((function(t){return a.appendChild(t)})),e.appendChild(a),r.forEach((function(t){return e.appendChild(t)}))}},{key:"setPairs",value:function(t){Array.isArray(t)&&t.length&&(this.pairList=t)}},{key:"setFrequencies",value:function(t){if(!Array.isArray(t)||!t.length)throw new Error("setFrequencies method must recieve an array with at least one frequency.");this.frequencyList=t,this.activeFrequency=t[0].name}},{key:"updateSignalData",value:function(t){var e,n=(e=t).data.map((function(t){return{date:moment(t[e.columns.indexOf("date")]).valueOf(),buy:t[e.columns.indexOf("buy")],sell:t[e.columns.indexOf("sell")]}})).filter((function(t){return t.buy||t.sell})).map((function(t){return{timestamp:t.date,signalType:t.buy?"BUY":"SELL"}})),r=n[n.length-1];this.dataCharter.setData(t),this.signalHighlight.setData(r.timestamp,r.signalType)}},{key:"updateProfitData",value:function(t){this.profitCharter.setProfitData(t)}},{key:"renderActiveClasses",value:function(){var t=this;D(this.rootHTML.getElementsByClassName("pair-control")).forEach((function(e){e.classList.remove("active"),e.dataset.id===t.activePair&&e.classList.add("active")})),D(this.rootHTML.getElementsByClassName("freq-control")).forEach((function(e){e.classList.remove("active"),e.dataset.id===t.activeFrequency&&e.classList.add("active")}))}}])&&O(e.prototype,n),t}())(document.getElementById("signals-root"))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
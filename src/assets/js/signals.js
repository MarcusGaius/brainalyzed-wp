!function(){var t={666:function(t){var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",o=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var a=e&&e.prototype instanceof b?e:b,i=Object.create(a.prototype),o=new M(r||[]);return i._invoke=function(t,e,n){var r=d;return function(a,i){if(r===p)throw new Error("Generator is already running");if(r===f){if("throw"===a)throw i;return O()}for(n.method=a,n.arg=i;;){var o=n.delegate;if(o){var l=x(o,n);if(l){if(l===m)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=c(t,e,n);if("normal"===s.type){if(r=n.done?f:h,s.arg===m)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=f,n.method="throw",n.arg=s.arg)}}}(t,n,o),i}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var d="suspendedStart",h="suspendedYield",p="executing",f="completed",m={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var S=Object.getPrototypeOf,N=S&&S(S(D([])));N&&N!==n&&r.call(N,i)&&(y=N);var A=g.prototype=b.prototype=Object.create(y);function w(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function n(a,i,o,l){var s=c(t[a],t,i);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?e.resolve(d.__await).then((function(t){n("next",t,o,l)}),(function(t){n("throw",t,o,l)})):e.resolve(d).then((function(t){u.value=t,o(u)}),(function(t){return n("throw",t,o,l)}))}l(s.arg)}var a;this._invoke=function(t,r){function i(){return new e((function(e,a){n(t,r,e,a)}))}return a=a?a.then(i,i):i()}}function x(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,x(t,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var a=c(r,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function D(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:e,done:!0}}return v.prototype=g,s(A,"constructor",g),s(g,"constructor",v),v.displayName=s(g,l,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,s(t,l,"GeneratorFunction")),t.prototype=Object.create(A),t},t.awrap=function(t){return{__await:t}},w(L.prototype),s(L.prototype,o,(function(){return this})),t.AsyncIterator=L,t.async=function(e,n,r,a,i){void 0===i&&(i=Promise);var o=new L(u(e,n,r,a),i);return t.isGeneratorFunction(n)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},w(A),s(A,l,"Generator"),s(A,i,(function(){return this})),s(A,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=D,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],l=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var s=r.call(o,"catchLoc"),u=r.call(o,"finallyLoc");if(s&&u){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var a=r.arg;C(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:D(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};!function(){"use strict";function t(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function e(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=t[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(t,e)||l(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||l(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.r(r),n(666);var c="http://www.w3.org/2000/svg",d=1e3,h=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.rootElement=e.root,this.data=null,this.sampleCount=null,this.parsedData=null,this.width=1,this.height=1,this.lastPoint=null,this.x=null,this.xRange=null,this.xPonder=1,this.y=null,this.yRange=null,this.yPonder=1}var n,r;return n=t,(r=[{key:"createSignalPath",value:function(t,e,n,r){var a=t-8,i=e-8+16*("up"===n?1:-1),o=document.createElementNS(c,"g");o.classList.add("signal");var l=document.createElementNS(c,"circle");l.classList.add("signal-ring"),l.setAttributeNS(null,"cx",50),l.setAttributeNS(null,"cy",50),l.setAttributeNS(null,"r",60),l.setAttributeNS(null,"shape-rendering","geometricPrecision"),o.appendChild(l);var s=document.createElementNS(c,"mask");s.id="holesMask";var u=document.createElementNS(c,"rect");u.classList.add("mask-white"),u.setAttributeNS(null,"x",0),u.setAttributeNS(null,"y",0),u.setAttributeNS(null,"width",100),u.setAttributeNS(null,"height",100),u.setAttributeNS(null,"shape-rendering","geometricPrecision"),s.appendChild(u);var d=document.createElementNS(c,"circle");d.classList.add("mask-black"),d.setAttributeNS(null,"cx",34.5),d.setAttributeNS(null,"cy",71.5),d.setAttributeNS(null,"r",1.5),d.setAttributeNS(null,"shape-rendering","geometricPrecision"),s.appendChild(d);var h=document.createElementNS(c,"circle");h.classList.add("mask-black"),h.setAttributeNS(null,"cx",65.5),h.setAttributeNS(null,"cy",71.5),h.setAttributeNS(null,"r",1.5),h.setAttributeNS(null,"shape-rendering","geometricPrecision"),s.appendChild(h),o.appendChild(s);var p=document.createElementNS(c,"path");p.classList.add("buoy-stem"),p.setAttributeNS(null,"d","M 47.5 15.5 L 48 24 L 52 24 L 52.5 15.5 Z"),p.classList.add(r),p.setAttributeNS(null,"shape-rendering","geometricPrecision"),o.appendChild(p);var f=document.createElementNS(c,"circle");f.classList.add("buoy-head"),f.setAttributeNS(null,"cx",50),f.setAttributeNS(null,"cy",10),f.setAttributeNS(null,"r",6),f.setAttributeNS(null,"shape-rendering","geometricPrecision"),f.classList.add(r),o.appendChild(f);var m=document.createElementNS(c,"path");m.classList.add("buoy-body"),m.setAttributeNS(null,"mask","url(#holesMask)"),m.setAttributeNS(null,"d","M 45 24 L 43 71.5 L 40 71.5 L 40.5 76 L 37 76 L 37.5 72 C 38 67, 31 67, 31.5 72 L 32 76 L 28.5 76 L 30.5 91 L 69.5 91 L 71.5 76 L 68 76 L 68.5 72 C 69 67, 62 67, 62.5 72 L 63 76 L 59.5 76 L 60 71.5 L 57 71.5 L 55 24 Z"),m.setAttributeNS(null,"shape-rendering","geometricPrecision"),m.classList.add(r),o.setAttributeNS(null,"transform","translate(".concat(a," ").concat(i,") scale(").concat(.16," ").concat(.16,")")),o.appendChild(m);var b=document.createElementNS(c,"circle");b.classList.add("buoy-circle"),b.setAttributeNS(null,"cx",50),b.setAttributeNS(null,"cy",10),b.setAttributeNS(null,"r",6),b.setAttributeNS(null,"shape-rendering","geometricPrecision"),b.classList.add(r),o.appendChild(b);var v=document.createElementNS(c,"animate");v.id="anim-r-1",v.setAttributeNS(null,"attributeName","r"),v.setAttributeNS(null,"attributeType","XML"),v.setAttributeNS(null,"begin","anim-r-1.end + 3s"),v.setAttributeNS(null,"dur","3.6s"),v.setAttributeNS(null,"from","6"),v.setAttributeNS(null,"to","128"),b.appendChild(v);var g=document.createElementNS(c,"animate");g.id="anim-o-1",g.setAttributeNS(null,"attributeName","opacity"),g.setAttributeNS(null,"attributeType","XML"),g.setAttributeNS(null,"begin","anim-r-1.begin + 0.1s"),g.setAttributeNS(null,"dur","3s"),g.setAttributeNS(null,"from","0.6"),g.setAttributeNS(null,"to","0"),g.setAttributeNS(null,"fill","freeze"),b.appendChild(g);var y=document.createElementNS(c,"circle");y.classList.add("buoy-circle"),y.setAttributeNS(null,"cx",50),y.setAttributeNS(null,"cy",10),y.setAttributeNS(null,"r",6),y.setAttributeNS(null,"shape-rendering","geometricPrecision"),y.classList.add(r),o.appendChild(y);var S=document.createElementNS(c,"animate");S.id="anim-r-2",S.setAttributeNS(null,"attributeName","r"),S.setAttributeNS(null,"attributeType","XML"),S.setAttributeNS(null,"begin","anim-r-1.begin + 1s"),S.setAttributeNS(null,"dur","3.6s"),S.setAttributeNS(null,"from","6"),S.setAttributeNS(null,"to","128"),y.appendChild(S);var N=document.createElementNS(c,"animate");N.id="anim-o-2",N.setAttributeNS(null,"attributeName","opacity"),N.setAttributeNS(null,"attributeType","XML"),N.setAttributeNS(null,"begin","anim-r-2.begin + 0.1s"),N.setAttributeNS(null,"dur","3s"),N.setAttributeNS(null,"from","0.6"),N.setAttributeNS(null,"to","0"),N.setAttributeNS(null,"fill","freeze"),y.appendChild(N);var A=document.createElementNS(c,"circle");A.classList.add("buoy-circle"),A.setAttributeNS(null,"cx",50),A.setAttributeNS(null,"cy",10),A.setAttributeNS(null,"r",6),A.setAttributeNS(null,"shape-rendering","geometricPrecision"),A.classList.add(r),o.appendChild(A);var w=document.createElementNS(c,"animate");w.id="anim-r-3",w.setAttributeNS(null,"attributeName","r"),w.setAttributeNS(null,"attributeType","XML"),w.setAttributeNS(null,"begin","anim-r-2.begin + 1s"),w.setAttributeNS(null,"dur","3.6s"),w.setAttributeNS(null,"from","6"),w.setAttributeNS(null,"to","128"),A.appendChild(w);var L=document.createElementNS(c,"animate");return L.id="anim-o-3",L.setAttributeNS(null,"attributeName","opacity"),L.setAttributeNS(null,"attributeType","XML"),L.setAttributeNS(null,"begin","anim-r-3.begin + 0.1s"),L.setAttributeNS(null,"dur","3s"),L.setAttributeNS(null,"from","0.6"),L.setAttributeNS(null,"to","0"),L.setAttributeNS(null,"fill","freeze"),A.appendChild(L),"undefined"==typeof InstallTrigger?v.beginElement():setTimeout((function(){v.beginElement()}),0),o}},{key:"generateSignals",value:function(t){var e=this,n=document.createElementNS(c,"defs");t.appendChild(n);var r=document.createElementNS(c,"linearGradient");r.id="signal-gradient-positive",n.appendChild(r);var a=document.createElementNS(c,"stop");a.classList.add("signal-gradient-stop"),a.classList.add("positive"),a.setAttributeNS(null,"offset","0%"),r.appendChild(a);var i=document.createElementNS(c,"stop");i.classList.add("signal-gradient-stop"),i.setAttributeNS(null,"offset","100%"),r.appendChild(i);var o=document.createElementNS(c,"linearGradient");o.id="signal-gradient-negative",n.appendChild(o);var l=document.createElementNS(c,"stop");l.classList.add("signal-gradient-stop"),l.classList.add("negative"),l.setAttributeNS(null,"offset","0%"),o.appendChild(l);var s=document.createElementNS(c,"stop");s.classList.add("signal-gradient-stop"),s.setAttributeNS(null,"offset","100%"),o.appendChild(s),this.parsedData.signalData.forEach((function(n,r){var a=n.x,i=n.buy,o=n.pos,l=n.direction,s=(a+.5)*(e.width/e.sampleCount),u=-(e.height+(o+e.y)*e.yPonder),d=e.createSignalPath(s,u,l,"".concat(i>0?"positive":"negative")),h=document.createElementNS(c,"line");h.classList.add("signal-line"),h.setAttributeNS(null,"x1",s),h.setAttributeNS(null,"x2",s),h.setAttributeNS(null,"y1",-e.height),h.setAttributeNS(null,"y2",0),h.setAttributeNS(null,"stroke-width","1px"),h.setAttributeNS(null,"shape-rendering","crispEdges"),h.classList.add("".concat(i>0?"positive":"negative")),t.appendChild(h);var p=e.width,f=a*(e.width/e.sampleCount);if(f<e.width){r<e.parsedData.signalData.length-1&&(p=e.parsedData.signalData[r+1].x*(e.width/e.sampleCount));var m=document.createElementNS(c,"rect");m.classList.add("signal-area"),m.setAttributeNS(null,"x",s),m.setAttributeNS(null,"y",-e.height),m.setAttributeNS(null,"width",p-f),m.setAttributeNS(null,"height",e.height),m.setAttributeNS(null,"fill","url(#signal-gradient-".concat(i>0?"positive":"negative",")")),m.setAttributeNS(null,"shape-rendering","geometricPrecision"),t.appendChild(m)}t.appendChild(d)}))}},{key:"generateVolumes",value:function(t){var e=this,n=this.parsedData.volumeData.reduce((function(t,e){var n=e.volume;return Math.max(t,n)}),0);this.parsedData.volumeData.forEach((function(r,a){var i=r.volume,o=r.color;if(i){var l=i/n*e.height*(.3/(1.1+.3)),s=document.createElementNS(c,"rect");s.classList.add("volume"),s.setAttributeNS(null,"x",a*(e.width/e.sampleCount)+2),s.setAttributeNS(null,"y",-l),s.setAttributeNS(null,"width",4),s.setAttributeNS(null,"height",l),s.setAttributeNS(null,"shape-rendering","crispEdges"),s.classList.add("".concat(o)),t.appendChild(s)}}))}},{key:"generateCandles",value:function(t){var e=this;this.parsedData.candleData.forEach((function(n,r){var a=n.close-n.open,i=Math.abs(a)*e.yPonder,o=document.createElementNS(c,"rect");o.classList.add("candle-body"),o.setAttributeNS(null,"x",r*(e.width/e.sampleCount));var l=e.height+(Math.max(n.close,n.open)+e.y)*e.yPonder;o.setAttributeNS(null,"y",-l),o.setAttributeNS(null,"width",8),o.setAttributeNS(null,"height",i),o.setAttributeNS(null,"shape-rendering","crispEdges");var s=e.height+(n.high+e.y)*e.yPonder,u=e.height+(n.low+e.y)*e.yPonder,d=document.createElementNS(c,"line");d.classList.add("candle-wick"),d.setAttributeNS(null,"x1",(.5+r)*(e.width/e.sampleCount)),d.setAttributeNS(null,"x2",(.5+r)*(e.width/e.sampleCount)),d.setAttributeNS(null,"y1",-s),d.setAttributeNS(null,"y2",-u),d.setAttributeNS(null,"stroke-width","1px"),d.setAttributeNS(null,"shape-rendering","crispEdges"),a&&(o.classList.add("".concat(a>0?"positive":"negative")),d.classList.add("".concat(a>0?"positive":"negative"))),t.appendChild(o),t.appendChild(d)}))}},{key:"generateGrid",value:function(t,e,n){var r=this,a=i(function(){var t,e=64/r.width*r.xRange,n=1,a=1,i="",l=e,s=Math.log10(e);if(s<3){n*=Math.pow(10,Math.floor(s)),i="millisecond";for(var u=[2.5,5,10],c=[].concat(u).map((function(t){return t*n})).filter((function(t){return!(t-Math.trunc(t))})),d=0;c[d]<=e;)d++;l=c[d],a=u[d]*Math.pow(10,Math.floor(s))}else{var h=(t=e/(n*=1e3),60,Math.log(t)/Math.log(60));if(h<2){n*=Math.pow(60,Math.floor(h)),i=h<1?"second":"minute";for(var p=[5,10,30,60],f=[].concat(p).map((function(t){return t*n})),m=0;f[m]<=e;)m++;l=f[m],a=p[m]}else if(e<12*(n*=3600)){i="hour";for(var b=[3,6,12],v=[].concat(b).map((function(t){return t*n})),g=0;v[g]<=e;)g++;l=v[g],a=b[g]}else if(e<14*(n*=24)){i="date";for(var y=[1,2,3,5,7,14],S=[].concat(y).map((function(t){return t*n})),N=0;S[N]<=e;)N++;l=S[N],a=y[N]}else i="bigger"}var A=r.x,w=[];if("bigger"!==i){var L=(A=moment(A).startOf(i))[i]();A="date"===i?a>=7?moment(A.valueOf()).isoWeekday(8):moment(A.valueOf()).add(a-1-(L-1)%a,"day"):moment(A.valueOf()).add(a-1-(L-1)%a,i),w.push(A.valueOf());for(var x=w[w.length-1];x<r.x+r.xRange;){var E=x+l;w.push(E),x=w[w.length-1]}}else{if(e<6*(n*=30)){i="month";for(var C=[1,3,6],M=[].concat(C).map((function(t){return t*n})),D=0;M[D]<=e;)D++;a=C[D]}else!function(){n*=365/30,i="year";for(var t=[1,5,10],r=[].concat(t).map((function(t){return t*n})),o=0,l=0;r[o]<=e;)++o===r.length&&(l||t.splice(1,0,2.5),o=0,l++,r=[].concat(t).map((function(t){return t*Math.pow(10,l)*n})));a=t[o]*Math.pow(10,l)}();var O=(A=moment(r.x).startOf(i).add(1,i))[i]();A=moment(A.valueOf()).add(a-1-(O-1)%a,i),w.push(A.valueOf());for(var T=w[w.length-1];T<r.x+r.xRange;){var P=moment(T).add(a,i).valueOf();w.push(P),T=w[w.length-1]}w.pop()}return"month"===i&&a>1&&(w=o(w).map((function(t){return moment(t).subtract(1,"day").valueOf()}))),[w.map((function(t){return{x:(t-r.x)*r.xPonder,value:t}})),i]}(),2),l=a[0],s=a[1],u=function(t,e){var n=[.5,1,2.5,5,10],a=1,o=16/r.height*t;if(n[n.length-1]*a>o){for(;n[n.length-1]*a>o;)a/=10;a*=10}if(n[0]*a<o){for(;n[0]*a<o;)a*=10;a/=10}var l=i(n.reduce((function(t,e,n){return t[0]*a>o?[t[0],t[1]]:[e,2===n]}),[0,!1]),2),s=l[0],u=l[1],c=0;if(a)for(;Math.pow(10,c)<1/a;)c++;u&&c++,s=Number(Number.parseFloat(s*a).toFixed(c));var d=Number(Number.parseFloat(Math.ceil(e/s)*s).toFixed(c))||0,h=[];if(s)for(h.push(d);h[h.length-1]+s<=e+t;){var p=Number(Number.parseFloat(h[h.length-1]+s).toFixed(c));h.push(p)}return h.map((function(t){return{y:-r.height+(t-r.y)*r.yPonder,value:t}}))}(this.yRange,this.y);l.forEach((function(n){var a=n.x,i=n.value,o=document.createElementNS(c,"line");o.classList.add("grid-line"),o.setAttributeNS(null,"x1",a),o.setAttributeNS(null,"x2",a),o.setAttributeNS(null,"y1",-r.height),o.setAttributeNS(null,"y2",0),o.setAttributeNS(null,"stroke-width","1px"),o.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(o);var l=document.createElementNS(c,"text");l.classList.add("xAxis-text"),l.setAttributeNS(null,"x",a),l.setAttributeNS(null,"y",10),l.setAttribute("font-size","".concat(12)),l.setAttribute("dominant-baseline","hanging"),l.setAttribute("text-anchor","middle"),l.innerHTML="".concat(moment(i).format(function(t){switch(t){case"millisecond":return"ss.SSS";case"second":return"mm:ss";case"minute":case"hour":return"DD.MM HH:mm";case"date":return"DD-MM";case"month":return"DD-MM-YY";case"year":return"YYYY";default:return null}}(s))),e.appendChild(l)})),u.forEach((function(e){var a=e.y,i=e.value,o=document.createElementNS(c,"line");o.classList.add("grid-line"),o.setAttributeNS(null,"x1",0),o.setAttributeNS(null,"x2",r.width),o.setAttributeNS(null,"y1",a),o.setAttributeNS(null,"y2",a),o.setAttributeNS(null,"stroke-width","1px"),o.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(o);var l=document.createElementNS(c,"text");l.classList.add("yAxis-text"),l.setAttributeNS(null,"x",10),l.setAttributeNS(null,"y",a),l.setAttribute("font-size","".concat(12)),l.setAttribute("dominant-baseline","middle"),l.innerHTML="".concat(-i),n.appendChild(l)}))}},{key:"populateSVG",value:function(t,e,n,r){var a,i,o=document.createElementNS(c,"g");o.classList.add("grid-group");var l=document.createElementNS(c,"g");l.id="candle-group";var s=document.createElementNS(c,"g");s.id="volume-group";var u,d,h,p=document.createElementNS(c,"g");p.id="signal-group",t.appendChild(o),t.appendChild(l),t.appendChild(s),t.appendChild(p),null!==(a=this.parsedData)&&void 0!==a&&null!==(i=a.data)&&void 0!==i&&i.length&&(null!==(u=this.parsedData.candleData)&&void 0!==u&&u.length&&this.generateCandles(l),null!==(d=this.parsedData.volumeData)&&void 0!==d&&d.length&&this.generateVolumes(s),null!==(h=this.parsedData.signalData)&&void 0!==h&&h.length&&this.generateSignals(p)),r.scrollTo(this.width,0)}},{key:"generateSVGs",value:function(){var t=document.createElementNS(c,"svg");t.classList.add("chart-graph"),t.setAttributeNS(null,"version","1.1"),t.setAttribute("xmlns","http://www.w3.org/2000/svg"),t.setAttributeNS(null,"preserveAspectRatio","none"),t.setAttributeNS(null,"width","".concat(this.width,"px")),t.setAttributeNS(null,"viewBox","0 -".concat(this.height," ").concat(this.width," ").concat(this.height));var e=document.createElementNS(c,"svg");e.classList.add("chart-x-axis"),e.setAttributeNS(null,"version","1.1"),e.setAttributeNS(null,"width","".concat(this.width,"px")),e.setAttributeNS(null,"viewBox","0 0 ".concat(this.width," 40"));var n=document.createElementNS(c,"svg");return n.classList.add("chart-y-axis"),n.setAttributeNS(null,"version","1.1"),n.setAttributeNS(null,"height","".concat(this.height,"px")),n.setAttributeNS(null,"viewBox","0 -".concat(this.height," 50 ").concat(this.height)),[t,e,n]}},{key:"parseData",value:function(t){var n=this,r=["open","low","high","close"],l=i(this.data.data.reduce((function(t,i){var l=o(t[0]),s=n.data.columns.reduce((function(t,n,r){return e(e({},t),{},"date"!==n?a({},n,i[r]):{date:moment(i[r]).valueOf()/d})}),{});l.push(s);var u=r.map((function(t){return s[t]})).sort((function(t,e){return t-e}));return[l,t[1]?Math.min(t[1],u[0]):u[0],t[2]?Math.max(t[2],u[u.length-1]):u[u.length-1]]}),[[],null,null]),3),s=l[0],u=l[1],c=l[2];s.sort((function(t,e){return t.date-e.date})),this.parsedData={start:s[0].date,end:s[s.length-1].date,min:u,max:c,data:s,candleData:s.map((function(t){return{date:t.date,open:t.open,low:t.low,high:t.high,close:t.close}})),signalData:s.reduce((function(t,e,n){var r=e.buy,a=e.sell,i=e.open,l=e.close,s=o(t);return(r||a)&&s.push({x:n,buy:r,sell:a,pos:i,direction:i>l?"down":"up"}),s}),[]),volumeData:s.map((function(t){return{date:t.date,volume:t.volume,color:t.open-t.close>0?"negative":"positive"}}))};var h=Number((8/300*(this.parsedData.end-this.parsedData.start)).toFixed(4)),p=t.getBoundingClientRect().height-40-17;this.width=h,this.height=p,this.lastPoint=this.parsedData.end*d;var f=this.parsedData.start*d,m=300*this.sampleCount*d,b=this.width/m;this.x=f,this.xRange=m,this.xPonder=b;var v=this.parsedData.max-this.parsedData.min,g=-this.parsedData.max-.1*v,y=v*(1.1+.3),S=this.height/y;this.y=g,this.yRange=y,this.yPonder=S}},{key:"renderChart",value:function(){var t=document.createElement("DIV");t.classList.add("chart-area"),this.rootElement.innerHTML="",this.rootElement.appendChild(t),this.parseData(t);var e=i(this.generateSVGs(),3),n=e[0],r=e[1],a=e[2];this.rootElement.appendChild(a),t.appendChild(n),t.appendChild(r),this.populateSVG(n,r,a,t)}},{key:"setData",value:function(t){var e,n;this.data=t,this.data&&null!==(e=this.data)&&void 0!==e&&null!==(n=e.data)&&void 0!==n&&n.length&&(this.sampleCount=this.data.data.length,this.renderChart())}}])&&u(n.prototype,r),t}();function p(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function f(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?p(Object(n),!0).forEach((function(e){m(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function m(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function b(t){return function(t){if(Array.isArray(t))return y(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||g(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=t[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(t,e)||g(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(t,e){if(t){if("string"==typeof t)return y(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(t,e):void 0}}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function S(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var N="http://www.w3.org/2000/svg",A=1e3,w=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.rootElement=e.root,this.data=null,this.parsedData=null,this.width=1,this.height=1,this.x=null,this.xRange=null,this.xPonder=1,this.y=null,this.yRange=null,this.yPonder=1}var e,n;return e=t,(n=[{key:"generateProfit",value:function(t){var e=this,n=this.parsedData.start,r=this.parsedData.data.map((function(t){var r=t.date,a=t.cumulative;return{date:(r-n)*A*e.xPonder,cumulative:a}})),a=-(this.height+this.y*this.yPonder),i=v(r.reduce((function(t,n,i){var o=-(e.height+(n.cumulative+e.y)*e.yPonder);return["".concat(t[0]).concat(0===i?"M":" L"," ").concat(n.date.toFixed(4)," ").concat(t[3]," L ").concat(n.date.toFixed(4)," ").concat(o.toFixed(4)),"".concat(t[1]).concat(0===i?"M":" L"," ").concat(n.date.toFixed(4)," ").concat(t[3]>a?a:t[3]," L ").concat(n.date.toFixed(4)," ").concat(o<a?o.toFixed(4):a).concat(i===r.length-1?" L ".concat(n.date.toFixed(4)," ").concat(a):""),"".concat(t[2]).concat(0===i?"M":" L"," ").concat(n.date.toFixed(4)," ").concat(t[3]<a?a:t[3]," L ").concat(n.date.toFixed(4)," ").concat(o>a?o.toFixed(4):a).concat(i===r.length-1?" L ".concat(n.date.toFixed(4)," ").concat(a):""),o]}),["","","",a]),3),o=i[0],l=i[1],s=i[2],u=document.createElementNS(N,"line");if(u.id="zero-line",u.setAttributeNS(null,"x1",0),u.setAttributeNS(null,"x2",this.width),u.setAttributeNS(null,"y1",-this.height+(0-this.y)*this.yPonder),u.setAttributeNS(null,"y2",-this.height+(0-this.y)*this.yPonder),u.setAttributeNS(null,"stroke-width","0.5px"),u.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(u),r.length){var c=document.createElementNS(N,"path");c.classList.add("path"),c.classList.add("positive"),c.setAttributeNS(null,"d","".concat(l," Z")),c.setAttributeNS(null,"stroke-width","1px"),t.appendChild(c);var d=document.createElementNS(N,"path");d.classList.add("path"),d.classList.add("negative"),d.setAttributeNS(null,"d","".concat(s," Z")),d.setAttributeNS(null,"stroke-width","1px"),t.appendChild(d);var h=document.createElementNS(N,"path");h.classList.add("path"),h.setAttributeNS(null,"d",o),h.setAttributeNS(null,"stroke-width","1px"),t.appendChild(h)}}},{key:"generateGrid",value:function(t,e,n){var r=this,a=v(function(){var t,e=32/r.width*r.xRange,n=1,a=1,i="",o=e,l=Math.log10(e);if(l<3){n*=Math.pow(10,Math.floor(l)),i="millisecond";for(var s=[2.5,5,10],u=[].concat(s).map((function(t){return t*n})).filter((function(t){return!(t-Math.trunc(t))})),c=0;u[c]<=e;)c++;o=u[c],a=s[c]*Math.pow(10,Math.floor(l))}else{var d=(t=e/(n*=1e3),60,Math.log(t)/Math.log(60));if(d<2){n*=Math.pow(60,Math.floor(d)),i=d<1?"second":"minute";for(var h=[5,10,30,60],p=[].concat(h).map((function(t){return t*n})),f=0;p[f]<=e;)f++;o=p[f],a=h[f]}else if(e<12*(n*=3600)){i="hour";for(var m=[3,6,12],v=[].concat(m).map((function(t){return t*n})),g=0;v[g]<=e;)g++;o=v[g],a=m[g]}else if(e<14*(n*=24)){i="date";for(var y=[1,2,3,5,7,14],S=[].concat(y).map((function(t){return t*n})),N=0;S[N]<=e;)N++;o=S[N],a=y[N]}else i="bigger"}var A=r.x,w=[];if("bigger"!==i){var L=(A=moment(A).startOf(i))[i]();A="date"===i?a>=7?moment(A.valueOf()).isoWeekday(8):moment(A.valueOf()).add(a-1-(L-1)%a,"day"):moment(A.valueOf()).add(a-1-(L-1)%a,i),w.push(A.valueOf());for(var x=w[w.length-1];x<r.x+r.xRange;){var E=x+o;w.push(E),x=w[w.length-1]}}else{if(e<6*(n*=30)){i="month";for(var C=[1,3,6],M=[].concat(C).map((function(t){return t*n})),D=0;M[D]<=e;)D++;a=C[D]}else!function(){n*=365/30,i="year";for(var t=[1,5,10],r=[].concat(t).map((function(t){return t*n})),o=0,l=0;r[o]<=e;)++o===r.length&&(l||t.splice(1,0,2.5),o=0,l++,r=[].concat(t).map((function(t){return t*Math.pow(10,l)*n})));a=t[o]*Math.pow(10,l)}();var O=(A=moment(r.x).startOf(i).add(1,i))[i]();A=moment(A.valueOf()).add(a-1-(O-1)%a,i),w.push(A.valueOf());for(var T=w[w.length-1];T<r.x+r.xRange;){var P=moment(T).add(a,i).valueOf();w.push(P),T=w[w.length-1]}w.pop()}return"month"===i&&a>1&&(w=b(w).map((function(t){return moment(t).subtract(1,"day").valueOf()}))),[w.map((function(t){return{x:(t-r.x)*r.xPonder,value:t}})),i]}(),2),i=a[0],o=a[1],l=function(t,e){var n=[.5,1,2.5,5,10],a=1,i=16/r.height*t;if(n[n.length-1]*a>i){for(;n[n.length-1]*a>i;)a/=10;a*=10}if(n[0]*a<i){for(;n[0]*a<i;)a*=10;a/=10}var o=v(n.reduce((function(t,e,n){return t[0]*a>i?[t[0],t[1]]:[e,2===n]}),[0,!1]),2),l=o[0],s=o[1],u=0;if(a)for(;Math.pow(10,u)<1/a;)u++;s&&u++,l=Number(Number.parseFloat(l*a).toFixed(u));var c=Number(Number.parseFloat(Math.ceil(e/l)*l).toFixed(u))||0,d=[];if(l)for(d.push(c);d[d.length-1]+l<=e+t;){var h=Number(Number.parseFloat(d[d.length-1]+l).toFixed(u));d.push(h)}return d.map((function(t){return{y:-r.height+(t-r.y)*r.yPonder,value:t}}))}(this.yRange,this.y);i.forEach((function(n){var a=n.x,i=n.value,l=document.createElementNS(N,"line");l.classList.add("grid-line"),l.setAttributeNS(null,"x1",a),l.setAttributeNS(null,"x2",a),l.setAttributeNS(null,"y1",-r.height),l.setAttributeNS(null,"y2",0),l.setAttributeNS(null,"stroke-width","1px"),l.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(l);var s=document.createElementNS(N,"text");s.classList.add("xAxis-text"),s.setAttributeNS(null,"x",a),s.setAttributeNS(null,"y",10),s.setAttribute("font-size","".concat(12)),s.setAttribute("dominant-baseline","hanging"),s.setAttribute("text-anchor","middle"),s.innerHTML="".concat(moment(i).format(function(t){switch(t){case"millisecond":return"ss.SSS";case"second":return"mm:ss";case"minute":case"hour":return"DD.MM HH:mm";case"date":return"DD-MM";case"month":return"DD-MM-YY";case"year":return"YYYY";default:return null}}(o))),e.appendChild(s)})),l.forEach((function(e){var a=e.y,i=e.value,o=document.createElementNS(N,"line");o.classList.add("grid-line"),o.setAttributeNS(null,"x1",0),o.setAttributeNS(null,"x2",r.width),o.setAttributeNS(null,"y1",a),o.setAttributeNS(null,"y2",a),o.setAttributeNS(null,"stroke-width","1px"),o.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(o);var l=document.createElementNS(N,"text");l.classList.add("yAxis-text"),l.setAttributeNS(null,"x",10),l.setAttributeNS(null,"y",a),l.setAttribute("font-size","".concat(12)),l.setAttribute("dominant-baseline","middle"),l.innerHTML="".concat(-i),n.appendChild(l)}))}},{key:"populateSVG",value:function(t,e,n){var r,a,i=document.createElementNS(N,"g");i.classList.add("grid-group");var o,l=document.createElementNS(N,"g");l.id="profit-group",t.appendChild(i),t.appendChild(l),null!==(r=this.parsedData)&&void 0!==r&&null!==(a=r.data)&&void 0!==a&&a.length&&null!==(o=this.parsedData.data)&&void 0!==o&&o.length&&this.generateProfit(l)}},{key:"generateSVGs",value:function(){var t=document.createElementNS(N,"svg");t.classList.add("chart-graph"),t.setAttributeNS(null,"version","1.1"),t.setAttribute("xmlns","http://www.w3.org/2000/svg"),t.setAttributeNS(null,"preserveAspectRatio","none"),t.setAttributeNS(null,"width","".concat(this.width,"px")),t.setAttributeNS(null,"viewBox","0 -".concat(this.height," ").concat(this.width," ").concat(this.height));var e=document.createElementNS(N,"svg");e.classList.add("chart-x-axis"),e.setAttributeNS(null,"version","1.1"),e.setAttributeNS(null,"width","".concat(this.width,"px")),e.setAttributeNS(null,"viewBox","0 0 ".concat(this.width," 40"));var n=document.createElementNS(N,"svg");return n.classList.add("chart-y-axis"),n.setAttributeNS(null,"version","1.1"),n.setAttributeNS(null,"height","".concat(this.height,"px")),n.setAttributeNS(null,"viewBox","0 -".concat(this.height," 50 ").concat(this.height)),[t,e,n]}},{key:"parseData",value:function(t){var e=v(b(this.data.trades).map((function(t){var e=t.close_timestamp,n=t.close_profit_pct;return{date:Math.round(e/A),profit:n}})).sort((function(t,e){return t.date-e.date})).reduce((function(t,e,n){var r=n?t[0][n-1].cumulative+e.profit:e.profit,a=f(f({},e),{},{cumulative:r}),i=null!==t[1]?Math.min(t[1],r):r,o=null!==t[2]?Math.max(t[2],r):r,l=b(t[0]);return l.push(a),[l,i,o]}),[[],null,null]),3),n=e[0],r=e[1],a=e[2];this.parsedData={start:n[0].date,end:n[n.length-1].date,data:n,min:r,max:a};var i=t.getBoundingClientRect().width,o=t.getBoundingClientRect().height-40;this.width=i,this.height=o;var l=this.parsedData.start*A,s=(this.parsedData.end-this.parsedData.start)*A,u=this.width/s;this.x=l,this.xRange=s,this.xPonder=u;var c=this.parsedData.max-this.parsedData.min,d=-this.parsedData.max-.1*c,h=c*(1.1+.1),p=this.height/h;this.y=d,this.yRange=h,this.yPonder=p}},{key:"renderChart",value:function(){var t=document.createElement("DIV");t.classList.add("chart-area"),this.rootElement.innerHTML="",this.rootElement.appendChild(t),this.parseData(t);var e=v(this.generateSVGs(),3),n=e[0],r=e[1],a=e[2];this.rootElement.appendChild(a),t.appendChild(n),t.appendChild(r),this.populateSVG(n,r,a,t)}},{key:"setData",value:function(t){var e,n;this.data=t,this.data&&null!==(e=this.data)&&void 0!==e&&null!==(n=e.trades)&&void 0!==n&&n.length&&this.renderChart()}}])&&S(e.prototype,n),t}();function L(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var x="http://www.w3.org/2000/svg",E=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.root=e.root,this.timestamp=null,this.signalType="",this.interval=null}var e,n;return e=t,(n=[{key:"setData",value:function(t,e){this.timestamp=t,this.signalType=e,clearInterval(this.interval),this.render()}},{key:"updateTime",value:function(t){var e=Math.round((moment(Date.now()).valueOf()-this.timestamp)/1e3),n=Math.floor(e/60),r=Math.floor(n/60),a=Math.floor(r/24);e-=60*n,n-=60*r,r-=24*a,t.innerHTML="".concat(a?"".concat(a,"d "):"").concat(r?"".concat(r,"h "):"").concat(n?"".concat(n,"m "):"").concat(e?"".concat(e,"s "):""," ago")}},{key:"render",value:function(){var t=this,e="BUY"===this.signalType?"positive":"negative",n=this.root;n.innerHTML="";var r=document.createElementNS(x,"svg");r.id="signal-svg",r.setAttributeNS(null,"version","1.1"),r.setAttribute("xmlns","http://www.w3.org/2000/svg"),r.setAttributeNS(null,"viewBox","-17.5 -75 125 250"),r.setAttributeNS(null,"preserveAspectRatio","none"),n.appendChild(r);var a=document.createElement("div");a.id="signal-div";var i=document.createElement("span");i.id="signal-span",i.innerHTML=this.signalType,i.classList.add(e),a.appendChild(i),this.signalTIME=document.createElement("span"),this.signalTIME.id="signal-time",this.signalTIME.classList.add(e),a.appendChild(this.signalTIME),n.appendChild(a),this.interval=setInterval((function(){return t.updateTime(t.signalTIME)}),1e3);var o=document.createElementNS(x,"path");o.classList.add("buoy-stem"),o.setAttributeNS(null,"d","M 47.5 15.5 L 48 24 L 52 24 L 52.5 15.5 Z"),o.classList.add(e),r.appendChild(o);var l=document.createElementNS(x,"circle");l.classList.add("buoy-head"),l.setAttributeNS(null,"cx",50),l.setAttributeNS(null,"cy",10),l.setAttributeNS(null,"r",6),l.classList.add(e),r.appendChild(l);var s=document.createElementNS(x,"path");s.classList.add("buoy-body"),s.setAttributeNS(null,"mask","url(#holesMask)"),s.setAttributeNS(null,"d","M 45 24 L 43 71.5 L 40 71.5 L 40.5 76 L 37 76 L 37.5 72 C 38 67, 31 67, 31.5 72 L 32 76 L 28.5 76 L 30.5 91 L 69.5 91 L 71.5 76 L 68 76 L 68.5 72 C 69 67, 62 67, 62.5 72 L 63 76 L 59.5 76 L 60 71.5 L 57 71.5 L 55 24 Z"),s.classList.add(e),r.appendChild(s);var u=document.createElementNS(x,"circle");u.classList.add("buoy-circle"),u.setAttributeNS(null,"cx",50),u.setAttributeNS(null,"cy",10),u.setAttributeNS(null,"r",6),u.classList.add(e),r.appendChild(u);var c=document.createElementNS(x,"animate");c.id="anim-r-1",c.setAttributeNS(null,"attributeName","r"),c.setAttributeNS(null,"attributeType","XML"),c.setAttributeNS(null,"begin","anim-r-1.end + 3s"),c.setAttributeNS(null,"dur","3.6s"),c.setAttributeNS(null,"from","6"),c.setAttributeNS(null,"to","64"),u.appendChild(c);var d=document.createElementNS(x,"animate");d.id="anim-o-1",d.setAttributeNS(null,"attributeName","opacity"),d.setAttributeNS(null,"attributeType","XML"),d.setAttributeNS(null,"begin","anim-r-1.begin + 0.1s"),d.setAttributeNS(null,"dur","3s"),d.setAttributeNS(null,"from","0.6"),d.setAttributeNS(null,"to","0"),d.setAttributeNS(null,"fill","freeze"),u.appendChild(d);var h=document.createElementNS(x,"circle");h.classList.add("buoy-circle"),h.setAttributeNS(null,"cx",50),h.setAttributeNS(null,"cy",10),h.setAttributeNS(null,"r",6),h.classList.add(e),r.appendChild(h);var p=document.createElementNS(x,"animate");p.id="anim-r-2",p.setAttributeNS(null,"attributeName","r"),p.setAttributeNS(null,"attributeType","XML"),p.setAttributeNS(null,"begin","anim-r-1.begin + 1s"),p.setAttributeNS(null,"dur","3.6s"),p.setAttributeNS(null,"from","6"),p.setAttributeNS(null,"to","64"),h.appendChild(p);var f=document.createElementNS(x,"animate");f.id="anim-o-2",f.setAttributeNS(null,"attributeName","opacity"),f.setAttributeNS(null,"attributeType","XML"),f.setAttributeNS(null,"begin","anim-r-2.begin + 0.1s"),f.setAttributeNS(null,"dur","3s"),f.setAttributeNS(null,"from","0.6"),f.setAttributeNS(null,"to","0"),f.setAttributeNS(null,"fill","freeze"),h.appendChild(f);var m=document.createElementNS(x,"circle");m.classList.add("buoy-circle"),m.setAttributeNS(null,"cx",50),m.setAttributeNS(null,"cy",10),m.setAttributeNS(null,"r",6),m.classList.add(e),r.appendChild(m);var b=document.createElementNS(x,"animate");b.id="anim-r-3",b.setAttributeNS(null,"attributeName","r"),b.setAttributeNS(null,"attributeType","XML"),b.setAttributeNS(null,"begin","anim-r-2.begin + 1s"),b.setAttributeNS(null,"dur","3.6s"),b.setAttributeNS(null,"from","6"),b.setAttributeNS(null,"to","64"),m.appendChild(b);var v=document.createElementNS(x,"animate");v.id="anim-o-3",v.setAttributeNS(null,"attributeName","opacity"),v.setAttributeNS(null,"attributeType","XML"),v.setAttributeNS(null,"begin","anim-r-3.begin + 0.1s"),v.setAttributeNS(null,"dur","3s"),v.setAttributeNS(null,"from","0.6"),v.setAttributeNS(null,"to","0"),v.setAttributeNS(null,"fill","freeze"),m.appendChild(v),"undefined"==typeof InstallTrigger?c.beginElement():setTimeout((function(){c.beginElement()}),0)}}])&&L(e.prototype,n),t}();function C(t){return function(t){if(Array.isArray(t))return M(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return M(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?M(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}fetch;var D,O=(D=new Map,{addEventListener:function(t,e,n){var r=D.has(t)?D.get(t):{};r[e]=r[e]||[],r[e].push(n),D.set(t,r),t.addEventListener(e,n)},clear:function(t){if(C(t.children).forEach((function(t){if(D.has(t)){var e=D.get(t);Object.keys(e).forEach((function(n){e[n].forEach((function(e){t.removeEventListener(n,e)}))}))}t.children.length&&C(t.children).forEach(O.clear)})),D.has(t)){var e=D.get(t);Object.keys(e).forEach((function(n){e[n].forEach((function(e){t.removeEventListener(n,e)}))}))}}});function T(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}["BTC/USDT","ETH/USDT","MBOX/USDT","BUSD/USDT","SHIB/USDT","SAND/USDT","SOL/USDT","REQ/USDT","LUNA/USDT","MATIC/USDT","GALA/USDT","MANA/USDT","AVAX/USDT","TLM/USDT","ALICE/USDT","TRX/USDT","CTK/USDT","DOT/USDT","SANTOS/USDT","XRP/USDT"].map((function(t){return{name:t,frequency:"5m",delayed:!!Math.round(Math.random())}}));var P=[{name:"4h",value:144e5},{name:"12h",value:432e5},{name:"1D",value:864e5}],j=([{name:"5m",value:3e4}].concat(P),function(){var t=new FormData;return t.append("action","frequencies"),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:t}).then((function(t){return t.json()})).then((function(t){return[].concat(function(t){if(Array.isArray(t))return T(t)}(e=t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(e)||function(t,e){if(t){if("string"==typeof t)return T(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(t,e):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),P);var e}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))}))}),k=function(t,e,n){var r=new FormData;return r.append("action","data"),r.append("pair",t),r.append("frequency",e),r.append("limit",n),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:r}).then((function(t){return t.json()})).then((function(t){return t}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))}))};function F(t){return function(t){if(Array.isArray(t))return R(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||U(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=t[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(t,e)||U(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function U(t,e){if(t){if("string"==typeof t)return R(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?R(t,e):void 0}}function R(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function _(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}new(function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!e)throw Error("No root element passed to the App");this.rootHTML=e,this.dataCharter=null,this.profitCharter=null,this.latestPositive=null,this.latestNegative=null,this.pairList=[],this.frequencyList=[],this.activePair=null,this.activeFrequency=null,this.loadingMeta=!1,this.metaFetchError=null,this.loadingData=!1,this.dataFetchError=null,this.initialize()}var e,n;return e=t,(n=[{key:"initialize",value:function(){var t,e=this;this.rootHTML.innerHTML='\n    <div id="signals">\n        <div id="signal-panel">\n          <div id="signal-header">\n            <div id="signal-name">BTC/USDT</div>\n            <div id="freq-link">\n              <span>View in FreqUI</span>\n              <span>(coming soon)</span>\n            </div>\n          </div>\n          <div id="latest-signals">\n            <div id="latest-positive"></div>\n            <div id="latest-negative"></div>\n          </div>\n        </div>\n        <div id="data-chart-wrapper"></div>\n        <div id="profit-chart-wrapper"></div>\n      </div>\n      <div id="signal-controls">\n      </div>\n    ',this.dataCharter=new h({root:document.getElementById("data-chart-wrapper")}),this.profitCharter=new w({root:document.getElementById("profit-chart-wrapper")}),this.latestPositive=new E({root:document.getElementById("latest-positive")}),this.latestNegative=new E({root:document.getElementById("latest-negative")}),this.loadingMeta=!0,Promise.all([(t=new FormData,t.append("action","pairs"),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:t}).then((function(t){return t.json()})).then((function(t){return t}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))}))),j()]).then((function(t){var n=I(t,2),r=n[0],a=n[1];e.setFrequencies(a),e.setPairs(r),e.loadingMeta=!1})).then((function(){return e.renderControls()})).catch((function(t){e.metaError=t,e.loadingMeta=!1}))}},{key:"renderControls",value:function(){var t=this,e=document.getElementById("signal-controls");O.clear(e),e.innerHTML="";var n=this.frequencyList.map((function(e){var n=e.name,r=e.value,a=document.createElement("BUTTON");return a.setAttribute("type","button"),a.setAttribute("disabled","5m"!==n),a.innerHTML=n,a.classList.add("freq-control"),a.dataset.id=n,a.dataset.period=r,n===(t.pairList.find((function(e){return e.name===t.activeFrequency}))?t.activeFrequency:t.frequencyList[0].name)&&(a.classList.add("active"),a.click()),a})),r=this.pairList.filter((function(e){return e.frequency===t.activeFrequency})).map((function(e){var n=e.name,r=e.frequency,a=e.delayed,i=document.createElement("BUTTON");i.setAttribute("type","button"),i.classList.add("pair-control"),i.dataset.id=n;var o=document.createElement("SPAN");if(o.innerHTML=n,i.appendChild(o),a){var l=document.createElement("SPAN");l.innerHTML=" (delayed)",i.appendChild(l);var s=document.createElement("DIV");s.classList.add("tooltip"),s.innerHTML="You are not subscribed to this signal.",i.appendChild(s)}O.addEventListener(i,"click",(function(e){var a;t.loadingData=!0,t.dataFetchError=null,(t.activePair!==n||t.activeFrequency!==r)&&(Promise.all([k(n,r,500),(a=new FormData,a.append("action","trades"),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:a}).then((function(t){return t.json()})).then((function(t){return t}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))})))]).then((function(e){var n=I(e,2),r=n[0],a=n[1];t.updateSignalData(r),t.updateProfitData(a),t.loadingData=!1})).catch((function(e){t.loadingData=!1,t.dataFetchError=e})),t.activePair=n,t.renderActiveClasses())}));var u=t.pairList.find((function(e){return e.name===t.activePair}))?t.activePair:t.pairList[0].name;return n===u&&(i.classList.add("active"),i.click()),i})),a=document.createElement("DIV");a.setAttribute("id","frequency-controls"),n.forEach((function(t){return a.appendChild(t)})),e.appendChild(a),r.forEach((function(t){return e.appendChild(t)}))}},{key:"setPairs",value:function(t){Array.isArray(t)&&t.length&&(this.pairList=t)}},{key:"setFrequencies",value:function(t){if(!Array.isArray(t)||!t.length)throw new Error("setFrequencies method must recieve an array with at least one frequency.");this.frequencyList=t,this.activeFrequency=t[0].name}},{key:"updateSignalData",value:function(t){var e,n=(e=t).data.map((function(t){return{date:moment(t[e.columns.indexOf("date")]).valueOf(),buy:t[e.columns.indexOf("buy")],sell:t[e.columns.indexOf("sell")]}})).filter((function(t){return t.buy||t.sell})).map((function(t){return{timestamp:t.date,signalType:t.buy?"BUY":"SELL"}})),r=n[n.length-1];this.dataCharter.setData(t),this.latestPositive.setData(r.timestamp,r.signalType),this.latestNegative.setData(r.timestamp,r.signalType)}},{key:"updateProfitData",value:function(t){this.profitCharter.setData(t)}},{key:"renderActiveClasses",value:function(){var t=this;F(this.rootHTML.getElementsByClassName("pair-control")).forEach((function(e){e.classList.remove("active"),e.dataset.id===t.activePair&&e.classList.add("active")})),F(this.rootHTML.getElementsByClassName("freq-control")).forEach((function(e){e.classList.remove("active"),e.dataset.id===t.activeFrequency&&e.classList.add("active")}))}}])&&_(e.prototype,n),t}())(document.getElementById("signals-root"))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yci1kZXZlbG9wbWVudC1lbnYvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL3JyLWRldmVsb3BtZW50LWVudi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yci1kZXZlbG9wbWVudC1lbnYvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yci1kZXZlbG9wbWVudC1lbnYvLi9zcmMvY3J5cHRvL2RhdGFDaGFydGVyLmpzIiwid2VicGFjazovL3JyLWRldmVsb3BtZW50LWVudi8uL3NyYy9jcnlwdG8vcHJvZml0Q2hhcnRlci5qcyIsIndlYnBhY2s6Ly9yci1kZXZlbG9wbWVudC1lbnYvLi9zcmMvY3J5cHRvL3NpZ25hbC5qcyIsIndlYnBhY2s6Ly9yci1kZXZlbG9wbWVudC1lbnYvLi9zcmMvY3J5cHRvL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vcnItZGV2ZWxvcG1lbnQtZW52Ly4vc3JjL2NyeXB0by9kYXRhLWhhbmRsZXJzLmpzIiwid2VicGFjazovL3JyLWRldmVsb3BtZW50LWVudi8uL3NyYy9jcnlwdG8vaW5kZXguanMiXSwibmFtZXMiOlsicnVudGltZSIsImV4cG9ydHMiLCJ1bmRlZmluZWQiLCJPcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093biIsImhhc093blByb3BlcnR5IiwiJFN5bWJvbCIsIlN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXJyIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJtZXRob2QiLCJhcmciLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkVycm9yIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJkb25lIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJmbiIsImNhbGwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJ0aGlzIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwibW9kdWxlIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiciIsIm5hbWVzcGFjZSIsInJlbW92ZU1pbGxpcyIsInByb3BzIiwicm9vdEVsZW1lbnQiLCJyb290IiwiZGF0YSIsInNhbXBsZUNvdW50IiwicGFyc2VkRGF0YSIsIndpZHRoIiwiaGVpZ2h0IiwibGFzdFBvaW50IiwieCIsInhSYW5nZSIsInhQb25kZXIiLCJ5IiwieVJhbmdlIiwieVBvbmRlciIsImRpcmVjdGlvbiIsImNvbG9yIiwicGF0aExlZnQiLCJzaWduYWxTaXplIiwicGF0aFRvcCIsInRlbXBTaWduYWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNsYXNzTGlzdCIsImFkZCIsInRlbXBSaW5nIiwic2V0QXR0cmlidXRlTlMiLCJhcHBlbmRDaGlsZCIsInRlbXBNYXNrIiwiaWQiLCJtYXNrUmVjdCIsIm1hc2tDaXJjbGVMZWZ0IiwibWFza0NpcmNsZVJpZ2h0IiwiYnVveVN0ZW0iLCJidW95SGVhZCIsImJ1b3lCb2R5IiwiY2lyY2xlMSIsImFuaW1SMSIsImFuaW1PMSIsImNpcmNsZTIiLCJhbmltUjIiLCJhbmltTzIiLCJjaXJjbGUzIiwiYW5pbVIzIiwiYW5pbU8zIiwiSW5zdGFsbFRyaWdnZXIiLCJiZWdpbkVsZW1lbnQiLCJzZXRUaW1lb3V0Iiwic2lnbmFsR3JvdXAiLCJkZWZzIiwic2lnbmFsR3JhZGllbnRQb3NpdGl2ZSIsImJlZ2luUCIsImVuZFAiLCJzaWduYWxHcmFkaWVudE5lZ2F0aXZlIiwiYmVnaW5OIiwiZW5kTiIsInNpZ25hbERhdGEiLCJidXkiLCJwb3MiLCJtaWRYIiwibWlkWSIsInNpZ25hbCIsImNyZWF0ZVNpZ25hbFBhdGgiLCJzaWduYWxMaW5lIiwibmV4dFgiLCJ0ZW1wWCIsInNpZ25hbEFyZWEiLCJ2b2x1bWVHcm91cCIsIm1heFZvbHVtZSIsInZvbHVtZURhdGEiLCJyZWR1Y2UiLCJhY2MiLCJ2b2x1bWUiLCJNYXRoIiwibWF4IiwidGVtcFZvbHVtZSIsImNhbmRsZVdpZHRoIiwiY2FuZGxlR3JvdXAiLCJjYW5kbGVEYXRhIiwiY2FuZGxlIiwiY2FuZGxlU3BhbiIsImNsb3NlIiwib3BlbiIsImNhbmRsZUhlaWdodCIsImFicyIsInRlbXBDYW5kbGUiLCJ5MSIsImhpZ2giLCJ5MiIsImxvdyIsInRlbXBXaWNrIiwiZ3JpZEdyb3VwIiwieEF4aXMiLCJ5QXhpcyIsImdyaWRUaW1lU3BhbiIsImFic1BvbmRlciIsInJlbFBvbmRlciIsInNjYWxlIiwidGVtcFJhbmdlIiwibG9nMTAiLCJmbG9vciIsInJlbFZhbHVlcyIsImFic1ZhbHVlcyIsIm1hcCIsImUiLCJmaWx0ZXIiLCJ0cnVuYyIsImxvZzYwIiwibG9nIiwic3RhcnRpbmdQb2ludCIsInBvaW50cyIsInJlbWFpbmRlciIsIm1vbWVudCIsInN0YXJ0T2YiLCJ2YWx1ZU9mIiwiaXNvV2Vla2RheSIsIm5ld1BvaW50IiwiaiIsInNwbGljZSIsInBvaW50Iiwic3VidHJhY3QiLCJjYWxjdWxhdGVYUG9pbnRzIiwieFBvaW50cyIsInhTY2FsZSIsInlQb2ludHMiLCJyYW5nZSIsInN0YXJ0IiwidGVtcFZhbHVlcyIsInBvbmRlciIsImdyaWRZU3BhbiIsImN1ciIsImRpc3RhbmNlIiwiZGVjaW1hbHMiLCJOdW1iZXIiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsImNlaWwiLCJjYWxjdWxhdGVZUG9pbnRzIiwieFZhbCIsInRlbXBHcmlkTGluZSIsInRlbXBHcmlkVGV4dCIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsImZvcm1hdCIsImdldEZvcm1hdEZyb21TY2FsZSIsInlWYWwiLCJzdmciLCJjaGFydEFyZWEiLCJnZW5lcmF0ZUNhbmRsZXMiLCJnZW5lcmF0ZVZvbHVtZXMiLCJnZW5lcmF0ZVNpZ25hbHMiLCJzY3JvbGxUbyIsImdyYXBoU1ZHIiwiY2FuZGxlQm91bmRzRmllbGRzVG9DaGVjayIsInRlbXBEYXRhIiwidGVtcFJvdyIsImNvbHVtbnMiLCJhY2N1bXVsYXRlZCIsImN1cnJlbnQiLCJkYXRlIiwiY2FuZGxlVmFsdWVzIiwiZmllbGQiLCJzb3J0IiwiYSIsImIiLCJtaW4iLCJlbmQiLCJzZWxsIiwidGVtcFJlc3VsdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInlTcGFuIiwiY3JlYXRlRWxlbWVudCIsInBhcnNlRGF0YSIsImdlbmVyYXRlU1ZHcyIsInBvcHVsYXRlU1ZHIiwiZGF0YVBvaW50cyIsInJlbmRlckNoYXJ0IiwicHJvZml0R3JvdXAiLCJjdW11bGF0aXZlIiwicHNldWRvMCIsImxpbmUiLCJuZWciLCJwcm9maXQwTGluZSIsInBvc1BhdGgiLCJuZWdQYXRoIiwidGVtcFBhdGgiLCJnZW5lcmF0ZVByb2ZpdCIsInRyYWRlcyIsImNsb3NlX3RpbWVzdGFtcCIsImNsb3NlX3Byb2ZpdF9wY3QiLCJyb3VuZCIsInByb2ZpdCIsInRlbXBDdW1tdWxhdGl2ZSIsInRlbXBPYmoiLCJ0ZW1wTWluIiwidGVtcE1heCIsIlNpZ25hbCIsInRpbWVzdGFtcCIsInNpZ25hbFR5cGUiLCJpbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJyZW5kZXIiLCJzcGFuRWxlbWVudCIsImVsYXBzZWRTZWNvbmRzIiwiRGF0ZSIsIm5vdyIsImVsYXBzZWRNaW51dGVzIiwiZWxhcHNlZEhvdXJzIiwiZWxhcHNlZERheXMiLCJzaWduYWxQYW5lbCIsInNpZ25hbFNWRyIsInNpZ25hbERJViIsInNpZ25hbFNQQU4iLCJzaWduYWxUSU1FIiwic2V0SW50ZXJ2YWwiLCJ1cGRhdGVUaW1lIiwiZmV0Y2giLCJoYW5kbGVycyIsImV2ZW50UmVnaXN0cnkiLCJNYXAiLCJhZGRFdmVudExpc3RlbmVyIiwiZWxlbWVudCIsImV2ZW50IiwidGFibGUiLCJoYXMiLCJnZXQiLCJzZXQiLCJjbGVhciIsImNoaWxkcmVuIiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmcmVxdWVuY3kiLCJkZWxheWVkIiwicmFuZG9tIiwiZGlzYWJsZWRGcmVxdWVuY2llcyIsImZldGNoRnJlcXVlbmNpZXMiLCJib2R5IiwiRm9ybURhdGEiLCJhcHBlbmQiLCJicmFpbmFseXplZF93cCIsImFqYXhfdXJsIiwiaGVhZGVycyIsImFjY2VwdCIsIm1vZGUiLCJjYWNoZSIsImNyZWRlbnRpYWxzIiwicmVkaXJlY3QiLCJyZWZlcnJlclBvbGljeSIsInJlcyIsImpzb24iLCJtZXNzYWdlIiwiZmV0Y2hDYW5kbGVEYXRhIiwibGltaXQiLCJodG1sRWxlbWVudCIsInJvb3RIVE1MIiwiZGF0YUNoYXJ0ZXIiLCJwcm9maXRDaGFydGVyIiwibGF0ZXN0UG9zaXRpdmUiLCJsYXRlc3ROZWdhdGl2ZSIsInBhaXJMaXN0IiwiZnJlcXVlbmN5TGlzdCIsImFjdGl2ZVBhaXIiLCJhY3RpdmVGcmVxdWVuY3kiLCJsb2FkaW5nTWV0YSIsIm1ldGFGZXRjaEVycm9yIiwibG9hZGluZ0RhdGEiLCJkYXRhRmV0Y2hFcnJvciIsImluaXRpYWxpemUiLCJEYXRhQ2hhcnRlciIsImdldEVsZW1lbnRCeUlkIiwiUHJvZml0Q2hhcnRlciIsImFsbCIsInBhaXJzIiwiZnJlcXVlbmNpZXMiLCJzZXRGcmVxdWVuY2llcyIsInNldFBhaXJzIiwicmVuZGVyQ29udHJvbHMiLCJjYXRjaCIsIm1ldGFFcnJvciIsImZyZXF1ZW5jeVBpY2tlckNvbnRyb2xzIiwiYnRuIiwiZGF0YXNldCIsInBlcmlvZCIsImZpbmQiLCJjbGljayIsInBhaXJQaWNrZXJDb250cm9scyIsIm5hbWVTcGFuIiwiZGVsYXllZFNwYW4iLCJ0b29sdGlwIiwidHJhZGVEYXRhIiwidXBkYXRlU2lnbmFsRGF0YSIsInVwZGF0ZVByb2ZpdERhdGEiLCJyZW5kZXJBY3RpdmVDbGFzc2VzIiwiZnJlcXVlbmN5R3JwIiwiY29udHJvbCIsIkFycmF5IiwiaXNBcnJheSIsInNpZ25hbHMiLCJkYXRhQXJyYXkiLCJpbmRleE9mIiwibGFzdFNpZ25hbCIsInNldERhdGEiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZWwiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiJtQ0FPQSxJQUFJQSxFQUFXLFNBQVVDLEdBQ3ZCLGFBRUEsSUFFSUMsRUFGQUMsRUFBS0MsT0FBT0MsVUFDWkMsRUFBU0gsRUFBR0ksZUFFWkMsRUFBNEIsbUJBQVhDLE9BQXdCQSxPQUFTLEdBQ2xEQyxFQUFpQkYsRUFBUUcsVUFBWSxhQUNyQ0MsRUFBc0JKLEVBQVFLLGVBQWlCLGtCQUMvQ0MsRUFBb0JOLEVBQVFPLGFBQWUsZ0JBRS9DLFNBQVNDLEVBQU9DLEVBQUtDLEVBQUtDLEdBT3hCLE9BTkFmLE9BQU9nQixlQUFlSCxFQUFLQyxFQUFLLENBQzlCQyxNQUFPQSxFQUNQRSxZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsVUFBVSxJQUVMTixFQUFJQyxHQUViLElBRUVGLEVBQU8sR0FBSSxJQUNYLE1BQU9RLEdBQ1BSLEVBQVMsU0FBU0MsRUFBS0MsRUFBS0MsR0FD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UyxHQUM1Q3hDLEtBQUt5VixZQUFZOEMsUUFBUTFTLEdBQ3pCN0YsS0FBSzJWLGVBQWU0QyxRQUFRRCxFQUFXdkcsVUFBV3VHLEVBQVd0RyxZQUM3RGhTLEtBQUs0VixlQUFlMkMsUUFBUUQsRUFBV3ZHLFVBQVd1RyxFQUFXdEcsYyw4QkFHL0QsU0FBaUJuTSxHQUNmN0YsS0FBSzBWLGNBQWM2QyxRQUFRMVMsSyxpQ0FHN0IsV0FBc0IsV0FDbkIsRUFBSTdGLEtBQUt3VixTQUFTZ0QsdUJBQXVCLGlCQUFpQmpZLFNBQVEsU0FBQWtZLEdBQ2pFQSxFQUFHeFIsVUFBVXlSLE9BQU8sVUFDaEJELEVBQUd0QixRQUFRNVAsS0FBTyxFQUFLd08sWUFBWTBDLEVBQUd4UixVQUFVQyxJQUFJLGFBRXpELEVBQUlsSCxLQUFLd1YsU0FBU2dELHVCQUF1QixpQkFBaUJqWSxTQUFRLFNBQUFrWSxHQUNqRUEsRUFBR3hSLFVBQVV5UixPQUFPLFVBQ2hCRCxFQUFHdEIsUUFBUTVQLEtBQU8sRUFBS3lPLGlCQUFpQnlDLEVBQUd4UixVQUFVQyxJQUFJLGtCLHNCQUt2RCxDQUFlSCxTQUFTd1AsZUFBZSxpQiIsImZpbGUiOiJzaWduYWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWxpbmVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG4vKiBnbG9iYWwgbW9tZW50ICovXG5cbmNvbnN0IG5hbWVzcGFjZSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbmNvbnN0IHJlbW92ZU1pbGxpcyA9IDEwMDBcbmNvbnN0IHRpbWVQb25kZXIgPSAzMDBcbmNvbnN0IHRpbWVSYW5nZSA9IDMwMDAwMCAvIHJlbW92ZU1pbGxpcyAvLyAzMDAwMDAgPSA1bWluc1xuY29uc3Qgdmlld0JveFlQYWRkaW5nVG9wID0gMC4xIC8vIDEwJSBvbiB0b3BcbmNvbnN0IHZpZXdCb3hZUGFkZGluZ0JvdHRvbSA9IDAuMyAvLyAzMCUgb24gYm90dG9tXG5jb25zdCBjYW5kbGVXaWR0aCA9IDggLy8gcHhcbmNvbnN0IHZvbHVtZVNwYWNpbmcgPSAyIC8vIHB4XG5jb25zdCBzY3JvbGxIZWlnaHQgPSAxN1xuY29uc3QgZ3JpZFNpemVYID0gNjRcbmNvbnN0IGdyaWRTaXplWSA9IDE2XG5jb25zdCByb3VuZGluZyA9IGZhbHNlXG5cbmV4cG9ydCBjbGFzcyBEYXRhR3JhcGhDaGFydGVyIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICB0aGlzLnJvb3RFbGVtZW50ID0gcHJvcHMucm9vdFxuICAgIHRoaXMuZGF0YSA9IG51bGxcbiAgICB0aGlzLnNhbXBsZUNvdW50ID0gbnVsbFxuICAgIHRoaXMucGFyc2VkRGF0YSA9IG51bGxcbiAgICB0aGlzLndpZHRoID0gMVxuICAgIHRoaXMuaGVpZ2h0ID0gMVxuICAgIHRoaXMubGFzdFBvaW50ID0gbnVsbFxuICAgIHRoaXMueCA9IG51bGxcbiAgICB0aGlzLnhSYW5nZSA9IG51bGxcbiAgICB0aGlzLnhQb25kZXIgPSAxXG4gICAgdGhpcy55ID0gbnVsbFxuICAgIHRoaXMueVJhbmdlID0gbnVsbFxuICAgIHRoaXMueVBvbmRlciA9IDFcbiAgfVxuXG4gIGNyZWF0ZVNpZ25hbFBhdGgoeCwgeSwgZGlyZWN0aW9uLCBjb2xvcikge1xuICAgIGNvbnN0IHNpZ25hbFNpemUgPSAxNlxuICAgIGNvbnN0IHNpZ25hbE9mZnNldCA9IDE2XG4gICAgY29uc3QgcGF0aExlZnQgPSB4IC0gc2lnbmFsU2l6ZSAvIDJcbiAgICBjb25zdCBwYXRoVG9wID0geSAtIHNpZ25hbFNpemUgLyAyICsgKGRpcmVjdGlvbiA9PT0gJ3VwJyA/IDEgOiAtMSkgKiBzaWduYWxPZmZzZXRcblxuICAgIGNvbnN0IHRlbXBTaWduYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnZycpXG4gICAgdGVtcFNpZ25hbC5jbGFzc0xpc3QuYWRkKCdzaWduYWwnKVxuXG4gICAgLy8gOjo6Ojo6Ojo6OiBDSVJDIDo6Ojo6Ojo6OjogLy9cbiAgICBjb25zdCB0ZW1wUmluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdjaXJjbGUnKVxuICAgIHRlbXBSaW5nLmNsYXNzTGlzdC5hZGQoJ3NpZ25hbC1yaW5nJylcbiAgICB0ZW1wUmluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCA1MClcbiAgICB0ZW1wUmluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3knLCA1MClcbiAgICB0ZW1wUmluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAncicsIDYwKVxuICAgIHRlbXBSaW5nLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzaGFwZS1yZW5kZXJpbmcnLCAnZ2VvbWV0cmljUHJlY2lzaW9uJylcbiAgICB0ZW1wU2lnbmFsLmFwcGVuZENoaWxkKHRlbXBSaW5nKVxuICAgIC8vIDo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6IC8vXG5cbiAgICAvLyA6Ojo6Ojo6Ojo6IE1BU0sgOjo6Ojo6Ojo6OiAvL1xuICAgIGNvbnN0IHRlbXBNYXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ21hc2snKVxuICAgIHRlbXBNYXNrLmlkID0gJ2hvbGVzTWFzaydcbiAgICBjb25zdCBtYXNrUmVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdyZWN0JylcbiAgICBtYXNrUmVjdC5jbGFzc0xpc3QuYWRkKCdtYXNrLXdoaXRlJylcbiAgICBtYXNrUmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneCcsIDApXG4gICAgbWFza1JlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgJ3knLCAwKVxuICAgIG1hc2tSZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICd3aWR0aCcsIDEwMClcbiAgICBtYXNrUmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnaGVpZ2h0JywgMTAwKVxuICAgIG1hc2tSZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICdzaGFwZS1yZW5kZXJpbmcnLCAnZ2VvbWV0cmljUHJlY2lzaW9uJylcbiAgICB0ZW1wTWFzay5hcHBlbmRDaGlsZChtYXNrUmVjdClcbiAgICBjb25zdCBtYXNrQ2lyY2xlTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdjaXJjbGUnKVxuICAgIG1hc2tDaXJjbGVMZWZ0LmNsYXNzTGlzdC5hZGQoJ21hc2stYmxhY2snKVxuICAgIG1hc2tDaXJjbGVMZWZ0LnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeCcsIDM0LjUpXG4gICAgbWFza0NpcmNsZUxlZnQuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2N5JywgNzEuNSlcbiAgICBtYXNrQ2lyY2xlTGVmdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAncicsIDEuNSlcbiAgICBtYXNrQ2lyY2xlTGVmdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc2hhcGUtcmVuZGVyaW5nJywgJ2dlb21ldHJpY1ByZWNpc2lvbicpXG4gICAgdGVtcE1hc2suYXBwZW5kQ2hpbGQobWFza0NpcmNsZUxlZnQpXG4gICAgY29uc3QgbWFza0NpcmNsZVJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2NpcmNsZScpXG4gICAgbWFza0NpcmNsZVJpZ2h0LmNsYXNzTGlzdC5hZGQoJ21hc2stYmxhY2snKVxuICAgIG1hc2tDaXJjbGVSaWdodC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCA2NS41KVxuICAgIG1hc2tDaXJjbGVSaWdodC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3knLCA3MS41KVxuICAgIG1hc2tDaXJjbGVSaWdodC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAncicsIDEuNSlcbiAgICBtYXNrQ2lyY2xlUmlnaHQuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3NoYXBlLXJlbmRlcmluZycsICdnZW9tZXRyaWNQcmVjaXNpb24nKVxuICAgIHRlbXBNYXNrLmFwcGVuZENoaWxkKG1hc2tDaXJjbGVSaWdodClcbiAgICB0ZW1wU2lnbmFsLmFwcGVuZENoaWxkKHRlbXBNYXNrKVxuICAgIC8vIDo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6IC8vXG5cbiAgICAvLyA6Ojo6Ojo6Ojo6IFBBVEggOjo6Ojo6Ojo6OiAvL1xuICAgIGNvbnN0IGJ1b3lTdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ3BhdGgnKVxuICAgIGJ1b3lTdGVtLmNsYXNzTGlzdC5hZGQoJ2J1b3ktc3RlbScpXG4gICAgYnVveVN0ZW0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCAnTSA0Ny41IDE1LjUgTCA0OCAyNCBMIDUyIDI0IEwgNTIuNSAxNS41IFonKVxuICAgIGJ1b3lTdGVtLmNsYXNzTGlzdC5hZGQoY29sb3IpXG4gICAgYnVveVN0ZW0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ3NoYXBlLXJlbmRlcmluZycsICdnZW9tZXRyaWNQcmVjaXNpb24nKVxuICAgIHRlbXBTaWduYWwuYXBwZW5kQ2hpbGQoYnVveVN0ZW0pXG4gICAgY29uc3QgYnVveUhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnY2lyY2xlJylcbiAgICBidW95SGVhZC5jbGFzc0xpc3QuYWRkKCdidW95LWhlYWQnKVxuICAgIGJ1b3lIZWFkLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeCcsIDUwKVxuICAgIGJ1b3lIZWFkLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeScsIDEwKVxuICAgIGJ1b3lIZWFkLnNldEF0dHJpYnV0ZU5TKG51bGwsICdyJywgNilcbiAgICBidW95SGVhZC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc2hhcGUtcmVuZGVyaW5nJywgJ2dlb21ldHJpY1ByZWNpc2lvbicpXG4gICAgYnVveUhlYWQuY2xhc3NMaXN0LmFkZChjb2xvcilcbiAgICB0ZW1wU2lnbmFsLmFwcGVuZENoaWxkKGJ1b3lIZWFkKVxuICAgIGNvbnN0IGJ1b3lCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ3BhdGgnKVxuICAgIGJ1b3lCb2R5LmNsYXNzTGlzdC5hZGQoJ2J1b3ktYm9keScpXG4gICAgYnVveUJvZHkuc2V0QXR0cmlidXRlTlMobnVsbCwgJ21hc2snLCAndXJsKCNob2xlc01hc2spJylcbiAgICBidW95Qm9keS5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgIG51bGwsXG4gICAgICAnZCcsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgJ00gNDUgMjQgTCA0MyA3MS41IEwgNDAgNzEuNSBMIDQwLjUgNzYgTCAzNyA3NiBMIDM3LjUgNzIgQyAzOCA2NywgMzEgNjcsIDMxLjUgNzIgTCAzMiA3NiBMIDI4LjUgNzYgTCAzMC41IDkxIEwgNjkuNSA5MSBMIDcxLjUgNzYgTCA2OCA3NiBMIDY4LjUgNzIgQyA2OSA2NywgNjIgNjcsIDYyLjUgNzIgTCA2MyA3NiBMIDU5LjUgNzYgTCA2MCA3MS41IEwgNTcgNzEuNSBMIDU1IDI0IFonXG4gICAgKVxuICAgIGJ1b3lCb2R5LnNldEF0dHJpYnV0ZU5TKG51bGwsICdzaGFwZS1yZW5kZXJpbmcnLCAnZ2VvbWV0cmljUHJlY2lzaW9uJylcbiAgICBidW95Qm9keS5jbGFzc0xpc3QuYWRkKGNvbG9yKVxuICAgIGNvbnN0IHNpZ25hbFJhdGlvID0gc2lnbmFsU2l6ZSAvIDEwMFxuICAgIHRlbXBTaWduYWwuc2V0QXR0cmlidXRlTlMoXG4gICAgICBudWxsLFxuICAgICAgJ3RyYW5zZm9ybScsXG4gICAgICBgdHJhbnNsYXRlKCR7cGF0aExlZnR9ICR7cGF0aFRvcH0pIHNjYWxlKCR7c2lnbmFsUmF0aW99ICR7c2lnbmFsUmF0aW99KWBcbiAgICApXG4gICAgdGVtcFNpZ25hbC5hcHBlbmRDaGlsZChidW95Qm9keSlcbiAgICAvLyA6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6OiAvL1xuXG4gICAgLy8gOjo6Ojo6Ojo6OiBBTklNIDo6Ojo6Ojo6OjogLy9cbiAgICBjb25zdCBjaXJjbGUxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2NpcmNsZScpXG4gICAgY2lyY2xlMS5jbGFzc0xpc3QuYWRkKCdidW95LWNpcmNsZScpXG4gICAgY2lyY2xlMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCA1MClcbiAgICBjaXJjbGUxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeScsIDEwKVxuICAgIGNpcmNsZTEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3InLCA2KVxuICAgIGNpcmNsZTEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3NoYXBlLXJlbmRlcmluZycsICdnZW9tZXRyaWNQcmVjaXNpb24nKVxuICAgIGNpcmNsZTEuY2xhc3NMaXN0LmFkZChjb2xvcilcbiAgICB0ZW1wU2lnbmFsLmFwcGVuZENoaWxkKGNpcmNsZTEpXG4gICAgY29uc3QgYW5pbVIxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2FuaW1hdGUnKVxuICAgIGFuaW1SMS5pZCA9ICdhbmltLXItMSdcbiAgICBhbmltUjEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZU5hbWUnLCAncicpXG4gICAgYW5pbVIxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdhdHRyaWJ1dGVUeXBlJywgJ1hNTCcpXG4gICAgYW5pbVIxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdiZWdpbicsICdhbmltLXItMS5lbmQgKyAzcycpXG4gICAgYW5pbVIxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkdXInLCAnMy42cycpXG4gICAgYW5pbVIxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmcm9tJywgJzYnKVxuICAgIGFuaW1SMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndG8nLCAnMTI4JylcbiAgICBjaXJjbGUxLmFwcGVuZENoaWxkKGFuaW1SMSlcbiAgICBjb25zdCBhbmltTzEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnYW5pbWF0ZScpXG4gICAgYW5pbU8xLmlkID0gJ2FuaW0tby0xJ1xuICAgIGFuaW1PMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYXR0cmlidXRlTmFtZScsICdvcGFjaXR5JylcbiAgICBhbmltTzEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZVR5cGUnLCAnWE1MJylcbiAgICBhbmltTzEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2JlZ2luJywgJ2FuaW0tci0xLmJlZ2luICsgMC4xcycpXG4gICAgYW5pbU8xLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkdXInLCAnM3MnKVxuICAgIGFuaW1PMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZnJvbScsICcwLjYnKVxuICAgIGFuaW1PMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndG8nLCAnMCcpXG4gICAgYW5pbU8xLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJ2ZyZWV6ZScpXG4gICAgY2lyY2xlMS5hcHBlbmRDaGlsZChhbmltTzEpXG5cbiAgICBjb25zdCBjaXJjbGUyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2NpcmNsZScpXG4gICAgY2lyY2xlMi5jbGFzc0xpc3QuYWRkKCdidW95LWNpcmNsZScpXG4gICAgY2lyY2xlMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCA1MClcbiAgICBjaXJjbGUyLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeScsIDEwKVxuICAgIGNpcmNsZTIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3InLCA2KVxuICAgIGNpcmNsZTIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3NoYXBlLXJlbmRlcmluZycsICdnZW9tZXRyaWNQcmVjaXNpb24nKVxuICAgIGNpcmNsZTIuY2xhc3NMaXN0LmFkZChjb2xvcilcbiAgICB0ZW1wU2lnbmFsLmFwcGVuZENoaWxkKGNpcmNsZTIpXG4gICAgY29uc3QgYW5pbVIyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2FuaW1hdGUnKVxuICAgIGFuaW1SMi5pZCA9ICdhbmltLXItMidcbiAgICBhbmltUjIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZU5hbWUnLCAncicpXG4gICAgYW5pbVIyLnNldEF0dHJpYnV0ZU5TKG51bGwsICdhdHRyaWJ1dGVUeXBlJywgJ1hNTCcpXG4gICAgYW5pbVIyLnNldEF0dHJpYnV0ZU5TKG51bGwsICdiZWdpbicsICdhbmltLXItMS5iZWdpbiArIDFzJylcbiAgICBhbmltUjIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2R1cicsICczLjZzJylcbiAgICBhbmltUjIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2Zyb20nLCAnNicpXG4gICAgYW5pbVIyLnNldEF0dHJpYnV0ZU5TKG51bGwsICd0bycsICcxMjgnKVxuICAgIGNpcmNsZTIuYXBwZW5kQ2hpbGQoYW5pbVIyKVxuICAgIGNvbnN0IGFuaW1PMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdhbmltYXRlJylcbiAgICBhbmltTzIuaWQgPSAnYW5pbS1vLTInXG4gICAgYW5pbU8yLnNldEF0dHJpYnV0ZU5TKG51bGwsICdhdHRyaWJ1dGVOYW1lJywgJ29wYWNpdHknKVxuICAgIGFuaW1PMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYXR0cmlidXRlVHlwZScsICdYTUwnKVxuICAgIGFuaW1PMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYmVnaW4nLCAnYW5pbS1yLTIuYmVnaW4gKyAwLjFzJylcbiAgICBhbmltTzIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2R1cicsICczcycpXG4gICAgYW5pbU8yLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmcm9tJywgJzAuNicpXG4gICAgYW5pbU8yLnNldEF0dHJpYnV0ZU5TKG51bGwsICd0bycsICcwJylcbiAgICBhbmltTzIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZpbGwnLCAnZnJlZXplJylcbiAgICBjaXJjbGUyLmFwcGVuZENoaWxkKGFuaW1PMilcblxuICAgIGNvbnN0IGNpcmNsZTMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnY2lyY2xlJylcbiAgICBjaXJjbGUzLmNsYXNzTGlzdC5hZGQoJ2J1b3ktY2lyY2xlJylcbiAgICBjaXJjbGUzLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeCcsIDUwKVxuICAgIGNpcmNsZTMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2N5JywgMTApXG4gICAgY2lyY2xlMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAncicsIDYpXG4gICAgY2lyY2xlMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc2hhcGUtcmVuZGVyaW5nJywgJ2dlb21ldHJpY1ByZWNpc2lvbicpXG4gICAgY2lyY2xlMy5jbGFzc0xpc3QuYWRkKGNvbG9yKVxuICAgIHRlbXBTaWduYWwuYXBwZW5kQ2hpbGQoY2lyY2xlMylcbiAgICBjb25zdCBhbmltUjMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnYW5pbWF0ZScpXG4gICAgYW5pbVIzLmlkID0gJ2FuaW0tci0zJ1xuICAgIGFuaW1SMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYXR0cmlidXRlTmFtZScsICdyJylcbiAgICBhbmltUjMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZVR5cGUnLCAnWE1MJylcbiAgICBhbmltUjMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2JlZ2luJywgJ2FuaW0tci0yLmJlZ2luICsgMXMnKVxuICAgIGFuaW1SMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZHVyJywgJzMuNnMnKVxuICAgIGFuaW1SMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZnJvbScsICc2JylcbiAgICBhbmltUjMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RvJywgJzEyOCcpXG4gICAgY2lyY2xlMy5hcHBlbmRDaGlsZChhbmltUjMpXG4gICAgY29uc3QgYW5pbU8zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2FuaW1hdGUnKVxuICAgIGFuaW1PMy5pZCA9ICdhbmltLW8tMydcbiAgICBhbmltTzMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZU5hbWUnLCAnb3BhY2l0eScpXG4gICAgYW5pbU8zLnNldEF0dHJpYnV0ZU5TKG51bGwsICdhdHRyaWJ1dGVUeXBlJywgJ1hNTCcpXG4gICAgYW5pbU8zLnNldEF0dHJpYnV0ZU5TKG51bGwsICdiZWdpbicsICdhbmltLXItMy5iZWdpbiArIDAuMXMnKVxuICAgIGFuaW1PMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZHVyJywgJzNzJylcbiAgICBhbmltTzMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2Zyb20nLCAnMC42JylcbiAgICBhbmltTzMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RvJywgJzAnKVxuICAgIGFuaW1PMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZmlsbCcsICdmcmVlemUnKVxuICAgIGNpcmNsZTMuYXBwZW5kQ2hpbGQoYW5pbU8zKVxuXG4gICAgaWYgKHR5cGVvZiBJbnN0YWxsVHJpZ2dlciA9PT0gJ3VuZGVmaW5lZCcpIGFuaW1SMS5iZWdpbkVsZW1lbnQoKVxuICAgIC8vIGRldGVjdCBGaXJlZm94XG4gICAgZWxzZVxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFuaW1SMS5iZWdpbkVsZW1lbnQoKVxuICAgICAgfSwgMClcbiAgICAvLyA6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6OiAvL1xuXG4gICAgcmV0dXJuIHRlbXBTaWduYWxcbiAgfVxuXG4gIGdlbmVyYXRlU2lnbmFscyhzaWduYWxHcm91cCkge1xuICAgIGNvbnN0IGRlZnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnZGVmcycpXG4gICAgc2lnbmFsR3JvdXAuYXBwZW5kQ2hpbGQoZGVmcylcbiAgICBjb25zdCBzaWduYWxHcmFkaWVudFBvc2l0aXZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgJ2xpbmVhckdyYWRpZW50J1xuICAgIClcbiAgICBzaWduYWxHcmFkaWVudFBvc2l0aXZlLmlkID0gJ3NpZ25hbC1ncmFkaWVudC1wb3NpdGl2ZSdcbiAgICBkZWZzLmFwcGVuZENoaWxkKHNpZ25hbEdyYWRpZW50UG9zaXRpdmUpXG4gICAgY29uc3QgYmVnaW5QID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ3N0b3AnKVxuICAgIGJlZ2luUC5jbGFzc0xpc3QuYWRkKCdzaWduYWwtZ3JhZGllbnQtc3RvcCcpXG4gICAgYmVnaW5QLmNsYXNzTGlzdC5hZGQoJ3Bvc2l0aXZlJylcbiAgICBiZWdpblAuc2V0QXR0cmlidXRlTlMobnVsbCwgJ29mZnNldCcsICcwJScpXG4gICAgc2lnbmFsR3JhZGllbnRQb3NpdGl2ZS5hcHBlbmRDaGlsZChiZWdpblApXG4gICAgY29uc3QgZW5kUCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdzdG9wJylcbiAgICBlbmRQLmNsYXNzTGlzdC5hZGQoJ3NpZ25hbC1ncmFkaWVudC1zdG9wJylcbiAgICBlbmRQLnNldEF0dHJpYnV0ZU5TKG51bGwsICdvZmZzZXQnLCAnMTAwJScpXG4gICAgc2lnbmFsR3JhZGllbnRQb3NpdGl2ZS5hcHBlbmRDaGlsZChlbmRQKVxuXG4gICAgY29uc3Qgc2lnbmFsR3JhZGllbnROZWdhdGl2ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgICdsaW5lYXJHcmFkaWVudCdcbiAgICApXG4gICAgc2lnbmFsR3JhZGllbnROZWdhdGl2ZS5pZCA9ICdzaWduYWwtZ3JhZGllbnQtbmVnYXRpdmUnXG4gICAgZGVmcy5hcHBlbmRDaGlsZChzaWduYWxHcmFkaWVudE5lZ2F0aXZlKVxuICAgIGNvbnN0IGJlZ2luTiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdzdG9wJylcbiAgICBiZWdpbk4uY2xhc3NMaXN0LmFkZCgnc2lnbmFsLWdyYWRpZW50LXN0b3AnKVxuICAgIGJlZ2luTi5jbGFzc0xpc3QuYWRkKCduZWdhdGl2ZScpXG4gICAgYmVnaW5OLnNldEF0dHJpYnV0ZU5TKG51bGwsICdvZmZzZXQnLCAnMCUnKVxuICAgIHNpZ25hbEdyYWRpZW50TmVnYXRpdmUuYXBwZW5kQ2hpbGQoYmVnaW5OKVxuICAgIGNvbnN0IGVuZE4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnc3RvcCcpXG4gICAgZW5kTi5jbGFzc0xpc3QuYWRkKCdzaWduYWwtZ3JhZGllbnQtc3RvcCcpXG4gICAgZW5kTi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnb2Zmc2V0JywgJzEwMCUnKVxuICAgIHNpZ25hbEdyYWRpZW50TmVnYXRpdmUuYXBwZW5kQ2hpbGQoZW5kTilcblxuICAgIHRoaXMucGFyc2VkRGF0YS5zaWduYWxEYXRhLmZvckVhY2goKHsgeCwgYnV5LCBwb3MsIGRpcmVjdGlvbiB9LCBpKSA9PiB7XG4gICAgICBjb25zdCBtaWRYID0gKHggKyAwLjUpICogKHRoaXMud2lkdGggLyB0aGlzLnNhbXBsZUNvdW50KVxuICAgICAgY29uc3QgbWlkWSA9IC0odGhpcy5oZWlnaHQgKyAocG9zICsgdGhpcy55KSAqIHRoaXMueVBvbmRlcilcbiAgICAgIGNvbnN0IHNpZ25hbCA9IHRoaXMuY3JlYXRlU2lnbmFsUGF0aChcbiAgICAgICAgbWlkWCxcbiAgICAgICAgbWlkWSxcbiAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICBgJHtidXkgPiAwID8gJ3Bvc2l0aXZlJyA6ICduZWdhdGl2ZSd9YFxuICAgICAgKVxuXG4gICAgICBjb25zdCBzaWduYWxMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2xpbmUnKVxuICAgICAgc2lnbmFsTGluZS5jbGFzc0xpc3QuYWRkKCdzaWduYWwtbGluZScpXG4gICAgICBzaWduYWxMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4MScsIG1pZFgpXG4gICAgICBzaWduYWxMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4MicsIG1pZFgpXG4gICAgICBzaWduYWxMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd5MScsIC10aGlzLmhlaWdodClcbiAgICAgIHNpZ25hbExpbmUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3kyJywgMClcbiAgICAgIHNpZ25hbExpbmUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZS13aWR0aCcsICcxcHgnKVxuICAgICAgc2lnbmFsTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc2hhcGUtcmVuZGVyaW5nJywgJ2NyaXNwRWRnZXMnKVxuICAgICAgc2lnbmFsTGluZS5jbGFzc0xpc3QuYWRkKGAke2J1eSA+IDAgPyAncG9zaXRpdmUnIDogJ25lZ2F0aXZlJ31gKVxuICAgICAgc2lnbmFsR3JvdXAuYXBwZW5kQ2hpbGQoc2lnbmFsTGluZSlcblxuICAgICAgbGV0IG5leHRYID0gdGhpcy53aWR0aFxuICAgICAgY29uc3QgdGVtcFggPSB4ICogKHRoaXMud2lkdGggLyB0aGlzLnNhbXBsZUNvdW50KVxuICAgICAgaWYgKHRlbXBYIDwgdGhpcy53aWR0aCkge1xuICAgICAgICBpZiAoaSA8IHRoaXMucGFyc2VkRGF0YS5zaWduYWxEYXRhLmxlbmd0aCAtIDEpXG4gICAgICAgICAgbmV4dFggPVxuICAgICAgICAgICAgdGhpcy5wYXJzZWREYXRhLnNpZ25hbERhdGFbaSArIDFdLnggKiAodGhpcy53aWR0aCAvIHRoaXMuc2FtcGxlQ291bnQpXG4gICAgICAgIGNvbnN0IHNpZ25hbEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAncmVjdCcpXG4gICAgICAgIHNpZ25hbEFyZWEuY2xhc3NMaXN0LmFkZCgnc2lnbmFsLWFyZWEnKVxuICAgICAgICBzaWduYWxBcmVhLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4JywgbWlkWClcbiAgICAgICAgc2lnbmFsQXJlYS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneScsIC10aGlzLmhlaWdodClcbiAgICAgICAgc2lnbmFsQXJlYS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnd2lkdGgnLCBuZXh0WCAtIHRlbXBYKVxuICAgICAgICBzaWduYWxBcmVhLnNldEF0dHJpYnV0ZU5TKG51bGwsICdoZWlnaHQnLCB0aGlzLmhlaWdodClcbiAgICAgICAgc2lnbmFsQXJlYS5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICdmaWxsJyxcbiAgICAgICAgICBgdXJsKCNzaWduYWwtZ3JhZGllbnQtJHtidXkgPiAwID8gJ3Bvc2l0aXZlJyA6ICduZWdhdGl2ZSd9KWBcbiAgICAgICAgKVxuICAgICAgICBzaWduYWxBcmVhLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzaGFwZS1yZW5kZXJpbmcnLCAnZ2VvbWV0cmljUHJlY2lzaW9uJylcbiAgICAgICAgc2lnbmFsR3JvdXAuYXBwZW5kQ2hpbGQoc2lnbmFsQXJlYSlcbiAgICAgIH1cblxuICAgICAgc2lnbmFsR3JvdXAuYXBwZW5kQ2hpbGQoc2lnbmFsKVxuICAgIH0pXG4gIH1cblxuICBnZW5lcmF0ZVZvbHVtZXModm9sdW1lR3JvdXApIHtcbiAgICBjb25zdCBtYXhWb2x1bWUgPSB0aGlzLnBhcnNlZERhdGEudm9sdW1lRGF0YS5yZWR1Y2UoXG4gICAgICAoYWNjLCB7IHZvbHVtZSB9KSA9PiBNYXRoLm1heChhY2MsIHZvbHVtZSksXG4gICAgICAwXG4gICAgKVxuICAgIHRoaXMucGFyc2VkRGF0YS52b2x1bWVEYXRhLmZvckVhY2goKHsgdm9sdW1lLCBjb2xvciB9LCBpKSA9PiB7XG4gICAgICBpZiAodm9sdW1lKSB7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9XG4gICAgICAgICAgKHZvbHVtZSAvIG1heFZvbHVtZSkgKlxuICAgICAgICAgIHRoaXMuaGVpZ2h0ICpcbiAgICAgICAgICAodmlld0JveFlQYWRkaW5nQm90dG9tIC8gKDEgKyB2aWV3Qm94WVBhZGRpbmdUb3AgKyB2aWV3Qm94WVBhZGRpbmdCb3R0b20pKVxuICAgICAgICBjb25zdCB0ZW1wVm9sdW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ3JlY3QnKVxuICAgICAgICB0ZW1wVm9sdW1lLmNsYXNzTGlzdC5hZGQoJ3ZvbHVtZScpXG4gICAgICAgIHRlbXBWb2x1bWUuc2V0QXR0cmlidXRlTlMoXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAneCcsXG4gICAgICAgICAgaSAqICh0aGlzLndpZHRoIC8gdGhpcy5zYW1wbGVDb3VudCkgKyB2b2x1bWVTcGFjaW5nXG4gICAgICAgIClcbiAgICAgICAgdGVtcFZvbHVtZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneScsIC1oZWlnaHQpXG4gICAgICAgIHRlbXBWb2x1bWUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3dpZHRoJywgY2FuZGxlV2lkdGggLSAyICogdm9sdW1lU3BhY2luZylcbiAgICAgICAgdGVtcFZvbHVtZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnaGVpZ2h0JywgaGVpZ2h0KVxuICAgICAgICB0ZW1wVm9sdW1lLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzaGFwZS1yZW5kZXJpbmcnLCAnY3Jpc3BFZGdlcycpXG4gICAgICAgIHRlbXBWb2x1bWUuY2xhc3NMaXN0LmFkZChgJHtjb2xvcn1gKVxuICAgICAgICB2b2x1bWVHcm91cC5hcHBlbmRDaGlsZCh0ZW1wVm9sdW1lKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBnZW5lcmF0ZUNhbmRsZXMoY2FuZGxlR3JvdXApIHtcbiAgICB0aGlzLnBhcnNlZERhdGEuY2FuZGxlRGF0YS5mb3JFYWNoKChjYW5kbGUsIGkpID0+IHtcbiAgICAgIGNvbnN0IGNhbmRsZVNwYW4gPSBjYW5kbGUuY2xvc2UgLSBjYW5kbGUub3BlblxuICAgICAgY29uc3QgY2FuZGxlSGVpZ2h0ID0gTWF0aC5hYnMoY2FuZGxlU3BhbikgKiB0aGlzLnlQb25kZXJcblxuICAgICAgY29uc3QgdGVtcENhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdyZWN0JylcbiAgICAgIHRlbXBDYW5kbGUuY2xhc3NMaXN0LmFkZCgnY2FuZGxlLWJvZHknKVxuICAgICAgdGVtcENhbmRsZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneCcsIGkgKiAodGhpcy53aWR0aCAvIHRoaXMuc2FtcGxlQ291bnQpKVxuICAgICAgY29uc3QgeSA9XG4gICAgICAgIHRoaXMuaGVpZ2h0ICsgKE1hdGgubWF4KGNhbmRsZS5jbG9zZSwgY2FuZGxlLm9wZW4pICsgdGhpcy55KSAqIHRoaXMueVBvbmRlclxuICAgICAgdGVtcENhbmRsZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneScsIC15KVxuICAgICAgdGVtcENhbmRsZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnd2lkdGgnLCBjYW5kbGVXaWR0aClcbiAgICAgIHRlbXBDYW5kbGUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2hlaWdodCcsIGNhbmRsZUhlaWdodClcbiAgICAgIHRlbXBDYW5kbGUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3NoYXBlLXJlbmRlcmluZycsICdjcmlzcEVkZ2VzJylcblxuICAgICAgY29uc3QgeTEgPSB0aGlzLmhlaWdodCArIChjYW5kbGUuaGlnaCArIHRoaXMueSkgKiB0aGlzLnlQb25kZXJcbiAgICAgIGNvbnN0IHkyID0gdGhpcy5oZWlnaHQgKyAoY2FuZGxlLmxvdyArIHRoaXMueSkgKiB0aGlzLnlQb25kZXJcbiAgICAgIGNvbnN0IHRlbXBXaWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2xpbmUnKVxuICAgICAgdGVtcFdpY2suY2xhc3NMaXN0LmFkZCgnY2FuZGxlLXdpY2snKVxuICAgICAgdGVtcFdpY2suc2V0QXR0cmlidXRlTlMoXG4gICAgICAgIG51bGwsXG4gICAgICAgICd4MScsXG4gICAgICAgICgwLjUgKyBpKSAqICh0aGlzLndpZHRoIC8gdGhpcy5zYW1wbGVDb3VudClcbiAgICAgIClcbiAgICAgIHRlbXBXaWNrLnNldEF0dHJpYnV0ZU5TKFxuICAgICAgICBudWxsLFxuICAgICAgICAneDInLFxuICAgICAgICAoMC41ICsgaSkgKiAodGhpcy53aWR0aCAvIHRoaXMuc2FtcGxlQ291bnQpXG4gICAgICApXG4gICAgICB0ZW1wV2ljay5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneTEnLCAteTEpXG4gICAgICB0ZW1wV2ljay5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneTInLCAteTIpXG4gICAgICB0ZW1wV2ljay5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc3Ryb2tlLXdpZHRoJywgJzFweCcpXG4gICAgICB0ZW1wV2ljay5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc2hhcGUtcmVuZGVyaW5nJywgJ2NyaXNwRWRnZXMnKVxuXG4gICAgICBpZiAoY2FuZGxlU3Bhbikge1xuICAgICAgICB0ZW1wQ2FuZGxlLmNsYXNzTGlzdC5hZGQoYCR7Y2FuZGxlU3BhbiA+IDAgPyAncG9zaXRpdmUnIDogJ25lZ2F0aXZlJ31gKVxuICAgICAgICB0ZW1wV2ljay5jbGFzc0xpc3QuYWRkKGAke2NhbmRsZVNwYW4gPiAwID8gJ3Bvc2l0aXZlJyA6ICduZWdhdGl2ZSd9YClcbiAgICAgIH1cblxuICAgICAgY2FuZGxlR3JvdXAuYXBwZW5kQ2hpbGQodGVtcENhbmRsZSlcbiAgICAgIGNhbmRsZUdyb3VwLmFwcGVuZENoaWxkKHRlbXBXaWNrKVxuICAgIH0pXG4gIH1cblxuICBnZW5lcmF0ZUdyaWQoZ3JpZEdyb3VwLCB4QXhpcywgeUF4aXMpIHtcbiAgICBjb25zdCBjYWxjdWxhdGVYUG9pbnRzID0gKCkgPT4ge1xuICAgICAgY29uc3QgbG9nYXJpdGhtV2l0aEJhc2UgPSAodmFsdWUsIGJhc2UpID0+IE1hdGgubG9nKHZhbHVlKSAvIE1hdGgubG9nKGJhc2UpXG4gICAgICBjb25zdCBncmlkVGltZVNwYW4gPSAoZ3JpZFNpemVYIC8gdGhpcy53aWR0aCkgKiB0aGlzLnhSYW5nZVxuICAgICAgbGV0IGFic1BvbmRlciA9IDFcbiAgICAgIGxldCByZWxQb25kZXIgPSAxXG4gICAgICBsZXQgc2NhbGUgPSAnJ1xuICAgICAgbGV0IHRlbXBSYW5nZSA9IGdyaWRUaW1lU3BhblxuICAgICAgY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwKGdyaWRUaW1lU3BhbilcbiAgICAgIGlmIChsb2cxMCA8IDMpIHtcbiAgICAgICAgYWJzUG9uZGVyICo9IDEwICoqIE1hdGguZmxvb3IobG9nMTApXG4gICAgICAgIHNjYWxlID0gJ21pbGxpc2Vjb25kJ1xuICAgICAgICBjb25zdCByZWxWYWx1ZXMgPSBbMi41LCA1LCAxMF1cbiAgICAgICAgY29uc3QgYWJzVmFsdWVzID0gWy4uLnJlbFZhbHVlc11cbiAgICAgICAgICAubWFwKGUgPT4gZSAqIGFic1BvbmRlcilcbiAgICAgICAgICAuZmlsdGVyKGUgPT4gIShlIC0gTWF0aC50cnVuYyhlKSkpXG4gICAgICAgIGxldCBpID0gMFxuICAgICAgICB3aGlsZSAoYWJzVmFsdWVzW2ldIDw9IGdyaWRUaW1lU3BhbikgaSsrXG4gICAgICAgIHRlbXBSYW5nZSA9IGFic1ZhbHVlc1tpXVxuICAgICAgICByZWxQb25kZXIgPSByZWxWYWx1ZXNbaV0gKiAxMCAqKiBNYXRoLmZsb29yKGxvZzEwKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWJzUG9uZGVyICo9IDEwMDBcbiAgICAgICAgY29uc3QgbG9nNjAgPSBsb2dhcml0aG1XaXRoQmFzZShncmlkVGltZVNwYW4gLyBhYnNQb25kZXIsIDYwKVxuICAgICAgICBpZiAobG9nNjAgPCAyKSB7XG4gICAgICAgICAgYWJzUG9uZGVyICo9IDYwICoqIE1hdGguZmxvb3IobG9nNjApXG4gICAgICAgICAgc2NhbGUgPSBsb2c2MCA8IDEgPyAnc2Vjb25kJyA6ICdtaW51dGUnXG4gICAgICAgICAgY29uc3QgcmVsVmFsdWVzID0gWzUsIDEwLCAzMCwgNjBdXG4gICAgICAgICAgY29uc3QgYWJzVmFsdWVzID0gWy4uLnJlbFZhbHVlc10ubWFwKGUgPT4gZSAqIGFic1BvbmRlcilcbiAgICAgICAgICBsZXQgaSA9IDBcbiAgICAgICAgICB3aGlsZSAoYWJzVmFsdWVzW2ldIDw9IGdyaWRUaW1lU3BhbikgaSsrXG4gICAgICAgICAgdGVtcFJhbmdlID0gYWJzVmFsdWVzW2ldXG4gICAgICAgICAgcmVsUG9uZGVyID0gcmVsVmFsdWVzW2ldXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWJzUG9uZGVyICo9IDYwICogNjBcbiAgICAgICAgICBpZiAoZ3JpZFRpbWVTcGFuIDwgYWJzUG9uZGVyICogMTIpIHtcbiAgICAgICAgICAgIHNjYWxlID0gJ2hvdXInXG4gICAgICAgICAgICBjb25zdCByZWxWYWx1ZXMgPSBbMywgNiwgMTJdXG4gICAgICAgICAgICBjb25zdCBhYnNWYWx1ZXMgPSBbLi4ucmVsVmFsdWVzXS5tYXAoZSA9PiBlICogYWJzUG9uZGVyKVxuICAgICAgICAgICAgbGV0IGkgPSAwXG4gICAgICAgICAgICB3aGlsZSAoYWJzVmFsdWVzW2ldIDw9IGdyaWRUaW1lU3BhbikgaSsrXG4gICAgICAgICAgICB0ZW1wUmFuZ2UgPSBhYnNWYWx1ZXNbaV1cbiAgICAgICAgICAgIHJlbFBvbmRlciA9IHJlbFZhbHVlc1tpXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhYnNQb25kZXIgKj0gMjRcbiAgICAgICAgICAgIGlmIChncmlkVGltZVNwYW4gPCBhYnNQb25kZXIgKiAxNCkge1xuICAgICAgICAgICAgICBzY2FsZSA9ICdkYXRlJ1xuICAgICAgICAgICAgICBjb25zdCByZWxWYWx1ZXMgPSBbMSwgMiwgMywgNSwgNywgMTRdXG4gICAgICAgICAgICAgIGNvbnN0IGFic1ZhbHVlcyA9IFsuLi5yZWxWYWx1ZXNdLm1hcChlID0+IGUgKiBhYnNQb25kZXIpXG4gICAgICAgICAgICAgIGxldCBpID0gMFxuICAgICAgICAgICAgICB3aGlsZSAoYWJzVmFsdWVzW2ldIDw9IGdyaWRUaW1lU3BhbikgaSsrXG4gICAgICAgICAgICAgIHRlbXBSYW5nZSA9IGFic1ZhbHVlc1tpXVxuICAgICAgICAgICAgICByZWxQb25kZXIgPSByZWxWYWx1ZXNbaV1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNjYWxlID0gJ2JpZ2dlcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBzdGFydGluZ1BvaW50ID0gdGhpcy54XG4gICAgICBsZXQgcG9pbnRzID0gW11cbiAgICAgIGlmIChzY2FsZSAhPT0gJ2JpZ2dlcicpIHtcbiAgICAgICAgc3RhcnRpbmdQb2ludCA9IG1vbWVudChzdGFydGluZ1BvaW50KS5zdGFydE9mKHNjYWxlKVxuICAgICAgICBjb25zdCByZW1haW5kZXIgPSBzdGFydGluZ1BvaW50W3NjYWxlXSgpXG4gICAgICAgIGlmIChzY2FsZSA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgaWYgKHJlbFBvbmRlciA+PSA3KVxuICAgICAgICAgICAgc3RhcnRpbmdQb2ludCA9IG1vbWVudChzdGFydGluZ1BvaW50LnZhbHVlT2YoKSkuaXNvV2Vla2RheSg4KVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHN0YXJ0aW5nUG9pbnQgPSBtb21lbnQoc3RhcnRpbmdQb2ludC52YWx1ZU9mKCkpLmFkZChcbiAgICAgICAgICAgICAgcmVsUG9uZGVyIC0gMSAtICgocmVtYWluZGVyIC0gMSkgJSByZWxQb25kZXIpLFxuICAgICAgICAgICAgICAnZGF5J1xuICAgICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0aW5nUG9pbnQgPSBtb21lbnQoc3RhcnRpbmdQb2ludC52YWx1ZU9mKCkpLmFkZChcbiAgICAgICAgICAgIHJlbFBvbmRlciAtIDEgLSAoKHJlbWFpbmRlciAtIDEpICUgcmVsUG9uZGVyKSxcbiAgICAgICAgICAgIHNjYWxlXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHBvaW50cy5wdXNoKHN0YXJ0aW5nUG9pbnQudmFsdWVPZigpKVxuICAgICAgICBsZXQgbGFzdFBvaW50ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXVxuICAgICAgICB3aGlsZSAobGFzdFBvaW50IDwgdGhpcy54ICsgdGhpcy54UmFuZ2UpIHtcbiAgICAgICAgICBjb25zdCBuZXdQb2ludCA9IGxhc3RQb2ludCArIHRlbXBSYW5nZVxuICAgICAgICAgIHBvaW50cy5wdXNoKG5ld1BvaW50KVxuICAgICAgICAgIGxhc3RQb2ludCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWJzUG9uZGVyICo9IDMwXG4gICAgICAgIGlmIChncmlkVGltZVNwYW4gPCBhYnNQb25kZXIgKiA2KSB7XG4gICAgICAgICAgc2NhbGUgPSAnbW9udGgnXG4gICAgICAgICAgY29uc3QgcmVsVmFsdWVzID0gWzEsIDMsIDZdXG4gICAgICAgICAgY29uc3QgYWJzVmFsdWVzID0gWy4uLnJlbFZhbHVlc10ubWFwKGUgPT4gZSAqIGFic1BvbmRlcilcbiAgICAgICAgICBsZXQgaSA9IDBcbiAgICAgICAgICB3aGlsZSAoYWJzVmFsdWVzW2ldIDw9IGdyaWRUaW1lU3BhbikgaSsrXG4gICAgICAgICAgcmVsUG9uZGVyID0gcmVsVmFsdWVzW2ldXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWJzUG9uZGVyICo9IDM2NSAvIDMwXG4gICAgICAgICAgc2NhbGUgPSAneWVhcidcbiAgICAgICAgICBjb25zdCByZWxWYWx1ZXMgPSBbMSwgNSwgMTBdXG4gICAgICAgICAgbGV0IGFic1ZhbHVlcyA9IFsuLi5yZWxWYWx1ZXNdLm1hcChlID0+IGUgKiBhYnNQb25kZXIpXG4gICAgICAgICAgbGV0IGkgPSAwXG4gICAgICAgICAgbGV0IGogPSAwXG4gICAgICAgICAgd2hpbGUgKGFic1ZhbHVlc1tpXSA8PSBncmlkVGltZVNwYW4pIHtcbiAgICAgICAgICAgIGkrK1xuICAgICAgICAgICAgaWYgKGkgPT09IGFic1ZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgaWYgKCFqKSB7XG4gICAgICAgICAgICAgICAgcmVsVmFsdWVzLnNwbGljZSgxLCAwLCAyLjUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaSA9IDBcbiAgICAgICAgICAgICAgaisrXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgICAgICAgYWJzVmFsdWVzID0gWy4uLnJlbFZhbHVlc10ubWFwKGUgPT4gZSAqIDEwICoqIGogKiBhYnNQb25kZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlbFBvbmRlciA9IHJlbFZhbHVlc1tpXSAqIDEwICoqIGpcbiAgICAgICAgfVxuICAgICAgICBzdGFydGluZ1BvaW50ID0gbW9tZW50KHRoaXMueCkuc3RhcnRPZihzY2FsZSkuYWRkKDEsIHNjYWxlKVxuICAgICAgICBjb25zdCByZW1haW5kZXIgPSBzdGFydGluZ1BvaW50W3NjYWxlXSgpXG4gICAgICAgIHN0YXJ0aW5nUG9pbnQgPSBtb21lbnQoc3RhcnRpbmdQb2ludC52YWx1ZU9mKCkpLmFkZChcbiAgICAgICAgICByZWxQb25kZXIgLSAxIC0gKChyZW1haW5kZXIgLSAxKSAlIHJlbFBvbmRlciksXG4gICAgICAgICAgc2NhbGVcbiAgICAgICAgKVxuICAgICAgICBwb2ludHMucHVzaChzdGFydGluZ1BvaW50LnZhbHVlT2YoKSlcbiAgICAgICAgbGV0IGxhc3RQb2ludCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1cbiAgICAgICAgd2hpbGUgKGxhc3RQb2ludCA8IHRoaXMueCArIHRoaXMueFJhbmdlKSB7XG4gICAgICAgICAgY29uc3QgbmV3UG9pbnQgPSBtb21lbnQobGFzdFBvaW50KS5hZGQocmVsUG9uZGVyLCBzY2FsZSkudmFsdWVPZigpXG4gICAgICAgICAgcG9pbnRzLnB1c2gobmV3UG9pbnQpXG4gICAgICAgICAgbGFzdFBvaW50ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXVxuICAgICAgICB9XG4gICAgICAgIHBvaW50cy5wb3AoKVxuICAgICAgfVxuICAgICAgaWYgKHNjYWxlID09PSAnbW9udGgnICYmIHJlbFBvbmRlciA+IDEpXG4gICAgICAgIHBvaW50cyA9IFsuLi5wb2ludHNdLm1hcChwb2ludCA9PiBtb21lbnQocG9pbnQpLnN1YnRyYWN0KDEsICdkYXknKS52YWx1ZU9mKCkpXG4gICAgICByZXR1cm4gW1xuICAgICAgICBwb2ludHMubWFwKHBvaW50ID0+ICh7XG4gICAgICAgICAgeDogKHBvaW50IC0gdGhpcy54KSAqIHRoaXMueFBvbmRlcixcbiAgICAgICAgICB2YWx1ZTogcG9pbnQsXG4gICAgICAgIH0pKSxcbiAgICAgICAgc2NhbGUsXG4gICAgICBdXG4gICAgfVxuICAgIGNvbnN0IGNhbGN1bGF0ZVlQb2ludHMgPSAocmFuZ2UsIHN0YXJ0KSA9PiB7XG4gICAgICBjb25zdCB0ZW1wVmFsdWVzID0gWzAuNSwgMSwgMi41LCA1LCAxMF1cbiAgICAgIGxldCBwb25kZXIgPSAxXG4gICAgICBjb25zdCBncmlkWVNwYW4gPSAoZ3JpZFNpemVZIC8gdGhpcy5oZWlnaHQpICogcmFuZ2VcbiAgICAgIGlmICh0ZW1wVmFsdWVzW3RlbXBWYWx1ZXMubGVuZ3RoIC0gMV0gKiBwb25kZXIgPiBncmlkWVNwYW4pIHtcbiAgICAgICAgd2hpbGUgKHRlbXBWYWx1ZXNbdGVtcFZhbHVlcy5sZW5ndGggLSAxXSAqIHBvbmRlciA+IGdyaWRZU3BhbikgcG9uZGVyIC89IDEwXG4gICAgICAgIHBvbmRlciAqPSAxMFxuICAgICAgfVxuICAgICAgaWYgKHRlbXBWYWx1ZXNbMF0gKiBwb25kZXIgPCBncmlkWVNwYW4pIHtcbiAgICAgICAgd2hpbGUgKHRlbXBWYWx1ZXNbMF0gKiBwb25kZXIgPCBncmlkWVNwYW4pIHBvbmRlciAqPSAxMFxuICAgICAgICBwb25kZXIgLz0gMTBcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlcyA9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgICByb3VuZGluZyAmJiBwb25kZXIgKiB0ZW1wTm9ybWFsaXplciA8PSAxXG4gICAgICAgICAgPyB0ZW1wVmFsdWVzLmZpbHRlcih2ID0+ICFyb3VuZGluZyB8fCB2ICE9PSAyLjUpXG4gICAgICAgICAgOiB0ZW1wVmFsdWVzXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0XG4gICAgICBsZXQgW2Rpc3RhbmNlLCBhZGRdID0gdmFsdWVzLnJlZHVjZShcbiAgICAgICAgKGFjYywgY3VyLCBpKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGFjY1swXSAqIHBvbmRlciA+IGdyaWRZU3BhbiA/IFthY2NbMF0sIGFjY1sxXV0gOiBbY3VyLCBpID09PSAyXSAvLyAyLjUgZGVjaW1hbCBvcHRpb25cbiAgICAgICAgfSxcbiAgICAgICAgWzAsIGZhbHNlXVxuICAgICAgKVxuICAgICAgbGV0IGRlY2ltYWxzID0gMFxuICAgICAgaWYgKHBvbmRlcikgd2hpbGUgKDEwICoqIGRlY2ltYWxzIDwgMSAvIHBvbmRlcikgZGVjaW1hbHMrK1xuICAgICAgaWYgKGFkZCkgZGVjaW1hbHMrK1xuICAgICAgZGlzdGFuY2UgPSBOdW1iZXIoTnVtYmVyLnBhcnNlRmxvYXQoZGlzdGFuY2UgKiBwb25kZXIpLnRvRml4ZWQoZGVjaW1hbHMpKVxuICAgICAgY29uc3Qgc3RhcnRpbmdQb2ludCA9XG4gICAgICAgIE51bWJlcihcbiAgICAgICAgICBOdW1iZXIucGFyc2VGbG9hdChNYXRoLmNlaWwoc3RhcnQgLyBkaXN0YW5jZSkgKiBkaXN0YW5jZSkudG9GaXhlZChkZWNpbWFscylcbiAgICAgICAgKSB8fCAwXG4gICAgICBjb25zdCBwb2ludHMgPSBbXVxuICAgICAgaWYgKGRpc3RhbmNlKSB7XG4gICAgICAgIHBvaW50cy5wdXNoKHN0YXJ0aW5nUG9pbnQpXG4gICAgICAgIHdoaWxlIChwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdICsgZGlzdGFuY2UgPD0gc3RhcnQgKyByYW5nZSkge1xuICAgICAgICAgIGNvbnN0IG5ld1BvaW50ID0gTnVtYmVyKFxuICAgICAgICAgICAgTnVtYmVyLnBhcnNlRmxvYXQocG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSArIGRpc3RhbmNlKS50b0ZpeGVkKGRlY2ltYWxzKVxuICAgICAgICAgIClcbiAgICAgICAgICBwb2ludHMucHVzaChuZXdQb2ludClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBvaW50cy5tYXAocG9pbnQgPT4gKHtcbiAgICAgICAgeTogLXRoaXMuaGVpZ2h0ICsgKHBvaW50IC0gdGhpcy55KSAqIHRoaXMueVBvbmRlcixcbiAgICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgfSkpXG4gICAgfVxuICAgIGNvbnN0IFt4UG9pbnRzLCB4U2NhbGVdID0gY2FsY3VsYXRlWFBvaW50cygpXG4gICAgY29uc3QgeVBvaW50cyA9IGNhbGN1bGF0ZVlQb2ludHModGhpcy55UmFuZ2UsIHRoaXMueSlcblxuICAgIGNvbnN0IGZvbnRTaXplID0gMTJcblxuICAgIHhQb2ludHMuZm9yRWFjaCgoeyB4OiB4VmFsLCB2YWx1ZSB9KSA9PiB7XG4gICAgICBjb25zdCB0ZW1wR3JpZExpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnbGluZScpXG4gICAgICB0ZW1wR3JpZExpbmUuY2xhc3NMaXN0LmFkZCgnZ3JpZC1saW5lJylcbiAgICAgIHRlbXBHcmlkTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneDEnLCB4VmFsKVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4MicsIHhWYWwpXG4gICAgICB0ZW1wR3JpZExpbmUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3kxJywgLXRoaXMuaGVpZ2h0KVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd5MicsIDApXG4gICAgICB0ZW1wR3JpZExpbmUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZS13aWR0aCcsICcxcHgnKVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzaGFwZS1yZW5kZXJpbmcnLCAnY3Jpc3BFZGdlcycpXG4gICAgICBncmlkR3JvdXAuYXBwZW5kQ2hpbGQodGVtcEdyaWRMaW5lKVxuXG4gICAgICBjb25zdCBnZXRGb3JtYXRGcm9tU2NhbGUgPSBzY2FsZSA9PiB7XG4gICAgICAgIHN3aXRjaCAoc2NhbGUpIHtcbiAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgICAgICByZXR1cm4gJ3NzLlNTUydcbiAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgcmV0dXJuICdtbTpzcydcbiAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgcmV0dXJuICdERC5NTSBISDptbSdcbiAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgIHJldHVybiAnREQuTU0gSEg6bW0nXG4gICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICByZXR1cm4gJ0RELU1NJ1xuICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgIHJldHVybiAnREQtTU0tWVknXG4gICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICByZXR1cm4gJ1lZWVknXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdGVtcEdyaWRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ3RleHQnKVxuICAgICAgdGVtcEdyaWRUZXh0LmNsYXNzTGlzdC5hZGQoJ3hBeGlzLXRleHQnKVxuICAgICAgdGVtcEdyaWRUZXh0LnNldEF0dHJpYnV0ZU5TKG51bGwsICd4JywgeFZhbClcbiAgICAgIHRlbXBHcmlkVGV4dC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneScsIDEwKVxuICAgICAgdGVtcEdyaWRUZXh0LnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgYCR7Zm9udFNpemV9YClcbiAgICAgIHRlbXBHcmlkVGV4dC5zZXRBdHRyaWJ1dGUoJ2RvbWluYW50LWJhc2VsaW5lJywgJ2hhbmdpbmcnKVxuICAgICAgdGVtcEdyaWRUZXh0LnNldEF0dHJpYnV0ZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgIHRlbXBHcmlkVGV4dC5pbm5lckhUTUwgPSBgJHttb21lbnQodmFsdWUpLmZvcm1hdChnZXRGb3JtYXRGcm9tU2NhbGUoeFNjYWxlKSl9YFxuICAgICAgeEF4aXMuYXBwZW5kQ2hpbGQodGVtcEdyaWRUZXh0KVxuICAgIH0pXG4gICAgeVBvaW50cy5mb3JFYWNoKCh7IHk6IHlWYWwsIHZhbHVlIH0pID0+IHtcbiAgICAgIGNvbnN0IHRlbXBHcmlkTGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdsaW5lJylcbiAgICAgIHRlbXBHcmlkTGluZS5jbGFzc0xpc3QuYWRkKCdncmlkLWxpbmUnKVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4MScsIDApXG4gICAgICB0ZW1wR3JpZExpbmUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3gyJywgdGhpcy53aWR0aClcbiAgICAgIHRlbXBHcmlkTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneTEnLCB5VmFsKVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd5MicsIHlWYWwpXG4gICAgICB0ZW1wR3JpZExpbmUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZS13aWR0aCcsICcxcHgnKVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzaGFwZS1yZW5kZXJpbmcnLCAnY3Jpc3BFZGdlcycpXG4gICAgICBncmlkR3JvdXAuYXBwZW5kQ2hpbGQodGVtcEdyaWRMaW5lKVxuXG4gICAgICBjb25zdCB0ZW1wR3JpZFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAndGV4dCcpXG4gICAgICB0ZW1wR3JpZFRleHQuY2xhc3NMaXN0LmFkZCgneUF4aXMtdGV4dCcpXG4gICAgICB0ZW1wR3JpZFRleHQuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3gnLCAxMClcbiAgICAgIHRlbXBHcmlkVGV4dC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneScsIHlWYWwpXG4gICAgICB0ZW1wR3JpZFRleHQuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLCBgJHtmb250U2l6ZX1gKVxuICAgICAgdGVtcEdyaWRUZXh0LnNldEF0dHJpYnV0ZSgnZG9taW5hbnQtYmFzZWxpbmUnLCAnbWlkZGxlJylcbiAgICAgIHRlbXBHcmlkVGV4dC5pbm5lckhUTUwgPSBgJHstdmFsdWV9YFxuICAgICAgeUF4aXMuYXBwZW5kQ2hpbGQodGVtcEdyaWRUZXh0KVxuICAgIH0pXG4gIH1cblxuICBwb3B1bGF0ZVNWRyhzdmcsIHhBeGlzLCB5QXhpcywgY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgZ3JpZEdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2cnKVxuICAgIGdyaWRHcm91cC5jbGFzc0xpc3QuYWRkKCdncmlkLWdyb3VwJylcbiAgICBjb25zdCBjYW5kbGVHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdnJylcbiAgICBjYW5kbGVHcm91cC5pZCA9ICdjYW5kbGUtZ3JvdXAnXG4gICAgY29uc3Qgdm9sdW1lR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnZycpXG4gICAgdm9sdW1lR3JvdXAuaWQgPSAndm9sdW1lLWdyb3VwJ1xuICAgIGNvbnN0IHNpZ25hbEdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2cnKVxuICAgIHNpZ25hbEdyb3VwLmlkID0gJ3NpZ25hbC1ncm91cCdcbiAgICBzdmcuYXBwZW5kQ2hpbGQoZ3JpZEdyb3VwKVxuICAgIHN2Zy5hcHBlbmRDaGlsZChjYW5kbGVHcm91cClcbiAgICBzdmcuYXBwZW5kQ2hpbGQodm9sdW1lR3JvdXApXG4gICAgc3ZnLmFwcGVuZENoaWxkKHNpZ25hbEdyb3VwKVxuICAgIGlmICh0aGlzLnBhcnNlZERhdGE/LmRhdGE/Lmxlbmd0aCkge1xuICAgICAgLy8gdGhpcy5nZW5lcmF0ZUdyaWQoZ3JpZEdyb3VwLCB4QXhpcywgeUF4aXMpXG4gICAgICBpZiAodGhpcy5wYXJzZWREYXRhLmNhbmRsZURhdGE/Lmxlbmd0aCkgdGhpcy5nZW5lcmF0ZUNhbmRsZXMoY2FuZGxlR3JvdXApXG4gICAgICBpZiAodGhpcy5wYXJzZWREYXRhLnZvbHVtZURhdGE/Lmxlbmd0aCkgdGhpcy5nZW5lcmF0ZVZvbHVtZXModm9sdW1lR3JvdXApXG4gICAgICBpZiAodGhpcy5wYXJzZWREYXRhLnNpZ25hbERhdGE/Lmxlbmd0aCkgdGhpcy5nZW5lcmF0ZVNpZ25hbHMoc2lnbmFsR3JvdXApXG4gICAgfVxuICAgIGNoYXJ0QXJlYS5zY3JvbGxUbyh0aGlzLndpZHRoLCAwKVxuICB9XG5cbiAgZ2VuZXJhdGVTVkdzKCkge1xuICAgIC8vIDo6Ojo6Ojo6OjogR1JBUEggOjo6Ojo6Ojo6OiAvL1xuICAgIGNvbnN0IGdyYXBoU1ZHID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ3N2ZycpXG4gICAgZ3JhcGhTVkcuY2xhc3NMaXN0LmFkZCgnY2hhcnQtZ3JhcGgnKVxuICAgIGdyYXBoU1ZHLnNldEF0dHJpYnV0ZU5TKG51bGwsICd2ZXJzaW9uJywgJzEuMScpXG4gICAgZ3JhcGhTVkcuc2V0QXR0cmlidXRlKCd4bWxucycsICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycpXG4gICAgZ3JhcGhTVkcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAnbm9uZScpXG4gICAgZ3JhcGhTVkcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3dpZHRoJywgYCR7dGhpcy53aWR0aH1weGApXG4gICAgZ3JhcGhTVkcuc2V0QXR0cmlidXRlTlMoXG4gICAgICBudWxsLFxuICAgICAgJ3ZpZXdCb3gnLFxuICAgICAgYDAgLSR7dGhpcy5oZWlnaHR9ICR7dGhpcy53aWR0aH0gJHt0aGlzLmhlaWdodH1gXG4gICAgKVxuICAgIC8vIDo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6OiAvL1xuXG4gICAgLy8gOjo6Ojo6Ojo6OiBYQVhJUyA6Ojo6Ojo6Ojo6IC8vXG4gICAgY29uc3QgeEF4aXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnc3ZnJylcbiAgICB4QXhpcy5jbGFzc0xpc3QuYWRkKCdjaGFydC14LWF4aXMnKVxuICAgIHhBeGlzLnNldEF0dHJpYnV0ZU5TKG51bGwsICd2ZXJzaW9uJywgJzEuMScpXG4gICAgeEF4aXMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3dpZHRoJywgYCR7dGhpcy53aWR0aH1weGApXG4gICAgeEF4aXMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ZpZXdCb3gnLCBgMCAwICR7dGhpcy53aWR0aH0gNDBgKVxuICAgIC8vIDo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6OiAvL1xuXG4gICAgLy8gOjo6Ojo6Ojo6OiBZQVhJUyA6Ojo6Ojo6Ojo6IC8vXG4gICAgY29uc3QgeUF4aXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnc3ZnJylcbiAgICB5QXhpcy5jbGFzc0xpc3QuYWRkKCdjaGFydC15LWF4aXMnKVxuICAgIHlBeGlzLnNldEF0dHJpYnV0ZU5TKG51bGwsICd2ZXJzaW9uJywgJzEuMScpXG4gICAgeUF4aXMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2hlaWdodCcsIGAke3RoaXMuaGVpZ2h0fXB4YClcbiAgICB5QXhpcy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndmlld0JveCcsIGAwIC0ke3RoaXMuaGVpZ2h0fSA1MCAke3RoaXMuaGVpZ2h0fWApXG4gICAgLy8gOjo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6IC8vXG5cbiAgICByZXR1cm4gW2dyYXBoU1ZHLCB4QXhpcywgeUF4aXNdXG4gIH1cblxuICBwYXJzZURhdGEoY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgY2FuZGxlQm91bmRzRmllbGRzVG9DaGVjayA9IFsnb3BlbicsICdsb3cnLCAnaGlnaCcsICdjbG9zZSddXG4gICAgY29uc3QgW2RhdGEsIG1pbiwgbWF4XSA9IHRoaXMuZGF0YS5kYXRhLnJlZHVjZShcbiAgICAgIChhY2MsIGN1cikgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wRGF0YSA9IFsuLi5hY2NbMF1dXG4gICAgICAgIGNvbnN0IHRlbXBSb3cgPSB0aGlzLmRhdGEuY29sdW1ucy5yZWR1Y2UoKGFjY3VtdWxhdGVkLCBjdXJyZW50LCBpKSA9PiB7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgIT09ICdkYXRlJykgcmV0dXJuIHsgLi4uYWNjdW11bGF0ZWQsIFtjdXJyZW50XTogY3VyW2ldIH1cbiAgICAgICAgICByZXR1cm4geyAuLi5hY2N1bXVsYXRlZCwgZGF0ZTogbW9tZW50KGN1cltpXSkudmFsdWVPZigpIC8gcmVtb3ZlTWlsbGlzIH1cbiAgICAgICAgfSwge30pXG4gICAgICAgIHRlbXBEYXRhLnB1c2godGVtcFJvdylcbiAgICAgICAgY29uc3QgY2FuZGxlVmFsdWVzID0gY2FuZGxlQm91bmRzRmllbGRzVG9DaGVja1xuICAgICAgICAgIC5tYXAoZmllbGQgPT4gdGVtcFJvd1tmaWVsZF0pXG4gICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEgLSBiKVxuICAgICAgICBjb25zdCB0ZW1wQ2FuZGxlTWluID0gYWNjWzFdXG4gICAgICAgICAgPyBNYXRoLm1pbihhY2NbMV0sIGNhbmRsZVZhbHVlc1swXSlcbiAgICAgICAgICA6IGNhbmRsZVZhbHVlc1swXVxuICAgICAgICBjb25zdCB0ZW1wQ2FuZGxlTWF4ID0gYWNjWzJdXG4gICAgICAgICAgPyBNYXRoLm1heChhY2NbMl0sIGNhbmRsZVZhbHVlc1tjYW5kbGVWYWx1ZXMubGVuZ3RoIC0gMV0pXG4gICAgICAgICAgOiBjYW5kbGVWYWx1ZXNbY2FuZGxlVmFsdWVzLmxlbmd0aCAtIDFdXG4gICAgICAgIHJldHVybiBbdGVtcERhdGEsIHRlbXBDYW5kbGVNaW4sIHRlbXBDYW5kbGVNYXhdXG4gICAgICB9LFxuICAgICAgW1tdLCBudWxsLCBudWxsXVxuICAgIClcbiAgICBkYXRhLnNvcnQoKGEsIGIpID0+IGEuZGF0ZSAtIGIuZGF0ZSlcbiAgICB0aGlzLnBhcnNlZERhdGEgPSB7XG4gICAgICBzdGFydDogZGF0YVswXS5kYXRlLFxuICAgICAgZW5kOiBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uZGF0ZSxcbiAgICAgIG1pbixcbiAgICAgIG1heCxcbiAgICAgIGRhdGEsXG4gICAgICBjYW5kbGVEYXRhOiBkYXRhLm1hcCgoeyBkYXRlLCBvcGVuLCBsb3csIGhpZ2gsIGNsb3NlIH0pID0+ICh7XG4gICAgICAgIGRhdGUsXG4gICAgICAgIG9wZW4sXG4gICAgICAgIGxvdyxcbiAgICAgICAgaGlnaCxcbiAgICAgICAgY2xvc2UsXG4gICAgICB9KSksXG4gICAgICBzaWduYWxEYXRhOiBkYXRhLnJlZHVjZSgoYWNjLCB7IGJ1eSwgc2VsbCwgb3BlbiwgY2xvc2UgfSwgaSkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wUmVzdWx0ID0gWy4uLmFjY11cbiAgICAgICAgaWYgKGJ1eSB8fCBzZWxsKVxuICAgICAgICAgIHRlbXBSZXN1bHQucHVzaCh7XG4gICAgICAgICAgICB4OiBpLFxuICAgICAgICAgICAgYnV5LFxuICAgICAgICAgICAgc2VsbCxcbiAgICAgICAgICAgIHBvczogb3BlbixcbiAgICAgICAgICAgIGRpcmVjdGlvbjogb3BlbiA+IGNsb3NlID8gJ2Rvd24nIDogJ3VwJyxcbiAgICAgICAgICB9KVxuICAgICAgICByZXR1cm4gdGVtcFJlc3VsdFxuICAgICAgfSwgW10pLFxuICAgICAgdm9sdW1lRGF0YTogZGF0YS5tYXAoKHsgZGF0ZSwgdm9sdW1lLCBvcGVuLCBjbG9zZSB9KSA9PiAoe1xuICAgICAgICBkYXRlLFxuICAgICAgICB2b2x1bWUsXG4gICAgICAgIGNvbG9yOiBvcGVuIC0gY2xvc2UgPiAwID8gJ25lZ2F0aXZlJyA6ICdwb3NpdGl2ZScsXG4gICAgICB9KSksXG4gICAgfVxuICAgIGNvbnN0IHdpZHRoID0gTnVtYmVyKFxuICAgICAgKFxuICAgICAgICAoY2FuZGxlV2lkdGggLyB0aW1lUmFuZ2UpICpcbiAgICAgICAgKHRoaXMucGFyc2VkRGF0YS5lbmQgLSB0aGlzLnBhcnNlZERhdGEuc3RhcnQpXG4gICAgICApLnRvRml4ZWQoNClcbiAgICApXG4gICAgY29uc3QgaGVpZ2h0ID0gY2hhcnRBcmVhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAtIDQwIC0gMSAqIHNjcm9sbEhlaWdodFxuICAgIHRoaXMud2lkdGggPSB3aWR0aFxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0XG4gICAgdGhpcy5sYXN0UG9pbnQgPSB0aGlzLnBhcnNlZERhdGEuZW5kICogcmVtb3ZlTWlsbGlzXG4gICAgY29uc3QgeCA9IHRoaXMucGFyc2VkRGF0YS5zdGFydCAqIHJlbW92ZU1pbGxpc1xuICAgIGNvbnN0IHhSYW5nZSA9IHRoaXMuc2FtcGxlQ291bnQgKiB0aW1lUG9uZGVyICogcmVtb3ZlTWlsbGlzXG4gICAgY29uc3QgeFBvbmRlciA9IHRoaXMud2lkdGggLyB4UmFuZ2VcbiAgICB0aGlzLnggPSB4XG4gICAgdGhpcy54UmFuZ2UgPSB4UmFuZ2VcbiAgICB0aGlzLnhQb25kZXIgPSB4UG9uZGVyXG4gICAgY29uc3QgeVNwYW4gPSB0aGlzLnBhcnNlZERhdGEubWF4IC0gdGhpcy5wYXJzZWREYXRhLm1pblxuICAgIGNvbnN0IHkgPSAtdGhpcy5wYXJzZWREYXRhLm1heCAtIHZpZXdCb3hZUGFkZGluZ1RvcCAqIHlTcGFuXG4gICAgY29uc3QgeVJhbmdlID0geVNwYW4gKiAoMSArIHZpZXdCb3hZUGFkZGluZ1RvcCArIHZpZXdCb3hZUGFkZGluZ0JvdHRvbSlcbiAgICBjb25zdCB5UG9uZGVyID0gdGhpcy5oZWlnaHQgLyB5UmFuZ2VcbiAgICB0aGlzLnkgPSB5XG4gICAgdGhpcy55UmFuZ2UgPSB5UmFuZ2VcbiAgICB0aGlzLnlQb25kZXIgPSB5UG9uZGVyXG4gIH1cblxuICByZW5kZXJDaGFydCgpIHtcbiAgICBjb25zdCBjaGFydEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKVxuICAgIGNoYXJ0QXJlYS5jbGFzc0xpc3QuYWRkKCdjaGFydC1hcmVhJylcbiAgICB0aGlzLnJvb3RFbGVtZW50LmlubmVySFRNTCA9ICcnXG4gICAgdGhpcy5yb290RWxlbWVudC5hcHBlbmRDaGlsZChjaGFydEFyZWEpXG4gICAgdGhpcy5wYXJzZURhdGEoY2hhcnRBcmVhKVxuICAgIGNvbnN0IFtzdmcsIHhBeGlzLCB5QXhpc10gPSB0aGlzLmdlbmVyYXRlU1ZHcygpXG4gICAgdGhpcy5yb290RWxlbWVudC5hcHBlbmRDaGlsZCh5QXhpcylcbiAgICBjaGFydEFyZWEuYXBwZW5kQ2hpbGQoc3ZnKVxuICAgIGNoYXJ0QXJlYS5hcHBlbmRDaGlsZCh4QXhpcylcbiAgICB0aGlzLnBvcHVsYXRlU1ZHKHN2ZywgeEF4aXMsIHlBeGlzLCBjaGFydEFyZWEpXG4gIH1cblxuICBzZXREYXRhKGRhdGFQb2ludHMpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhUG9pbnRzXG4gICAgaWYgKHRoaXMuZGF0YSAmJiB0aGlzLmRhdGE/LmRhdGE/Lmxlbmd0aCkge1xuICAgICAgdGhpcy5zYW1wbGVDb3VudCA9IHRoaXMuZGF0YS5kYXRhLmxlbmd0aFxuICAgICAgdGhpcy5yZW5kZXJDaGFydCgpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFHcmFwaENoYXJ0ZXJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG1heC1saW5lcyAqL1xuLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG4vKiBnbG9iYWwgbW9tZW50ICovXG5cbmNvbnN0IG5hbWVzcGFjZSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbmNvbnN0IHJlbW92ZU1pbGxpcyA9IDEwMDBcbmNvbnN0IHZpZXdCb3hZUGFkZGluZ1RvcCA9IDAuMSAvLyAxMCUgb24gdG9wXG5jb25zdCB2aWV3Qm94WVBhZGRpbmdCb3R0b20gPSAwLjEgLy8gMTAlIG9uIGJvdHRvbVxuY29uc3QgZ3JpZFNpemVYID0gMzJcbmNvbnN0IGdyaWRTaXplWSA9IDE2XG5jb25zdCByb3VuZGluZyA9IGZhbHNlXG5cbmV4cG9ydCBjbGFzcyBQcm9maXRHcmFwaENoYXJ0ZXIge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHRoaXMucm9vdEVsZW1lbnQgPSBwcm9wcy5yb290XG4gICAgdGhpcy5kYXRhID0gbnVsbFxuICAgIHRoaXMucGFyc2VkRGF0YSA9IG51bGxcbiAgICB0aGlzLndpZHRoID0gMVxuICAgIHRoaXMuaGVpZ2h0ID0gMVxuICAgIHRoaXMueCA9IG51bGxcbiAgICB0aGlzLnhSYW5nZSA9IG51bGxcbiAgICB0aGlzLnhQb25kZXIgPSAxXG4gICAgdGhpcy55ID0gbnVsbFxuICAgIHRoaXMueVJhbmdlID0gbnVsbFxuICAgIHRoaXMueVBvbmRlciA9IDFcbiAgfVxuXG4gIGdlbmVyYXRlUHJvZml0KHByb2ZpdEdyb3VwKSB7XG4gICAgY29uc3QgeyBzdGFydCB9ID0gdGhpcy5wYXJzZWREYXRhXG4gICAgY29uc3QgZGF0YSA9IHRoaXMucGFyc2VkRGF0YS5kYXRhLm1hcCgoeyBkYXRlLCBjdW11bGF0aXZlIH0pID0+ICh7XG4gICAgICBkYXRlOiAoZGF0ZSAtIHN0YXJ0KSAqIHJlbW92ZU1pbGxpcyAqIHRoaXMueFBvbmRlcixcbiAgICAgIGN1bXVsYXRpdmUsXG4gICAgfSkpXG4gICAgY29uc3QgcHNldWRvMCA9IC0odGhpcy5oZWlnaHQgKyB0aGlzLnkgKiB0aGlzLnlQb25kZXIpXG4gICAgY29uc3QgW2xpbmUsIHBvcywgbmVnXSA9IGRhdGEucmVkdWNlKFxuICAgICAgKGFjYywgY3VyLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1bXVsYXRpdmUgPSAtKHRoaXMuaGVpZ2h0ICsgKGN1ci5jdW11bGF0aXZlICsgdGhpcy55KSAqIHRoaXMueVBvbmRlcilcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBgJHthY2NbMF19JHtpID09PSAwID8gJ00nIDogJyBMJ30gJHtjdXIuZGF0ZS50b0ZpeGVkKDQpfSAke1xuICAgICAgICAgICAgYWNjWzNdXG4gICAgICAgICAgfSBMICR7Y3VyLmRhdGUudG9GaXhlZCg0KX0gJHtjdW11bGF0aXZlLnRvRml4ZWQoNCl9YCxcbiAgICAgICAgICBgJHthY2NbMV19JHtpID09PSAwID8gJ00nIDogJyBMJ30gJHtjdXIuZGF0ZS50b0ZpeGVkKDQpfSAke1xuICAgICAgICAgICAgYWNjWzNdID4gcHNldWRvMCA/IHBzZXVkbzAgOiBhY2NbM11cbiAgICAgICAgICB9IEwgJHtjdXIuZGF0ZS50b0ZpeGVkKDQpfSAke1xuICAgICAgICAgICAgY3VtdWxhdGl2ZSA8IHBzZXVkbzAgPyBjdW11bGF0aXZlLnRvRml4ZWQoNCkgOiBwc2V1ZG8wXG4gICAgICAgICAgfSR7aSA9PT0gZGF0YS5sZW5ndGggLSAxID8gYCBMICR7Y3VyLmRhdGUudG9GaXhlZCg0KX0gJHtwc2V1ZG8wfWAgOiAnJ31gLFxuICAgICAgICAgIGAke2FjY1syXX0ke2kgPT09IDAgPyAnTScgOiAnIEwnfSAke2N1ci5kYXRlLnRvRml4ZWQoNCl9ICR7XG4gICAgICAgICAgICBhY2NbM10gPCBwc2V1ZG8wID8gcHNldWRvMCA6IGFjY1szXVxuICAgICAgICAgIH0gTCAke2N1ci5kYXRlLnRvRml4ZWQoNCl9ICR7XG4gICAgICAgICAgICBjdW11bGF0aXZlID4gcHNldWRvMCA/IGN1bXVsYXRpdmUudG9GaXhlZCg0KSA6IHBzZXVkbzBcbiAgICAgICAgICB9JHtpID09PSBkYXRhLmxlbmd0aCAtIDEgPyBgIEwgJHtjdXIuZGF0ZS50b0ZpeGVkKDQpfSAke3BzZXVkbzB9YCA6ICcnfWAsXG4gICAgICAgICAgY3VtdWxhdGl2ZSxcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIFsnJywgJycsICcnLCBwc2V1ZG8wXVxuICAgIClcblxuICAgIGNvbnN0IHByb2ZpdDBMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2xpbmUnKVxuICAgIHByb2ZpdDBMaW5lLmlkID0gJ3plcm8tbGluZSdcbiAgICBwcm9maXQwTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneDEnLCAwKVxuICAgIHByb2ZpdDBMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4MicsIHRoaXMud2lkdGgpXG4gICAgcHJvZml0MExpbmUuc2V0QXR0cmlidXRlTlMoXG4gICAgICBudWxsLFxuICAgICAgJ3kxJyxcbiAgICAgIC10aGlzLmhlaWdodCArICgwIC0gdGhpcy55KSAqIHRoaXMueVBvbmRlclxuICAgIClcbiAgICBwcm9maXQwTGluZS5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgIG51bGwsXG4gICAgICAneTInLFxuICAgICAgLXRoaXMuaGVpZ2h0ICsgKDAgLSB0aGlzLnkpICogdGhpcy55UG9uZGVyXG4gICAgKVxuICAgIHByb2ZpdDBMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2Utd2lkdGgnLCAnMC41cHgnKVxuICAgIHByb2ZpdDBMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzaGFwZS1yZW5kZXJpbmcnLCAnY3Jpc3BFZGdlcycpXG4gICAgcHJvZml0R3JvdXAuYXBwZW5kQ2hpbGQocHJvZml0MExpbmUpXG5cbiAgICBpZiAoZGF0YS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHBvc1BhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAncGF0aCcpXG4gICAgICBwb3NQYXRoLmNsYXNzTGlzdC5hZGQoJ3BhdGgnKVxuICAgICAgcG9zUGF0aC5jbGFzc0xpc3QuYWRkKCdwb3NpdGl2ZScpXG4gICAgICBwb3NQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgYCR7cG9zfSBaYClcbiAgICAgIHBvc1BhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZS13aWR0aCcsICcxcHgnKVxuICAgICAgcHJvZml0R3JvdXAuYXBwZW5kQ2hpbGQocG9zUGF0aClcblxuICAgICAgY29uc3QgbmVnUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdwYXRoJylcbiAgICAgIG5lZ1BhdGguY2xhc3NMaXN0LmFkZCgncGF0aCcpXG4gICAgICBuZWdQYXRoLmNsYXNzTGlzdC5hZGQoJ25lZ2F0aXZlJylcbiAgICAgIG5lZ1BhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCBgJHtuZWd9IFpgKVxuICAgICAgbmVnUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc3Ryb2tlLXdpZHRoJywgJzFweCcpXG4gICAgICBwcm9maXRHcm91cC5hcHBlbmRDaGlsZChuZWdQYXRoKVxuXG4gICAgICBjb25zdCB0ZW1wUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdwYXRoJylcbiAgICAgIHRlbXBQYXRoLmNsYXNzTGlzdC5hZGQoJ3BhdGgnKVxuICAgICAgdGVtcFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCBsaW5lKVxuICAgICAgdGVtcFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZS13aWR0aCcsICcxcHgnKVxuICAgICAgcHJvZml0R3JvdXAuYXBwZW5kQ2hpbGQodGVtcFBhdGgpXG4gICAgfVxuICB9XG5cbiAgZ2VuZXJhdGVHcmlkKGdyaWRHcm91cCwgeEF4aXMsIHlBeGlzKSB7XG4gICAgY29uc3QgY2FsY3VsYXRlWFBvaW50cyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGxvZ2FyaXRobVdpdGhCYXNlID0gKHZhbHVlLCBiYXNlKSA9PiBNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLmxvZyhiYXNlKVxuICAgICAgY29uc3QgZ3JpZFRpbWVTcGFuID0gKGdyaWRTaXplWCAvIHRoaXMud2lkdGgpICogdGhpcy54UmFuZ2VcbiAgICAgIGxldCBhYnNQb25kZXIgPSAxXG4gICAgICBsZXQgcmVsUG9uZGVyID0gMVxuICAgICAgbGV0IHNjYWxlID0gJydcbiAgICAgIGxldCB0ZW1wUmFuZ2UgPSBncmlkVGltZVNwYW5cbiAgICAgIGNvbnN0IGxvZzEwID0gTWF0aC5sb2cxMChncmlkVGltZVNwYW4pXG4gICAgICBpZiAobG9nMTAgPCAzKSB7XG4gICAgICAgIGFic1BvbmRlciAqPSAxMCAqKiBNYXRoLmZsb29yKGxvZzEwKVxuICAgICAgICBzY2FsZSA9ICdtaWxsaXNlY29uZCdcbiAgICAgICAgY29uc3QgcmVsVmFsdWVzID0gWzIuNSwgNSwgMTBdXG4gICAgICAgIGNvbnN0IGFic1ZhbHVlcyA9IFsuLi5yZWxWYWx1ZXNdXG4gICAgICAgICAgLm1hcChlID0+IGUgKiBhYnNQb25kZXIpXG4gICAgICAgICAgLmZpbHRlcihlID0+ICEoZSAtIE1hdGgudHJ1bmMoZSkpKVxuICAgICAgICBsZXQgaSA9IDBcbiAgICAgICAgd2hpbGUgKGFic1ZhbHVlc1tpXSA8PSBncmlkVGltZVNwYW4pIGkrK1xuICAgICAgICB0ZW1wUmFuZ2UgPSBhYnNWYWx1ZXNbaV1cbiAgICAgICAgcmVsUG9uZGVyID0gcmVsVmFsdWVzW2ldICogMTAgKiogTWF0aC5mbG9vcihsb2cxMClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFic1BvbmRlciAqPSAxMDAwXG4gICAgICAgIGNvbnN0IGxvZzYwID0gbG9nYXJpdGhtV2l0aEJhc2UoZ3JpZFRpbWVTcGFuIC8gYWJzUG9uZGVyLCA2MClcbiAgICAgICAgaWYgKGxvZzYwIDwgMikge1xuICAgICAgICAgIGFic1BvbmRlciAqPSA2MCAqKiBNYXRoLmZsb29yKGxvZzYwKVxuICAgICAgICAgIHNjYWxlID0gbG9nNjAgPCAxID8gJ3NlY29uZCcgOiAnbWludXRlJ1xuICAgICAgICAgIGNvbnN0IHJlbFZhbHVlcyA9IFs1LCAxMCwgMzAsIDYwXVxuICAgICAgICAgIGNvbnN0IGFic1ZhbHVlcyA9IFsuLi5yZWxWYWx1ZXNdLm1hcChlID0+IGUgKiBhYnNQb25kZXIpXG4gICAgICAgICAgbGV0IGkgPSAwXG4gICAgICAgICAgd2hpbGUgKGFic1ZhbHVlc1tpXSA8PSBncmlkVGltZVNwYW4pIGkrK1xuICAgICAgICAgIHRlbXBSYW5nZSA9IGFic1ZhbHVlc1tpXVxuICAgICAgICAgIHJlbFBvbmRlciA9IHJlbFZhbHVlc1tpXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFic1BvbmRlciAqPSA2MCAqIDYwXG4gICAgICAgICAgaWYgKGdyaWRUaW1lU3BhbiA8IGFic1BvbmRlciAqIDEyKSB7XG4gICAgICAgICAgICBzY2FsZSA9ICdob3VyJ1xuICAgICAgICAgICAgY29uc3QgcmVsVmFsdWVzID0gWzMsIDYsIDEyXVxuICAgICAgICAgICAgY29uc3QgYWJzVmFsdWVzID0gWy4uLnJlbFZhbHVlc10ubWFwKGUgPT4gZSAqIGFic1BvbmRlcilcbiAgICAgICAgICAgIGxldCBpID0gMFxuICAgICAgICAgICAgd2hpbGUgKGFic1ZhbHVlc1tpXSA8PSBncmlkVGltZVNwYW4pIGkrK1xuICAgICAgICAgICAgdGVtcFJhbmdlID0gYWJzVmFsdWVzW2ldXG4gICAgICAgICAgICByZWxQb25kZXIgPSByZWxWYWx1ZXNbaV1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWJzUG9uZGVyICo9IDI0XG4gICAgICAgICAgICBpZiAoZ3JpZFRpbWVTcGFuIDwgYWJzUG9uZGVyICogMTQpIHtcbiAgICAgICAgICAgICAgc2NhbGUgPSAnZGF0ZSdcbiAgICAgICAgICAgICAgY29uc3QgcmVsVmFsdWVzID0gWzEsIDIsIDMsIDUsIDcsIDE0XVxuICAgICAgICAgICAgICBjb25zdCBhYnNWYWx1ZXMgPSBbLi4ucmVsVmFsdWVzXS5tYXAoZSA9PiBlICogYWJzUG9uZGVyKVxuICAgICAgICAgICAgICBsZXQgaSA9IDBcbiAgICAgICAgICAgICAgd2hpbGUgKGFic1ZhbHVlc1tpXSA8PSBncmlkVGltZVNwYW4pIGkrK1xuICAgICAgICAgICAgICB0ZW1wUmFuZ2UgPSBhYnNWYWx1ZXNbaV1cbiAgICAgICAgICAgICAgcmVsUG9uZGVyID0gcmVsVmFsdWVzW2ldXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzY2FsZSA9ICdiaWdnZXInXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgc3RhcnRpbmdQb2ludCA9IHRoaXMueFxuICAgICAgbGV0IHBvaW50cyA9IFtdXG4gICAgICBpZiAoc2NhbGUgIT09ICdiaWdnZXInKSB7XG4gICAgICAgIHN0YXJ0aW5nUG9pbnQgPSBtb21lbnQoc3RhcnRpbmdQb2ludCkuc3RhcnRPZihzY2FsZSlcbiAgICAgICAgY29uc3QgcmVtYWluZGVyID0gc3RhcnRpbmdQb2ludFtzY2FsZV0oKVxuICAgICAgICBpZiAoc2NhbGUgPT09ICdkYXRlJykge1xuICAgICAgICAgIGlmIChyZWxQb25kZXIgPj0gNylcbiAgICAgICAgICAgIHN0YXJ0aW5nUG9pbnQgPSBtb21lbnQoc3RhcnRpbmdQb2ludC52YWx1ZU9mKCkpLmlzb1dlZWtkYXkoOClcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBzdGFydGluZ1BvaW50ID0gbW9tZW50KHN0YXJ0aW5nUG9pbnQudmFsdWVPZigpKS5hZGQoXG4gICAgICAgICAgICAgIHJlbFBvbmRlciAtIDEgLSAoKHJlbWFpbmRlciAtIDEpICUgcmVsUG9uZGVyKSxcbiAgICAgICAgICAgICAgJ2RheSdcbiAgICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydGluZ1BvaW50ID0gbW9tZW50KHN0YXJ0aW5nUG9pbnQudmFsdWVPZigpKS5hZGQoXG4gICAgICAgICAgICByZWxQb25kZXIgLSAxIC0gKChyZW1haW5kZXIgLSAxKSAlIHJlbFBvbmRlciksXG4gICAgICAgICAgICBzY2FsZVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBwb2ludHMucHVzaChzdGFydGluZ1BvaW50LnZhbHVlT2YoKSlcbiAgICAgICAgbGV0IGxhc3RQb2ludCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1cbiAgICAgICAgd2hpbGUgKGxhc3RQb2ludCA8IHRoaXMueCArIHRoaXMueFJhbmdlKSB7XG4gICAgICAgICAgY29uc3QgbmV3UG9pbnQgPSBsYXN0UG9pbnQgKyB0ZW1wUmFuZ2VcbiAgICAgICAgICBwb2ludHMucHVzaChuZXdQb2ludClcbiAgICAgICAgICBsYXN0UG9pbnQgPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFic1BvbmRlciAqPSAzMFxuICAgICAgICBpZiAoZ3JpZFRpbWVTcGFuIDwgYWJzUG9uZGVyICogNikge1xuICAgICAgICAgIHNjYWxlID0gJ21vbnRoJ1xuICAgICAgICAgIGNvbnN0IHJlbFZhbHVlcyA9IFsxLCAzLCA2XVxuICAgICAgICAgIGNvbnN0IGFic1ZhbHVlcyA9IFsuLi5yZWxWYWx1ZXNdLm1hcChlID0+IGUgKiBhYnNQb25kZXIpXG4gICAgICAgICAgbGV0IGkgPSAwXG4gICAgICAgICAgd2hpbGUgKGFic1ZhbHVlc1tpXSA8PSBncmlkVGltZVNwYW4pIGkrK1xuICAgICAgICAgIHJlbFBvbmRlciA9IHJlbFZhbHVlc1tpXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFic1BvbmRlciAqPSAzNjUgLyAzMFxuICAgICAgICAgIHNjYWxlID0gJ3llYXInXG4gICAgICAgICAgY29uc3QgcmVsVmFsdWVzID0gWzEsIDUsIDEwXVxuICAgICAgICAgIGxldCBhYnNWYWx1ZXMgPSBbLi4ucmVsVmFsdWVzXS5tYXAoZSA9PiBlICogYWJzUG9uZGVyKVxuICAgICAgICAgIGxldCBpID0gMFxuICAgICAgICAgIGxldCBqID0gMFxuICAgICAgICAgIHdoaWxlIChhYnNWYWx1ZXNbaV0gPD0gZ3JpZFRpbWVTcGFuKSB7XG4gICAgICAgICAgICBpKytcbiAgICAgICAgICAgIGlmIChpID09PSBhYnNWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmICghaikge1xuICAgICAgICAgICAgICAgIHJlbFZhbHVlcy5zcGxpY2UoMSwgMCwgMi41KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGkgPSAwXG4gICAgICAgICAgICAgIGorK1xuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgICAgIGFic1ZhbHVlcyA9IFsuLi5yZWxWYWx1ZXNdLm1hcChlID0+IGUgKiAxMCAqKiBqICogYWJzUG9uZGVyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZWxQb25kZXIgPSByZWxWYWx1ZXNbaV0gKiAxMCAqKiBqXG4gICAgICAgIH1cbiAgICAgICAgc3RhcnRpbmdQb2ludCA9IG1vbWVudCh0aGlzLngpLnN0YXJ0T2Yoc2NhbGUpLmFkZCgxLCBzY2FsZSlcbiAgICAgICAgY29uc3QgcmVtYWluZGVyID0gc3RhcnRpbmdQb2ludFtzY2FsZV0oKVxuICAgICAgICBzdGFydGluZ1BvaW50ID0gbW9tZW50KHN0YXJ0aW5nUG9pbnQudmFsdWVPZigpKS5hZGQoXG4gICAgICAgICAgcmVsUG9uZGVyIC0gMSAtICgocmVtYWluZGVyIC0gMSkgJSByZWxQb25kZXIpLFxuICAgICAgICAgIHNjYWxlXG4gICAgICAgIClcbiAgICAgICAgcG9pbnRzLnB1c2goc3RhcnRpbmdQb2ludC52YWx1ZU9mKCkpXG4gICAgICAgIGxldCBsYXN0UG9pbnQgPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdXG4gICAgICAgIHdoaWxlIChsYXN0UG9pbnQgPCB0aGlzLnggKyB0aGlzLnhSYW5nZSkge1xuICAgICAgICAgIGNvbnN0IG5ld1BvaW50ID0gbW9tZW50KGxhc3RQb2ludCkuYWRkKHJlbFBvbmRlciwgc2NhbGUpLnZhbHVlT2YoKVxuICAgICAgICAgIHBvaW50cy5wdXNoKG5ld1BvaW50KVxuICAgICAgICAgIGxhc3RQb2ludCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1cbiAgICAgICAgfVxuICAgICAgICBwb2ludHMucG9wKClcbiAgICAgIH1cbiAgICAgIGlmIChzY2FsZSA9PT0gJ21vbnRoJyAmJiByZWxQb25kZXIgPiAxKVxuICAgICAgICBwb2ludHMgPSBbLi4ucG9pbnRzXS5tYXAocG9pbnQgPT4gbW9tZW50KHBvaW50KS5zdWJ0cmFjdCgxLCAnZGF5JykudmFsdWVPZigpKVxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgcG9pbnRzLm1hcChwb2ludCA9PiAoe1xuICAgICAgICAgIHg6IChwb2ludCAtIHRoaXMueCkgKiB0aGlzLnhQb25kZXIsXG4gICAgICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgICB9KSksXG4gICAgICAgIHNjYWxlLFxuICAgICAgXVxuICAgIH1cbiAgICBjb25zdCBjYWxjdWxhdGVZUG9pbnRzID0gKHJhbmdlLCBzdGFydCkgPT4ge1xuICAgICAgY29uc3QgdGVtcFZhbHVlcyA9IFswLjUsIDEsIDIuNSwgNSwgMTBdXG4gICAgICBsZXQgcG9uZGVyID0gMVxuICAgICAgY29uc3QgZ3JpZFlTcGFuID0gKGdyaWRTaXplWSAvIHRoaXMuaGVpZ2h0KSAqIHJhbmdlXG4gICAgICBpZiAodGVtcFZhbHVlc1t0ZW1wVmFsdWVzLmxlbmd0aCAtIDFdICogcG9uZGVyID4gZ3JpZFlTcGFuKSB7XG4gICAgICAgIHdoaWxlICh0ZW1wVmFsdWVzW3RlbXBWYWx1ZXMubGVuZ3RoIC0gMV0gKiBwb25kZXIgPiBncmlkWVNwYW4pIHBvbmRlciAvPSAxMFxuICAgICAgICBwb25kZXIgKj0gMTBcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wVmFsdWVzWzBdICogcG9uZGVyIDwgZ3JpZFlTcGFuKSB7XG4gICAgICAgIHdoaWxlICh0ZW1wVmFsdWVzWzBdICogcG9uZGVyIDwgZ3JpZFlTcGFuKSBwb25kZXIgKj0gMTBcbiAgICAgICAgcG9uZGVyIC89IDEwXG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgICAgcm91bmRpbmcgJiYgcG9uZGVyICogdGVtcE5vcm1hbGl6ZXIgPD0gMVxuICAgICAgICAgID8gdGVtcFZhbHVlcy5maWx0ZXIodiA9PiAhcm91bmRpbmcgfHwgdiAhPT0gMi41KVxuICAgICAgICAgIDogdGVtcFZhbHVlc1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgICAgbGV0IFtkaXN0YW5jZSwgYWRkXSA9IHZhbHVlcy5yZWR1Y2UoXG4gICAgICAgIChhY2MsIGN1ciwgaSkgPT4ge1xuICAgICAgICAgIHJldHVybiBhY2NbMF0gKiBwb25kZXIgPiBncmlkWVNwYW4gPyBbYWNjWzBdLCBhY2NbMV1dIDogW2N1ciwgaSA9PT0gMl0gLy8gMi41IGRlY2ltYWwgb3B0aW9uXG4gICAgICAgIH0sXG4gICAgICAgIFswLCBmYWxzZV1cbiAgICAgIClcbiAgICAgIGxldCBkZWNpbWFscyA9IDBcbiAgICAgIGlmIChwb25kZXIpIHdoaWxlICgxMCAqKiBkZWNpbWFscyA8IDEgLyBwb25kZXIpIGRlY2ltYWxzKytcbiAgICAgIGlmIChhZGQpIGRlY2ltYWxzKytcbiAgICAgIGRpc3RhbmNlID0gTnVtYmVyKE51bWJlci5wYXJzZUZsb2F0KGRpc3RhbmNlICogcG9uZGVyKS50b0ZpeGVkKGRlY2ltYWxzKSlcbiAgICAgIGNvbnN0IHN0YXJ0aW5nUG9pbnQgPVxuICAgICAgICBOdW1iZXIoXG4gICAgICAgICAgTnVtYmVyLnBhcnNlRmxvYXQoTWF0aC5jZWlsKHN0YXJ0IC8gZGlzdGFuY2UpICogZGlzdGFuY2UpLnRvRml4ZWQoZGVjaW1hbHMpXG4gICAgICAgICkgfHwgMFxuICAgICAgY29uc3QgcG9pbnRzID0gW11cbiAgICAgIGlmIChkaXN0YW5jZSkge1xuICAgICAgICBwb2ludHMucHVzaChzdGFydGluZ1BvaW50KVxuICAgICAgICB3aGlsZSAocG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSArIGRpc3RhbmNlIDw9IHN0YXJ0ICsgcmFuZ2UpIHtcbiAgICAgICAgICBjb25zdCBuZXdQb2ludCA9IE51bWJlcihcbiAgICAgICAgICAgIE51bWJlci5wYXJzZUZsb2F0KHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0gKyBkaXN0YW5jZSkudG9GaXhlZChkZWNpbWFscylcbiAgICAgICAgICApXG4gICAgICAgICAgcG9pbnRzLnB1c2gobmV3UG9pbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBwb2ludHMubWFwKHBvaW50ID0+ICh7XG4gICAgICAgIHk6IC10aGlzLmhlaWdodCArIChwb2ludCAtIHRoaXMueSkgKiB0aGlzLnlQb25kZXIsXG4gICAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgIH0pKVxuICAgIH1cbiAgICBjb25zdCBbeFBvaW50cywgeFNjYWxlXSA9IGNhbGN1bGF0ZVhQb2ludHMoKVxuICAgIGNvbnN0IHlQb2ludHMgPSBjYWxjdWxhdGVZUG9pbnRzKHRoaXMueVJhbmdlLCB0aGlzLnkpXG5cbiAgICBjb25zdCBmb250U2l6ZSA9IDEyXG5cbiAgICB4UG9pbnRzLmZvckVhY2goKHsgeDogeFZhbCwgdmFsdWUgfSkgPT4ge1xuICAgICAgY29uc3QgdGVtcEdyaWRMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2xpbmUnKVxuICAgICAgdGVtcEdyaWRMaW5lLmNsYXNzTGlzdC5hZGQoJ2dyaWQtbGluZScpXG4gICAgICB0ZW1wR3JpZExpbmUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3gxJywgeFZhbClcbiAgICAgIHRlbXBHcmlkTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneDInLCB4VmFsKVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd5MScsIC10aGlzLmhlaWdodClcbiAgICAgIHRlbXBHcmlkTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneTInLCAwKVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2Utd2lkdGgnLCAnMXB4JylcbiAgICAgIHRlbXBHcmlkTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc2hhcGUtcmVuZGVyaW5nJywgJ2NyaXNwRWRnZXMnKVxuICAgICAgZ3JpZEdyb3VwLmFwcGVuZENoaWxkKHRlbXBHcmlkTGluZSlcblxuICAgICAgY29uc3QgZ2V0Rm9ybWF0RnJvbVNjYWxlID0gc2NhbGUgPT4ge1xuICAgICAgICBzd2l0Y2ggKHNjYWxlKSB7XG4gICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICAgICAgcmV0dXJuICdzcy5TU1MnXG4gICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgIHJldHVybiAnbW06c3MnXG4gICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgIHJldHVybiAnREQuTU0gSEg6bW0nXG4gICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICByZXR1cm4gJ0RELk1NIEhIOm1tJ1xuICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgcmV0dXJuICdERC1NTSdcbiAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICByZXR1cm4gJ0RELU1NLVlZJ1xuICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgcmV0dXJuICdZWVlZJ1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRlbXBHcmlkVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICd0ZXh0JylcbiAgICAgIHRlbXBHcmlkVGV4dC5jbGFzc0xpc3QuYWRkKCd4QXhpcy10ZXh0JylcbiAgICAgIHRlbXBHcmlkVGV4dC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneCcsIHhWYWwpXG4gICAgICB0ZW1wR3JpZFRleHQuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3knLCAxMClcbiAgICAgIHRlbXBHcmlkVGV4dC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsIGAke2ZvbnRTaXplfWApXG4gICAgICB0ZW1wR3JpZFRleHQuc2V0QXR0cmlidXRlKCdkb21pbmFudC1iYXNlbGluZScsICdoYW5naW5nJylcbiAgICAgIHRlbXBHcmlkVGV4dC5zZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICB0ZW1wR3JpZFRleHQuaW5uZXJIVE1MID0gYCR7bW9tZW50KHZhbHVlKS5mb3JtYXQoZ2V0Rm9ybWF0RnJvbVNjYWxlKHhTY2FsZSkpfWBcbiAgICAgIHhBeGlzLmFwcGVuZENoaWxkKHRlbXBHcmlkVGV4dClcbiAgICB9KVxuICAgIHlQb2ludHMuZm9yRWFjaCgoeyB5OiB5VmFsLCB2YWx1ZSB9KSA9PiB7XG4gICAgICBjb25zdCB0ZW1wR3JpZExpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnbGluZScpXG4gICAgICB0ZW1wR3JpZExpbmUuY2xhc3NMaXN0LmFkZCgnZ3JpZC1saW5lJylcbiAgICAgIHRlbXBHcmlkTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneDEnLCAwKVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4MicsIHRoaXMud2lkdGgpXG4gICAgICB0ZW1wR3JpZExpbmUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3kxJywgeVZhbClcbiAgICAgIHRlbXBHcmlkTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneTInLCB5VmFsKVxuICAgICAgdGVtcEdyaWRMaW5lLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2Utd2lkdGgnLCAnMXB4JylcbiAgICAgIHRlbXBHcmlkTGluZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc2hhcGUtcmVuZGVyaW5nJywgJ2NyaXNwRWRnZXMnKVxuICAgICAgZ3JpZEdyb3VwLmFwcGVuZENoaWxkKHRlbXBHcmlkTGluZSlcblxuICAgICAgY29uc3QgdGVtcEdyaWRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ3RleHQnKVxuICAgICAgdGVtcEdyaWRUZXh0LmNsYXNzTGlzdC5hZGQoJ3lBeGlzLXRleHQnKVxuICAgICAgdGVtcEdyaWRUZXh0LnNldEF0dHJpYnV0ZU5TKG51bGwsICd4JywgMTApXG4gICAgICB0ZW1wR3JpZFRleHQuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3knLCB5VmFsKVxuICAgICAgdGVtcEdyaWRUZXh0LnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgYCR7Zm9udFNpemV9YClcbiAgICAgIHRlbXBHcmlkVGV4dC5zZXRBdHRyaWJ1dGUoJ2RvbWluYW50LWJhc2VsaW5lJywgJ21pZGRsZScpXG4gICAgICB0ZW1wR3JpZFRleHQuaW5uZXJIVE1MID0gYCR7LXZhbHVlfWBcbiAgICAgIHlBeGlzLmFwcGVuZENoaWxkKHRlbXBHcmlkVGV4dClcbiAgICB9KVxuICB9XG5cbiAgcG9wdWxhdGVTVkcoc3ZnLCB4QXhpcywgeUF4aXMpIHtcbiAgICBjb25zdCBncmlkR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnZycpXG4gICAgZ3JpZEdyb3VwLmNsYXNzTGlzdC5hZGQoJ2dyaWQtZ3JvdXAnKVxuICAgIGNvbnN0IHByb2ZpdEdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2cnKVxuICAgIHByb2ZpdEdyb3VwLmlkID0gJ3Byb2ZpdC1ncm91cCdcbiAgICBzdmcuYXBwZW5kQ2hpbGQoZ3JpZEdyb3VwKVxuICAgIHN2Zy5hcHBlbmRDaGlsZChwcm9maXRHcm91cClcblxuICAgIGlmICh0aGlzLnBhcnNlZERhdGE/LmRhdGE/Lmxlbmd0aCkge1xuICAgICAgLy8gdGhpcy5nZW5lcmF0ZUdyaWQoZ3JpZEdyb3VwLCB4QXhpcywgeUF4aXMpXG4gICAgICBpZiAodGhpcy5wYXJzZWREYXRhLmRhdGE/Lmxlbmd0aCkgdGhpcy5nZW5lcmF0ZVByb2ZpdChwcm9maXRHcm91cClcbiAgICB9XG4gIH1cblxuICBnZW5lcmF0ZVNWR3MoKSB7XG4gICAgLy8gOjo6Ojo6Ojo6OiBHUkFQSCA6Ojo6Ojo6Ojo6IC8vXG4gICAgY29uc3QgZ3JhcGhTVkcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnc3ZnJylcbiAgICBncmFwaFNWRy5jbGFzc0xpc3QuYWRkKCdjaGFydC1ncmFwaCcpXG4gICAgZ3JhcGhTVkcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ZlcnNpb24nLCAnMS4xJylcbiAgICBncmFwaFNWRy5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJylcbiAgICBncmFwaFNWRy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAncHJlc2VydmVBc3BlY3RSYXRpbycsICdub25lJylcbiAgICBncmFwaFNWRy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnd2lkdGgnLCBgJHt0aGlzLndpZHRofXB4YClcbiAgICBncmFwaFNWRy5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgIG51bGwsXG4gICAgICAndmlld0JveCcsXG4gICAgICBgMCAtJHt0aGlzLmhlaWdodH0gJHt0aGlzLndpZHRofSAke3RoaXMuaGVpZ2h0fWBcbiAgICApXG4gICAgLy8gOjo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6IC8vXG5cbiAgICAvLyA6Ojo6Ojo6Ojo6IFhBWElTIDo6Ojo6Ojo6OjogLy9cbiAgICBjb25zdCB4QXhpcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdzdmcnKVxuICAgIHhBeGlzLmNsYXNzTGlzdC5hZGQoJ2NoYXJ0LXgtYXhpcycpXG4gICAgeEF4aXMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ZlcnNpb24nLCAnMS4xJylcbiAgICB4QXhpcy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnd2lkdGgnLCBgJHt0aGlzLndpZHRofXB4YClcbiAgICB4QXhpcy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndmlld0JveCcsIGAwIDAgJHt0aGlzLndpZHRofSA0MGApXG4gICAgLy8gOjo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6IC8vXG5cbiAgICAvLyA6Ojo6Ojo6Ojo6IFlBWElTIDo6Ojo6Ojo6OjogLy9cbiAgICBjb25zdCB5QXhpcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdzdmcnKVxuICAgIHlBeGlzLmNsYXNzTGlzdC5hZGQoJ2NoYXJ0LXktYXhpcycpXG4gICAgeUF4aXMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ZlcnNpb24nLCAnMS4xJylcbiAgICB5QXhpcy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnaGVpZ2h0JywgYCR7dGhpcy5oZWlnaHR9cHhgKVxuICAgIHlBeGlzLnNldEF0dHJpYnV0ZU5TKG51bGwsICd2aWV3Qm94JywgYDAgLSR7dGhpcy5oZWlnaHR9IDUwICR7dGhpcy5oZWlnaHR9YClcbiAgICAvLyA6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6OjogLy9cblxuICAgIHJldHVybiBbZ3JhcGhTVkcsIHhBeGlzLCB5QXhpc11cbiAgfVxuXG4gIHBhcnNlRGF0YShjaGFydEFyZWEpIHtcbiAgICBjb25zdCBbZGF0YSwgbWluLCBtYXhdID0gWy4uLnRoaXMuZGF0YS50cmFkZXNdXG4gICAgICAubWFwKCh7IGNsb3NlX3RpbWVzdGFtcCwgY2xvc2VfcHJvZml0X3BjdCB9KSA9PiAoe1xuICAgICAgICBkYXRlOiBNYXRoLnJvdW5kKGNsb3NlX3RpbWVzdGFtcCAvIHJlbW92ZU1pbGxpcyksXG4gICAgICAgIHByb2ZpdDogY2xvc2VfcHJvZml0X3BjdCxcbiAgICAgIH0pKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEuZGF0ZSAtIGIuZGF0ZSlcbiAgICAgIC5yZWR1Y2UoXG4gICAgICAgIChhY2MsIGN1ciwgaSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHRlbXBDdW1tdWxhdGl2ZSA9IGlcbiAgICAgICAgICAgID8gYWNjWzBdW2kgLSAxXS5jdW11bGF0aXZlICsgY3VyLnByb2ZpdFxuICAgICAgICAgICAgOiBjdXIucHJvZml0XG4gICAgICAgICAgY29uc3QgdGVtcE9iaiA9IHsgLi4uY3VyLCBjdW11bGF0aXZlOiB0ZW1wQ3VtbXVsYXRpdmUgfVxuICAgICAgICAgIGNvbnN0IHRlbXBNaW4gPVxuICAgICAgICAgICAgYWNjWzFdICE9PSBudWxsID8gTWF0aC5taW4oYWNjWzFdLCB0ZW1wQ3VtbXVsYXRpdmUpIDogdGVtcEN1bW11bGF0aXZlXG4gICAgICAgICAgY29uc3QgdGVtcE1heCA9XG4gICAgICAgICAgICBhY2NbMl0gIT09IG51bGwgPyBNYXRoLm1heChhY2NbMl0sIHRlbXBDdW1tdWxhdGl2ZSkgOiB0ZW1wQ3VtbXVsYXRpdmVcbiAgICAgICAgICBjb25zdCB0ZW1wUmVzdWx0ID0gWy4uLmFjY1swXV1cbiAgICAgICAgICB0ZW1wUmVzdWx0LnB1c2godGVtcE9iailcbiAgICAgICAgICByZXR1cm4gW3RlbXBSZXN1bHQsIHRlbXBNaW4sIHRlbXBNYXhdXG4gICAgICAgIH0sXG4gICAgICAgIFtbXSwgbnVsbCwgbnVsbF1cbiAgICAgIClcbiAgICB0aGlzLnBhcnNlZERhdGEgPSB7XG4gICAgICBzdGFydDogZGF0YVswXS5kYXRlLFxuICAgICAgZW5kOiBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uZGF0ZSxcbiAgICAgIGRhdGEsXG4gICAgICBtaW4sXG4gICAgICBtYXgsXG4gICAgfVxuICAgIGNvbnN0IHsgd2lkdGggfSA9IGNoYXJ0QXJlYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IGhlaWdodCA9IGNoYXJ0QXJlYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgLSA0MFxuICAgIHRoaXMud2lkdGggPSB3aWR0aFxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0XG4gICAgY29uc3QgeCA9IHRoaXMucGFyc2VkRGF0YS5zdGFydCAqIHJlbW92ZU1pbGxpc1xuICAgIGNvbnN0IHhSYW5nZSA9ICh0aGlzLnBhcnNlZERhdGEuZW5kIC0gdGhpcy5wYXJzZWREYXRhLnN0YXJ0KSAqIHJlbW92ZU1pbGxpc1xuICAgIGNvbnN0IHhQb25kZXIgPSB0aGlzLndpZHRoIC8geFJhbmdlXG4gICAgdGhpcy54ID0geFxuICAgIHRoaXMueFJhbmdlID0geFJhbmdlXG4gICAgdGhpcy54UG9uZGVyID0geFBvbmRlclxuICAgIGNvbnN0IHlTcGFuID0gdGhpcy5wYXJzZWREYXRhLm1heCAtIHRoaXMucGFyc2VkRGF0YS5taW5cbiAgICBjb25zdCB5ID0gLXRoaXMucGFyc2VkRGF0YS5tYXggLSB2aWV3Qm94WVBhZGRpbmdUb3AgKiB5U3BhblxuICAgIGNvbnN0IHlSYW5nZSA9IHlTcGFuICogKDEgKyB2aWV3Qm94WVBhZGRpbmdUb3AgKyB2aWV3Qm94WVBhZGRpbmdCb3R0b20pXG4gICAgY29uc3QgeVBvbmRlciA9IHRoaXMuaGVpZ2h0IC8geVJhbmdlXG4gICAgdGhpcy55ID0geVxuICAgIHRoaXMueVJhbmdlID0geVJhbmdlXG4gICAgdGhpcy55UG9uZGVyID0geVBvbmRlclxuICB9XG5cbiAgcmVuZGVyQ2hhcnQoKSB7XG4gICAgY29uc3QgY2hhcnRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJylcbiAgICBjaGFydEFyZWEuY2xhc3NMaXN0LmFkZCgnY2hhcnQtYXJlYScpXG4gICAgdGhpcy5yb290RWxlbWVudC5pbm5lckhUTUwgPSAnJ1xuICAgIHRoaXMucm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hhcnRBcmVhKVxuICAgIHRoaXMucGFyc2VEYXRhKGNoYXJ0QXJlYSlcbiAgICBjb25zdCBbc3ZnLCB4QXhpcywgeUF4aXNdID0gdGhpcy5nZW5lcmF0ZVNWR3MoKVxuICAgIHRoaXMucm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQoeUF4aXMpXG4gICAgY2hhcnRBcmVhLmFwcGVuZENoaWxkKHN2ZylcbiAgICBjaGFydEFyZWEuYXBwZW5kQ2hpbGQoeEF4aXMpXG4gICAgdGhpcy5wb3B1bGF0ZVNWRyhzdmcsIHhBeGlzLCB5QXhpcywgY2hhcnRBcmVhKVxuICB9XG5cbiAgc2V0RGF0YShkYXRhUG9pbnRzKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YVBvaW50c1xuICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhPy50cmFkZXM/Lmxlbmd0aCkge1xuICAgICAgdGhpcy5yZW5kZXJDaGFydCgpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2ZpdEdyYXBoQ2hhcnRlclxuIiwiLyogZ2xvYmFsIG1vbWVudCAqL1xuXG5jb25zdCBuYW1lc3BhY2UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG5cbmV4cG9ydCBjbGFzcyBTaWduYWwge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHRoaXMucm9vdCA9IHByb3BzLnJvb3RcbiAgICB0aGlzLnRpbWVzdGFtcCA9IG51bGxcbiAgICB0aGlzLnNpZ25hbFR5cGUgPSAnJ1xuICAgIHRoaXMuaW50ZXJ2YWwgPSBudWxsXG4gIH1cblxuICBzZXREYXRhKHRpbWVzdGFtcCwgc2lnbmFsVHlwZSkge1xuICAgIHRoaXMudGltZXN0YW1wID0gdGltZXN0YW1wXG4gICAgdGhpcy5zaWduYWxUeXBlID0gc2lnbmFsVHlwZVxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcbiAgICB0aGlzLnJlbmRlcigpXG4gIH1cblxuICB1cGRhdGVUaW1lKHNwYW5FbGVtZW50KSB7XG4gICAgbGV0IGVsYXBzZWRTZWNvbmRzID0gTWF0aC5yb3VuZChcbiAgICAgIChtb21lbnQoRGF0ZS5ub3coKSkudmFsdWVPZigpIC0gdGhpcy50aW1lc3RhbXApIC8gMTAwMFxuICAgIClcbiAgICBsZXQgZWxhcHNlZE1pbnV0ZXMgPSBNYXRoLmZsb29yKGVsYXBzZWRTZWNvbmRzIC8gNjApXG4gICAgbGV0IGVsYXBzZWRIb3VycyA9IE1hdGguZmxvb3IoZWxhcHNlZE1pbnV0ZXMgLyA2MClcbiAgICBjb25zdCBlbGFwc2VkRGF5cyA9IE1hdGguZmxvb3IoZWxhcHNlZEhvdXJzIC8gMjQpXG4gICAgZWxhcHNlZFNlY29uZHMgLT0gZWxhcHNlZE1pbnV0ZXMgKiA2MFxuICAgIGVsYXBzZWRNaW51dGVzIC09IGVsYXBzZWRIb3VycyAqIDYwXG4gICAgZWxhcHNlZEhvdXJzIC09IGVsYXBzZWREYXlzICogMjRcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHNwYW5FbGVtZW50LmlubmVySFRNTCA9IGAke2VsYXBzZWREYXlzID8gYCR7ZWxhcHNlZERheXN9ZCBgIDogJyd9JHtcbiAgICAgIGVsYXBzZWRIb3VycyA/IGAke2VsYXBzZWRIb3Vyc31oIGAgOiAnJ1xuICAgIH0ke2VsYXBzZWRNaW51dGVzID8gYCR7ZWxhcHNlZE1pbnV0ZXN9bSBgIDogJyd9JHtcbiAgICAgIGVsYXBzZWRTZWNvbmRzID8gYCR7ZWxhcHNlZFNlY29uZHN9cyBgIDogJydcbiAgICB9IGFnb2BcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBjb2xvciA9IHRoaXMuc2lnbmFsVHlwZSA9PT0gJ0JVWScgPyAncG9zaXRpdmUnIDogJ25lZ2F0aXZlJ1xuXG4gICAgY29uc3Qgc2lnbmFsUGFuZWwgPSB0aGlzLnJvb3RcbiAgICBzaWduYWxQYW5lbC5pbm5lckhUTUwgPSAnJ1xuICAgIGNvbnN0IHNpZ25hbFNWRyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdzdmcnKVxuICAgIHNpZ25hbFNWRy5pZCA9ICdzaWduYWwtc3ZnJ1xuICAgIHNpZ25hbFNWRy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndmVyc2lvbicsICcxLjEnKVxuICAgIHNpZ25hbFNWRy5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJylcbiAgICBzaWduYWxTVkcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ZpZXdCb3gnLCAnLTE3LjUgLTc1IDEyNSAyNTAnKVxuICAgIHNpZ25hbFNWRy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAncHJlc2VydmVBc3BlY3RSYXRpbycsICdub25lJylcbiAgICBzaWduYWxQYW5lbC5hcHBlbmRDaGlsZChzaWduYWxTVkcpXG5cbiAgICBjb25zdCBzaWduYWxESVYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHNpZ25hbERJVi5pZCA9ICdzaWduYWwtZGl2J1xuICAgIGNvbnN0IHNpZ25hbFNQQU4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcbiAgICBzaWduYWxTUEFOLmlkID0gJ3NpZ25hbC1zcGFuJ1xuICAgIHNpZ25hbFNQQU4uaW5uZXJIVE1MID0gdGhpcy5zaWduYWxUeXBlXG4gICAgc2lnbmFsU1BBTi5jbGFzc0xpc3QuYWRkKGNvbG9yKVxuICAgIHNpZ25hbERJVi5hcHBlbmRDaGlsZChzaWduYWxTUEFOKVxuICAgIHRoaXMuc2lnbmFsVElNRSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuICAgIHRoaXMuc2lnbmFsVElNRS5pZCA9ICdzaWduYWwtdGltZSdcbiAgICB0aGlzLnNpZ25hbFRJTUUuY2xhc3NMaXN0LmFkZChjb2xvcilcbiAgICBzaWduYWxESVYuYXBwZW5kQ2hpbGQodGhpcy5zaWduYWxUSU1FKVxuICAgIHNpZ25hbFBhbmVsLmFwcGVuZENoaWxkKHNpZ25hbERJVilcblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLnVwZGF0ZVRpbWUodGhpcy5zaWduYWxUSU1FKSwgMTAwMClcblxuICAgIGNvbnN0IGJ1b3lTdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ3BhdGgnKVxuICAgIGJ1b3lTdGVtLmNsYXNzTGlzdC5hZGQoJ2J1b3ktc3RlbScpXG4gICAgYnVveVN0ZW0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCAnTSA0Ny41IDE1LjUgTCA0OCAyNCBMIDUyIDI0IEwgNTIuNSAxNS41IFonKVxuICAgIGJ1b3lTdGVtLmNsYXNzTGlzdC5hZGQoY29sb3IpXG4gICAgc2lnbmFsU1ZHLmFwcGVuZENoaWxkKGJ1b3lTdGVtKVxuICAgIGNvbnN0IGJ1b3lIZWFkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2NpcmNsZScpXG4gICAgYnVveUhlYWQuY2xhc3NMaXN0LmFkZCgnYnVveS1oZWFkJylcbiAgICBidW95SGVhZC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCA1MClcbiAgICBidW95SGVhZC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3knLCAxMClcbiAgICBidW95SGVhZC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAncicsIDYpXG4gICAgYnVveUhlYWQuY2xhc3NMaXN0LmFkZChjb2xvcilcbiAgICBzaWduYWxTVkcuYXBwZW5kQ2hpbGQoYnVveUhlYWQpXG4gICAgY29uc3QgYnVveUJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAncGF0aCcpXG4gICAgYnVveUJvZHkuY2xhc3NMaXN0LmFkZCgnYnVveS1ib2R5JylcbiAgICBidW95Qm9keS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnbWFzaycsICd1cmwoI2hvbGVzTWFzayknKVxuICAgIGJ1b3lCb2R5LnNldEF0dHJpYnV0ZU5TKFxuICAgICAgbnVsbCxcbiAgICAgICdkJyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICAnTSA0NSAyNCBMIDQzIDcxLjUgTCA0MCA3MS41IEwgNDAuNSA3NiBMIDM3IDc2IEwgMzcuNSA3MiBDIDM4IDY3LCAzMSA2NywgMzEuNSA3MiBMIDMyIDc2IEwgMjguNSA3NiBMIDMwLjUgOTEgTCA2OS41IDkxIEwgNzEuNSA3NiBMIDY4IDc2IEwgNjguNSA3MiBDIDY5IDY3LCA2MiA2NywgNjIuNSA3MiBMIDYzIDc2IEwgNTkuNSA3NiBMIDYwIDcxLjUgTCA1NyA3MS41IEwgNTUgMjQgWidcbiAgICApXG4gICAgYnVveUJvZHkuY2xhc3NMaXN0LmFkZChjb2xvcilcbiAgICBzaWduYWxTVkcuYXBwZW5kQ2hpbGQoYnVveUJvZHkpXG5cbiAgICAvLyA6Ojo6Ojo6Ojo6IEFOSU0gOjo6Ojo6Ojo6OiAvL1xuICAgIGNvbnN0IGNpcmNsZTEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnY2lyY2xlJylcbiAgICBjaXJjbGUxLmNsYXNzTGlzdC5hZGQoJ2J1b3ktY2lyY2xlJylcbiAgICBjaXJjbGUxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeCcsIDUwKVxuICAgIGNpcmNsZTEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2N5JywgMTApXG4gICAgY2lyY2xlMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAncicsIDYpXG4gICAgY2lyY2xlMS5jbGFzc0xpc3QuYWRkKGNvbG9yKVxuICAgIHNpZ25hbFNWRy5hcHBlbmRDaGlsZChjaXJjbGUxKVxuICAgIGNvbnN0IGFuaW1SMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsICdhbmltYXRlJylcbiAgICBhbmltUjEuaWQgPSAnYW5pbS1yLTEnXG4gICAgYW5pbVIxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdhdHRyaWJ1dGVOYW1lJywgJ3InKVxuICAgIGFuaW1SMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYXR0cmlidXRlVHlwZScsICdYTUwnKVxuICAgIGFuaW1SMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYmVnaW4nLCAnYW5pbS1yLTEuZW5kICsgM3MnKVxuICAgIGFuaW1SMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZHVyJywgJzMuNnMnKVxuICAgIGFuaW1SMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZnJvbScsICc2JylcbiAgICBhbmltUjEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RvJywgJzY0JylcbiAgICBjaXJjbGUxLmFwcGVuZENoaWxkKGFuaW1SMSlcbiAgICBjb25zdCBhbmltTzEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnYW5pbWF0ZScpXG4gICAgYW5pbU8xLmlkID0gJ2FuaW0tby0xJ1xuICAgIGFuaW1PMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYXR0cmlidXRlTmFtZScsICdvcGFjaXR5JylcbiAgICBhbmltTzEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZVR5cGUnLCAnWE1MJylcbiAgICBhbmltTzEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2JlZ2luJywgJ2FuaW0tci0xLmJlZ2luICsgMC4xcycpXG4gICAgYW5pbU8xLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkdXInLCAnM3MnKVxuICAgIGFuaW1PMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZnJvbScsICcwLjYnKVxuICAgIGFuaW1PMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndG8nLCAnMCcpXG4gICAgYW5pbU8xLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJ2ZyZWV6ZScpXG4gICAgY2lyY2xlMS5hcHBlbmRDaGlsZChhbmltTzEpXG5cbiAgICBjb25zdCBjaXJjbGUyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2NpcmNsZScpXG4gICAgY2lyY2xlMi5jbGFzc0xpc3QuYWRkKCdidW95LWNpcmNsZScpXG4gICAgY2lyY2xlMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCA1MClcbiAgICBjaXJjbGUyLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeScsIDEwKVxuICAgIGNpcmNsZTIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3InLCA2KVxuICAgIGNpcmNsZTIuY2xhc3NMaXN0LmFkZChjb2xvcilcbiAgICBzaWduYWxTVkcuYXBwZW5kQ2hpbGQoY2lyY2xlMilcbiAgICBjb25zdCBhbmltUjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnYW5pbWF0ZScpXG4gICAgYW5pbVIyLmlkID0gJ2FuaW0tci0yJ1xuICAgIGFuaW1SMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYXR0cmlidXRlTmFtZScsICdyJylcbiAgICBhbmltUjIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZVR5cGUnLCAnWE1MJylcbiAgICBhbmltUjIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2JlZ2luJywgJ2FuaW0tci0xLmJlZ2luICsgMXMnKVxuICAgIGFuaW1SMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZHVyJywgJzMuNnMnKVxuICAgIGFuaW1SMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZnJvbScsICc2JylcbiAgICBhbmltUjIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RvJywgJzY0JylcbiAgICBjaXJjbGUyLmFwcGVuZENoaWxkKGFuaW1SMilcbiAgICBjb25zdCBhbmltTzIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnYW5pbWF0ZScpXG4gICAgYW5pbU8yLmlkID0gJ2FuaW0tby0yJ1xuICAgIGFuaW1PMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYXR0cmlidXRlTmFtZScsICdvcGFjaXR5JylcbiAgICBhbmltTzIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZVR5cGUnLCAnWE1MJylcbiAgICBhbmltTzIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2JlZ2luJywgJ2FuaW0tci0yLmJlZ2luICsgMC4xcycpXG4gICAgYW5pbU8yLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkdXInLCAnM3MnKVxuICAgIGFuaW1PMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZnJvbScsICcwLjYnKVxuICAgIGFuaW1PMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndG8nLCAnMCcpXG4gICAgYW5pbU8yLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJ2ZyZWV6ZScpXG4gICAgY2lyY2xlMi5hcHBlbmRDaGlsZChhbmltTzIpXG5cbiAgICBjb25zdCBjaXJjbGUzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2NpcmNsZScpXG4gICAgY2lyY2xlMy5jbGFzc0xpc3QuYWRkKCdidW95LWNpcmNsZScpXG4gICAgY2lyY2xlMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCA1MClcbiAgICBjaXJjbGUzLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeScsIDEwKVxuICAgIGNpcmNsZTMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3InLCA2KVxuICAgIGNpcmNsZTMuY2xhc3NMaXN0LmFkZChjb2xvcilcbiAgICBzaWduYWxTVkcuYXBwZW5kQ2hpbGQoY2lyY2xlMylcbiAgICBjb25zdCBhbmltUjMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnYW5pbWF0ZScpXG4gICAgYW5pbVIzLmlkID0gJ2FuaW0tci0zJ1xuICAgIGFuaW1SMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYXR0cmlidXRlTmFtZScsICdyJylcbiAgICBhbmltUjMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZVR5cGUnLCAnWE1MJylcbiAgICBhbmltUjMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2JlZ2luJywgJ2FuaW0tci0yLmJlZ2luICsgMXMnKVxuICAgIGFuaW1SMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZHVyJywgJzMuNnMnKVxuICAgIGFuaW1SMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZnJvbScsICc2JylcbiAgICBhbmltUjMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RvJywgJzY0JylcbiAgICBjaXJjbGUzLmFwcGVuZENoaWxkKGFuaW1SMylcbiAgICBjb25zdCBhbmltTzMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnYW5pbWF0ZScpXG4gICAgYW5pbU8zLmlkID0gJ2FuaW0tby0zJ1xuICAgIGFuaW1PMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnYXR0cmlidXRlTmFtZScsICdvcGFjaXR5JylcbiAgICBhbmltTzMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2F0dHJpYnV0ZVR5cGUnLCAnWE1MJylcbiAgICBhbmltTzMuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2JlZ2luJywgJ2FuaW0tci0zLmJlZ2luICsgMC4xcycpXG4gICAgYW5pbU8zLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkdXInLCAnM3MnKVxuICAgIGFuaW1PMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZnJvbScsICcwLjYnKVxuICAgIGFuaW1PMy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndG8nLCAnMCcpXG4gICAgYW5pbU8zLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJ2ZyZWV6ZScpXG4gICAgY2lyY2xlMy5hcHBlbmRDaGlsZChhbmltTzMpXG5cbiAgICBpZiAodHlwZW9mIEluc3RhbGxUcmlnZ2VyID09PSAndW5kZWZpbmVkJykgYW5pbVIxLmJlZ2luRWxlbWVudCgpXG4gICAgLy8gZGV0ZWN0IEZpcmVmb3hcbiAgICBlbHNlXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYW5pbVIxLmJlZ2luRWxlbWVudCgpXG4gICAgICB9LCAwKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpZ25hbFxuIiwiLyogZ2xvYmFsIG1vbWVudCAqL1xuXG5pbXBvcnQgeyBGcmVxQ29ubmVjdG9yIH0gZnJvbSAnLi9GcmVxQ29ubmVjdG9yJ1xuXG5leHBvcnQgY29uc3QgZnJlcUFQSUNvbm5lY3RvciA9ICgoKSA9PiB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JykgcmV0dXJuIG5ldyBGcmVxQ29ubmVjdG9yKClcbiAgcmV0dXJuIHtcbiAgICBmZXRjaCxcbiAgfVxufSkoKVxuXG5leHBvcnQgY29uc3QgZXh0cmFjdFNpZ25hbERhdGEgPSBjYW5kbGVEYXRhID0+IHtcbiAgY29uc3Qgc2lnbmFscyA9IGNhbmRsZURhdGEuZGF0YVxuICAgIC5tYXAoZGF0YUFycmF5ID0+ICh7XG4gICAgICBkYXRlOiBtb21lbnQoZGF0YUFycmF5W2NhbmRsZURhdGEuY29sdW1ucy5pbmRleE9mKCdkYXRlJyldKS52YWx1ZU9mKCksXG4gICAgICBidXk6IGRhdGFBcnJheVtjYW5kbGVEYXRhLmNvbHVtbnMuaW5kZXhPZignYnV5JyldLFxuICAgICAgc2VsbDogZGF0YUFycmF5W2NhbmRsZURhdGEuY29sdW1ucy5pbmRleE9mKCdzZWxsJyldLFxuICAgIH0pKVxuICAgIC5maWx0ZXIoZSA9PiBlLmJ1eSB8fCBlLnNlbGwpXG4gICAgLm1hcChzaWduYWwgPT4gKHtcbiAgICAgIHRpbWVzdGFtcDogc2lnbmFsLmRhdGUsXG4gICAgICBzaWduYWxUeXBlOiBzaWduYWwuYnV5ID8gJ0JVWScgOiAnU0VMTCcsXG4gICAgfSkpXG4gIHJldHVybiBzaWduYWxzXG59XG5cbmV4cG9ydCBjb25zdCBldmVudFJlZ2lzdHJ5ID0gKCgpID0+IHtcbiAgY29uc3QgaGFuZGxlcnMgPSBuZXcgTWFwKClcbiAgcmV0dXJuIHtcbiAgICBhZGRFdmVudExpc3RlbmVyOiAoZWxlbWVudCwgZXZlbnQsIGZuKSA9PiB7XG4gICAgICBjb25zdCB0YWJsZSA9IGhhbmRsZXJzLmhhcyhlbGVtZW50KSA/IGhhbmRsZXJzLmdldChlbGVtZW50KSA6IHt9XG4gICAgICB0YWJsZVtldmVudF0gPSB0YWJsZVtldmVudF0gfHwgW11cbiAgICAgIHRhYmxlW2V2ZW50XS5wdXNoKGZuKVxuICAgICAgaGFuZGxlcnMuc2V0KGVsZW1lbnQsIHRhYmxlKVxuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbilcbiAgICB9LFxuICAgIGNsZWFyOiByb290ID0+IHtcbiAgICAgIDtbLi4ucm9vdC5jaGlsZHJlbl0uZm9yRWFjaChlID0+IHtcbiAgICAgICAgaWYgKGhhbmRsZXJzLmhhcyhlKSkge1xuICAgICAgICAgIGNvbnN0IHRhYmxlID0gaGFuZGxlcnMuZ2V0KGUpXG4gICAgICAgICAgT2JqZWN0LmtleXModGFibGUpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGFibGVbZXZlbnRdLmZvckVhY2goaGFuZGxlciA9PiB7XG4gICAgICAgICAgICAgIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICA7Wy4uLmUuY2hpbGRyZW5dLmZvckVhY2goZXZlbnRSZWdpc3RyeS5jbGVhcilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGlmIChoYW5kbGVycy5oYXMocm9vdCkpIHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBoYW5kbGVycy5nZXQocm9vdClcbiAgICAgICAgT2JqZWN0LmtleXModGFibGUpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICAgIHRhYmxlW2V2ZW50XS5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuICAgICAgICAgICAgcm9vdC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgfVxufSkoKVxuIiwiLyogZ2xvYmFsIGJyYWluYWx5emVkX3dwICovXG4vLyAjaWYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCdcbi8vIGltcG9ydCBjYW5kbGVEYXRhIGZyb20gJ19jYW5kbGVEYXRhLmpzb24nXG4vLyBpbXBvcnQgdHJhZGVEYXRhIGZyb20gJ190cmFkZURhdGEuanNvbidcbi8vICNlbmRpZlxuXG5pbXBvcnQgeyBmcmVxQVBJQ29ubmVjdG9yIH0gZnJvbSAnLi9oZWxwZXJzJ1xuXG5jb25zdCBJU19ERVYgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50J1xuXG4vLyBNT0NLRUQgREFUQVxuY29uc3Qgd2hpdGVsaXN0ID0gW1xuICAnQlRDL1VTRFQnLFxuICAnRVRIL1VTRFQnLFxuICAnTUJPWC9VU0RUJyxcbiAgJ0JVU0QvVVNEVCcsXG4gICdTSElCL1VTRFQnLFxuICAnU0FORC9VU0RUJyxcbiAgJ1NPTC9VU0RUJyxcbiAgJ1JFUS9VU0RUJyxcbiAgJ0xVTkEvVVNEVCcsXG4gICdNQVRJQy9VU0RUJyxcbiAgJ0dBTEEvVVNEVCcsXG4gICdNQU5BL1VTRFQnLFxuICAnQVZBWC9VU0RUJyxcbiAgJ1RMTS9VU0RUJyxcbiAgJ0FMSUNFL1VTRFQnLFxuICAnVFJYL1VTRFQnLFxuICAnQ1RLL1VTRFQnLFxuICAnRE9UL1VTRFQnLFxuICAnU0FOVE9TL1VTRFQnLFxuICAnWFJQL1VTRFQnLFxuXS5tYXAoZSA9PiAoe1xuICBuYW1lOiBlLFxuICBmcmVxdWVuY3k6ICc1bScsXG4gIGRlbGF5ZWQ6ICEhTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKSxcbn0pKVxuXG5jb25zdCBkaXNhYmxlZEZyZXF1ZW5jaWVzID0gW1xuICB7XG4gICAgbmFtZTogJzRoJyxcbiAgICB2YWx1ZTogMTAwMCAqIDYwICogNjAgKiA0LFxuICB9LFxuICB7XG4gICAgbmFtZTogJzEyaCcsXG4gICAgdmFsdWU6IDEwMDAgKiA2MCAqIDYwICogMTIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnMUQnLFxuICAgIHZhbHVlOiAxMDAwICogNjAgKiA2MCAqIDI0LFxuICB9LFxuXVxuY29uc3QgZnJlcXVlbmNpZXMgPSBbXG4gIHtcbiAgICBuYW1lOiAnNW0nLFxuICAgIHZhbHVlOiAzMDAwMCxcbiAgfSxcbiAgLi4uZGlzYWJsZWRGcmVxdWVuY2llcyxcbl1cblxuLy8gREFUQSBIQU5ETEVSU1xuZXhwb3J0IGNvbnN0IGZldGNoUGFpcmxpc3QgPSAoKSA9PiB7XG4gIGlmIChJU19ERVYpIHJldHVybiBQcm9taXNlLnJlc29sdmUod2hpdGVsaXN0KVxuICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keS5hcHBlbmQoJ2FjdGlvbicsICdwYWlycycpXG4gIHJldHVybiBmZXRjaChicmFpbmFseXplZF93cC5hamF4X3VybCwge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIGFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIH0sXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgbW9kZTogJ2NvcnMnLFxuICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxuICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxuICAgIHJlZGlyZWN0OiAnZm9sbG93JyxcbiAgICByZWZlcnJlclBvbGljeTogJ25vLXJlZmVycmVyJyxcbiAgICBib2R5LFxuICB9KVxuICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgIC50aGVuKFxuICAgICAgZGF0YSA9PiBkYXRhLFxuICAgICAgZXJyID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBNb3N0IGxpa2VseSB0aGlzIGVycm9yIG9jY3VyZWQgYmVjYXVzZSBzZXJ2ZXIgZGlkIG5vdCByZXNwb25kIHdpdGggSlNPTi4gTWVzc2FnZSB3YXMgJHtlcnIubWVzc2FnZX1gXG4gICAgICAgIClcbiAgICAgIH1cbiAgICApXG59XG5cbmV4cG9ydCBjb25zdCBmZXRjaEZyZXF1ZW5jaWVzID0gKCkgPT4ge1xuICBpZiAoSVNfREVWKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZyZXF1ZW5jaWVzKVxuICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keS5hcHBlbmQoJ2FjdGlvbicsICdmcmVxdWVuY2llcycpXG4gIHJldHVybiBmZXRjaChicmFpbmFseXplZF93cC5hamF4X3VybCwge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIGFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIH0sXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgbW9kZTogJ2NvcnMnLFxuICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxuICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxuICAgIHJlZGlyZWN0OiAnZm9sbG93JyxcbiAgICByZWZlcnJlclBvbGljeTogJ25vLXJlZmVycmVyJyxcbiAgICBib2R5LFxuICB9KVxuICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgIC50aGVuKFxuICAgICAgZGF0YSA9PiBbLi4uZGF0YSwgLi4uZGlzYWJsZWRGcmVxdWVuY2llc10sXG4gICAgICBlcnIgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYE1vc3QgbGlrZWx5IHRoaXMgZXJyb3Igb2NjdXJlZCBiZWNhdXNlIHNlcnZlciBkaWQgbm90IHJlc3BvbmQgd2l0aCBKU09OLiBNZXNzYWdlIHdhcyAke2Vyci5tZXNzYWdlfWBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIClcbn1cblxuZXhwb3J0IGNvbnN0IGZldGNoQ2FuZGxlRGF0YSA9IChuYW1lLCBmcmVxdWVuY3ksIGxpbWl0KSA9PiB7XG4gIGlmIChJU19ERVYpIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2FuZGxlRGF0YSlcblxuICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keS5hcHBlbmQoJ2FjdGlvbicsICdkYXRhJylcbiAgYm9keS5hcHBlbmQoJ3BhaXInLCBuYW1lKVxuICBib2R5LmFwcGVuZCgnZnJlcXVlbmN5JywgZnJlcXVlbmN5KVxuICBib2R5LmFwcGVuZCgnbGltaXQnLCBsaW1pdClcbiAgcmV0dXJuIGZldGNoKGJyYWluYWx5emVkX3dwLmFqYXhfdXJsLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBtb2RlOiAnY29ycycsXG4gICAgY2FjaGU6ICduby1jYWNoZScsXG4gICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgcmVkaXJlY3Q6ICdmb2xsb3cnLFxuICAgIHJlZmVycmVyUG9saWN5OiAnbm8tcmVmZXJyZXInLFxuICAgIGJvZHksXG4gIH0pXG4gICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgLnRoZW4oXG4gICAgICBkYXRhID0+IGRhdGEsXG4gICAgICBlcnIgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYE1vc3QgbGlrZWx5IHRoaXMgZXJyb3Igb2NjdXJlZCBiZWNhdXNlIHNlcnZlciBkaWQgbm90IHJlc3BvbmQgd2l0aCBKU09OLiBNZXNzYWdlIHdhcyAke2Vyci5tZXNzYWdlfWBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIClcbn1cblxuZXhwb3J0IGNvbnN0IGZldGNoVHJhZGVEYXRhID0gKCkgPT4ge1xuICBpZiAoSVNfREVWKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRyYWRlRGF0YSlcbiAgY29uc3QgYm9keSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHkuYXBwZW5kKCdhY3Rpb24nLCAndHJhZGVzJylcbiAgcmV0dXJuIGZldGNoKGJyYWluYWx5emVkX3dwLmFqYXhfdXJsLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBtb2RlOiAnY29ycycsXG4gICAgY2FjaGU6ICduby1jYWNoZScsXG4gICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgcmVkaXJlY3Q6ICdmb2xsb3cnLFxuICAgIHJlZmVycmVyUG9saWN5OiAnbm8tcmVmZXJyZXInLFxuICAgIGJvZHksXG4gIH0pXG4gICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgLnRoZW4oXG4gICAgICBkYXRhID0+IGRhdGEsXG4gICAgICBlcnIgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYE1vc3QgbGlrZWx5IHRoaXMgZXJyb3Igb2NjdXJlZCBiZWNhdXNlIHNlcnZlciBkaWQgbm90IHJlc3BvbmQgd2l0aCBKU09OLiBNZXNzYWdlIHdhcyAke2Vyci5tZXNzYWdlfWBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIClcbn1cblxuLy8gRlJPTlRFTkQgRlJFUSBEQVRBIFBVTEwgRk9SIFRFU1RJTkcgLSBFWEFNUExFXG4vLyBpZiAoSVNfREVWKSB7XG4vLyAgIGZyZXFBUElDb25uZWN0b3Jcbi8vICAgICAuZmV0Y2goJy9wYWlyX2NhbmRsZXM/cGFpcj1CVEMlMkZVU0RUJnRpbWVmcmFtZT01bSZsaW1pdD01MDAnKVxuLy8gICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuLy8gICAgIC50aGVuKGRhdGEgPT4ge1xuLy8gICAgICAgLy8gZG8gd2hhdGV2ZXIgeW91IG5lZWQgd2l0aCBkYXRhXG4vLyAgICAgfSlcbi8vIH1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1zaGFkb3cgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4vKiBlc2xpbnQtZGlzYWJsZSB1bnVzZWQtaW1wb3J0cy9uby11bnVzZWQtdmFycyAqL1xuXG5pbXBvcnQgJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSdcbmltcG9ydCAnLi9zdHlsZS5zY3NzJ1xuXG4vLyBpbXBvcnQgJy4vb2xkZmlsZXMvX21pdGFyJ1xuXG5pbXBvcnQgRGF0YUNoYXJ0ZXIgZnJvbSAnLi9kYXRhQ2hhcnRlcidcbmltcG9ydCBQcm9maXRDaGFydGVyIGZyb20gJy4vcHJvZml0Q2hhcnRlcidcbmltcG9ydCB7IFNpZ25hbCB9IGZyb20gJy4vc2lnbmFsJ1xuXG5pbXBvcnQge1xuICBmZXRjaFBhaXJsaXN0LFxuICBmZXRjaENhbmRsZURhdGEsXG4gIGZldGNoVHJhZGVEYXRhLFxuICBmZXRjaEZyZXF1ZW5jaWVzLFxufSBmcm9tICcuL2RhdGEtaGFuZGxlcnMnXG5pbXBvcnQgeyBleHRyYWN0U2lnbmFsRGF0YSwgZXZlbnRSZWdpc3RyeSB9IGZyb20gJy4vaGVscGVycydcblxuY29uc3QgQ0FORExFX0RBVEFfTElNSVQgPSA1MDBcblxuY2xhc3MgU2lnbmFsc0FwcCB7XG4gIGNvbnN0cnVjdG9yKGh0bWxFbGVtZW50KSB7XG4gICAgaWYgKCFodG1sRWxlbWVudCkgdGhyb3cgRXJyb3IoJ05vIHJvb3QgZWxlbWVudCBwYXNzZWQgdG8gdGhlIEFwcCcpXG5cbiAgICB0aGlzLnJvb3RIVE1MID0gaHRtbEVsZW1lbnRcbiAgICB0aGlzLmRhdGFDaGFydGVyID0gbnVsbFxuICAgIHRoaXMucHJvZml0Q2hhcnRlciA9IG51bGxcbiAgICB0aGlzLmxhdGVzdFBvc2l0aXZlID0gbnVsbFxuICAgIHRoaXMubGF0ZXN0TmVnYXRpdmUgPSBudWxsXG5cbiAgICB0aGlzLnBhaXJMaXN0ID0gW11cbiAgICB0aGlzLmZyZXF1ZW5jeUxpc3QgPSBbXVxuICAgIHRoaXMuYWN0aXZlUGFpciA9IG51bGxcbiAgICB0aGlzLmFjdGl2ZUZyZXF1ZW5jeSA9IG51bGxcblxuICAgIHRoaXMubG9hZGluZ01ldGEgPSBmYWxzZVxuICAgIHRoaXMubWV0YUZldGNoRXJyb3IgPSBudWxsXG5cbiAgICB0aGlzLmxvYWRpbmdEYXRhID0gZmFsc2VcbiAgICB0aGlzLmRhdGFGZXRjaEVycm9yID0gbnVsbFxuXG4gICAgdGhpcy5pbml0aWFsaXplKClcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5yb290SFRNTC5pbm5lckhUTUwgPSBgXG4gICAgPGRpdiBpZD1cInNpZ25hbHNcIj5cbiAgICAgICAgPGRpdiBpZD1cInNpZ25hbC1wYW5lbFwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJzaWduYWwtaGVhZGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGlkPVwic2lnbmFsLW5hbWVcIj5CVEMvVVNEVDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBpZD1cImZyZXEtbGlua1wiPlxuICAgICAgICAgICAgICA8c3Bhbj5WaWV3IGluIEZyZXFVSTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4+KGNvbWluZyBzb29uKTwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgaWQ9XCJsYXRlc3Qtc2lnbmFsc1wiPlxuICAgICAgICAgICAgPGRpdiBpZD1cImxhdGVzdC1wb3NpdGl2ZVwiPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBpZD1cImxhdGVzdC1uZWdhdGl2ZVwiPjwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cImRhdGEtY2hhcnQtd3JhcHBlclwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwicHJvZml0LWNoYXJ0LXdyYXBwZXJcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBpZD1cInNpZ25hbC1jb250cm9sc1wiPlxuICAgICAgPC9kaXY+XG4gICAgYFxuICAgIHRoaXMuZGF0YUNoYXJ0ZXIgPSBuZXcgRGF0YUNoYXJ0ZXIoe1xuICAgICAgcm9vdDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGEtY2hhcnQtd3JhcHBlcicpLFxuICAgIH0pXG4gICAgdGhpcy5wcm9maXRDaGFydGVyID0gbmV3IFByb2ZpdENoYXJ0ZXIoe1xuICAgICAgcm9vdDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpdC1jaGFydC13cmFwcGVyJyksXG4gICAgfSlcbiAgICB0aGlzLmxhdGVzdFBvc2l0aXZlID0gbmV3IFNpZ25hbCh7XG4gICAgICByb290OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGF0ZXN0LXBvc2l0aXZlJyksXG4gICAgfSlcbiAgICB0aGlzLmxhdGVzdE5lZ2F0aXZlID0gbmV3IFNpZ25hbCh7XG4gICAgICByb290OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGF0ZXN0LW5lZ2F0aXZlJyksXG4gICAgfSlcblxuICAgIHRoaXMubG9hZGluZ01ldGEgPSB0cnVlXG4gICAgUHJvbWlzZS5hbGwoW2ZldGNoUGFpcmxpc3QoKSwgZmV0Y2hGcmVxdWVuY2llcygpXSlcbiAgICAgIC50aGVuKChbcGFpcnMsIGZyZXF1ZW5jaWVzXSkgPT4ge1xuICAgICAgICB0aGlzLnNldEZyZXF1ZW5jaWVzKGZyZXF1ZW5jaWVzKVxuICAgICAgICB0aGlzLnNldFBhaXJzKHBhaXJzKVxuICAgICAgICB0aGlzLmxvYWRpbmdNZXRhID0gZmFsc2VcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB0aGlzLnJlbmRlckNvbnRyb2xzKCkpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICB0aGlzLm1ldGFFcnJvciA9IGVycm9yXG4gICAgICAgIHRoaXMubG9hZGluZ01ldGEgPSBmYWxzZVxuICAgICAgfSlcbiAgICAvLyBmZXRjaENhbmRsZURhdGEoKS50aGVuKGRhdGEgPT4gdGhpcy5kYXRhQ2hhcnRlci5zZXREYXRhKGRhdGEpKVxuICAgIC8vIGZldGNoVHJhZGVEYXRhKCkudGhlbihkYXRhID0+IHRoaXMucHJvZml0Q2hhcnRlci5zZXRQcm9maXREYXRhKGRhdGEpKVxuICB9XG5cbiAgcmVuZGVyQ29udHJvbHMoKSB7XG4gICAgY29uc3Qgcm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaWduYWwtY29udHJvbHMnKVxuICAgIGV2ZW50UmVnaXN0cnkuY2xlYXIocm9vdClcbiAgICByb290LmlubmVySFRNTCA9ICcnXG5cbiAgICBjb25zdCBmcmVxdWVuY3lQaWNrZXJDb250cm9scyA9IHRoaXMuZnJlcXVlbmN5TGlzdC5tYXAoZnJlcXVlbmN5ID0+IHtcbiAgICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGZyZXF1ZW5jeVxuICAgICAgLy8gQ09OVFJPTCBIVE1MXG4gICAgICBjb25zdCBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdCVVRUT04nKVxuICAgICAgYnRuLnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKVxuICAgICAgYnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCBuYW1lICE9PSAnNW0nKVxuICAgICAgYnRuLmlubmVySFRNTCA9IG5hbWVcbiAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdmcmVxLWNvbnRyb2wnKVxuICAgICAgYnRuLmRhdGFzZXQuaWQgPSBuYW1lXG4gICAgICBidG4uZGF0YXNldC5wZXJpb2QgPSB2YWx1ZVxuXG4gICAgICBjb25zdCBhY3RpdmVGcmVxdWVuY3kgPSB0aGlzLnBhaXJMaXN0LmZpbmQoXG4gICAgICAgIGUgPT4gZS5uYW1lID09PSB0aGlzLmFjdGl2ZUZyZXF1ZW5jeVxuICAgICAgKVxuICAgICAgICA/IHRoaXMuYWN0aXZlRnJlcXVlbmN5XG4gICAgICAgIDogdGhpcy5mcmVxdWVuY3lMaXN0WzBdLm5hbWVcbiAgICAgIGlmIChuYW1lID09PSBhY3RpdmVGcmVxdWVuY3kpIHtcbiAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICAgIGJ0bi5jbGljaygpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidG5cbiAgICB9KVxuXG4gICAgY29uc3QgcGFpclBpY2tlckNvbnRyb2xzID0gdGhpcy5wYWlyTGlzdFxuICAgICAgLmZpbHRlcihlID0+IGUuZnJlcXVlbmN5ID09PSB0aGlzLmFjdGl2ZUZyZXF1ZW5jeSlcbiAgICAgIC5tYXAoZSA9PiB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgZnJlcXVlbmN5LCBkZWxheWVkIH0gPSBlXG4gICAgICAgIC8vIENPTlRST0wgSFRNTFxuICAgICAgICBjb25zdCBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdCVVRUT04nKVxuICAgICAgICBidG4uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpXG4gICAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdwYWlyLWNvbnRyb2wnKVxuICAgICAgICBidG4uZGF0YXNldC5pZCA9IG5hbWVcblxuICAgICAgICAvLyBOQU1FIEhUTUxcbiAgICAgICAgY29uc3QgbmFtZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdTUEFOJylcbiAgICAgICAgbmFtZVNwYW4uaW5uZXJIVE1MID0gbmFtZVxuICAgICAgICBidG4uYXBwZW5kQ2hpbGQobmFtZVNwYW4pXG5cbiAgICAgICAgaWYgKGRlbGF5ZWQpIHtcbiAgICAgICAgICAvLyBERUxBWUVEIEhUTUwgQURESVRJT05cbiAgICAgICAgICBjb25zdCBkZWxheWVkU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKVxuICAgICAgICAgIGRlbGF5ZWRTcGFuLmlubmVySFRNTCA9ICcgKGRlbGF5ZWQpJ1xuICAgICAgICAgIGJ0bi5hcHBlbmRDaGlsZChkZWxheWVkU3BhbilcblxuICAgICAgICAgIC8vIFRPT0xUSVAgSFRNTFxuICAgICAgICAgIGNvbnN0IHRvb2x0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKVxuICAgICAgICAgIHRvb2x0aXAuY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpXG4gICAgICAgICAgdG9vbHRpcC5pbm5lckhUTUwgPSAnWW91IGFyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGlzIHNpZ25hbC4nXG4gICAgICAgICAgYnRuLmFwcGVuZENoaWxkKHRvb2x0aXApXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYW5kbGVyID0gZXZlbnQgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZGluZ0RhdGEgPSB0cnVlXG4gICAgICAgICAgdGhpcy5kYXRhRmV0Y2hFcnJvciA9IG51bGxcbiAgICAgICAgICBpZiAodGhpcy5hY3RpdmVQYWlyID09PSBuYW1lICYmIHRoaXMuYWN0aXZlRnJlcXVlbmN5ID09PSBmcmVxdWVuY3kpIHJldHVyblxuICAgICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIGZldGNoQ2FuZGxlRGF0YShuYW1lLCBmcmVxdWVuY3ksIENBTkRMRV9EQVRBX0xJTUlUKSxcbiAgICAgICAgICAgIGZldGNoVHJhZGVEYXRhKCksXG4gICAgICAgICAgXSlcbiAgICAgICAgICAgIC50aGVuKChbY2FuZGxlRGF0YSwgdHJhZGVEYXRhXSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNpZ25hbERhdGEoY2FuZGxlRGF0YSlcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9maXREYXRhKHRyYWRlRGF0YSlcbiAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nRGF0YSA9IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nRGF0YSA9IGZhbHNlXG4gICAgICAgICAgICAgIHRoaXMuZGF0YUZldGNoRXJyb3IgPSBlcnJvclxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLmFjdGl2ZVBhaXIgPSBuYW1lXG4gICAgICAgICAgdGhpcy5yZW5kZXJBY3RpdmVDbGFzc2VzKClcbiAgICAgICAgfVxuICAgICAgICBldmVudFJlZ2lzdHJ5LmFkZEV2ZW50TGlzdGVuZXIoYnRuLCAnY2xpY2snLCBoYW5kbGVyKVxuXG4gICAgICAgIGNvbnN0IGFjdGl2ZVBhaXIgPSB0aGlzLnBhaXJMaXN0LmZpbmQoZSA9PiBlLm5hbWUgPT09IHRoaXMuYWN0aXZlUGFpcilcbiAgICAgICAgICA/IHRoaXMuYWN0aXZlUGFpclxuICAgICAgICAgIDogdGhpcy5wYWlyTGlzdFswXS5uYW1lXG4gICAgICAgIGlmIChuYW1lID09PSBhY3RpdmVQYWlyKSB7XG4gICAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICAgICAgYnRuLmNsaWNrKClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBidG5cbiAgICAgIH0pXG5cbiAgICBjb25zdCBmcmVxdWVuY3lHcnAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKVxuICAgIGZyZXF1ZW5jeUdycC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2ZyZXF1ZW5jeS1jb250cm9scycpXG4gICAgZnJlcXVlbmN5UGlja2VyQ29udHJvbHMuZm9yRWFjaChjb250cm9sID0+IGZyZXF1ZW5jeUdycC5hcHBlbmRDaGlsZChjb250cm9sKSlcblxuICAgIHJvb3QuYXBwZW5kQ2hpbGQoZnJlcXVlbmN5R3JwKVxuICAgIHBhaXJQaWNrZXJDb250cm9scy5mb3JFYWNoKGNvbnRyb2wgPT4gcm9vdC5hcHBlbmRDaGlsZChjb250cm9sKSlcbiAgfVxuXG4gIHNldFBhaXJzKHBhaXJzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFpcnMpICYmIHBhaXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5wYWlyTGlzdCA9IHBhaXJzXG4gICAgfVxuICB9XG5cbiAgc2V0RnJlcXVlbmNpZXMoZnJlcXVlbmNpZXMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmcmVxdWVuY2llcykgJiYgZnJlcXVlbmNpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmZyZXF1ZW5jeUxpc3QgPSBmcmVxdWVuY2llc1xuICAgICAgdGhpcy5hY3RpdmVGcmVxdWVuY3kgPSBmcmVxdWVuY2llc1swXS5uYW1lXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3NldEZyZXF1ZW5jaWVzIG1ldGhvZCBtdXN0IHJlY2lldmUgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCBvbmUgZnJlcXVlbmN5LidcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICB1cGRhdGVTaWduYWxEYXRhKGRhdGEpIHtcbiAgICBjb25zdCBzaWduYWxzID0gZXh0cmFjdFNpZ25hbERhdGEoZGF0YSlcbiAgICBjb25zdCBsYXN0U2lnbmFsID0gc2lnbmFsc1tzaWduYWxzLmxlbmd0aCAtIDFdXG4gICAgdGhpcy5kYXRhQ2hhcnRlci5zZXREYXRhKGRhdGEpXG4gICAgdGhpcy5sYXRlc3RQb3NpdGl2ZS5zZXREYXRhKGxhc3RTaWduYWwudGltZXN0YW1wLCBsYXN0U2lnbmFsLnNpZ25hbFR5cGUpXG4gICAgdGhpcy5sYXRlc3ROZWdhdGl2ZS5zZXREYXRhKGxhc3RTaWduYWwudGltZXN0YW1wLCBsYXN0U2lnbmFsLnNpZ25hbFR5cGUpXG4gIH1cblxuICB1cGRhdGVQcm9maXREYXRhKGRhdGEpIHtcbiAgICB0aGlzLnByb2ZpdENoYXJ0ZXIuc2V0RGF0YShkYXRhKVxuICB9XG5cbiAgcmVuZGVyQWN0aXZlQ2xhc3NlcygpIHtcbiAgICA7Wy4uLnRoaXMucm9vdEhUTUwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncGFpci1jb250cm9sJyldLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICAgIGlmIChlbC5kYXRhc2V0LmlkID09PSB0aGlzLmFjdGl2ZVBhaXIpIGVsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgfSlcbiAgICA7Wy4uLnRoaXMucm9vdEhUTUwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZnJlcS1jb250cm9sJyldLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICAgIGlmIChlbC5kYXRhc2V0LmlkID09PSB0aGlzLmFjdGl2ZUZyZXF1ZW5jeSkgZWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICB9KVxuICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBTaWduYWxzQXBwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaWduYWxzLXJvb3QnKSlcbiJdLCJzb3VyY2VSb290IjoiIn0=
!function(){var t={666:function(t){var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",o=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var a=e&&e.prototype instanceof b?e:b,i=Object.create(a.prototype),o=new M(r||[]);return i._invoke=function(t,e,n){var r=d;return function(a,i){if(r===p)throw new Error("Generator is already running");if(r===m){if("throw"===a)throw i;return O()}for(n.method=a,n.arg=i;;){var o=n.delegate;if(o){var l=x(o,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=c(t,e,n);if("normal"===s.type){if(r=n.done?m:h,s.arg===f)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=m,n.method="throw",n.arg=s.arg)}}}(t,n,o),i}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var d="suspendedStart",h="suspendedYield",p="executing",m="completed",f={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var S=Object.getPrototypeOf,N=S&&S(S(D([])));N&&N!==n&&r.call(N,i)&&(y=N);var A=g.prototype=b.prototype=Object.create(y);function w(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function n(a,i,o,l){var s=c(t[a],t,i);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?e.resolve(d.__await).then((function(t){n("next",t,o,l)}),(function(t){n("throw",t,o,l)})):e.resolve(d).then((function(t){u.value=t,o(u)}),(function(t){return n("throw",t,o,l)}))}l(s.arg)}var a;this._invoke=function(t,r){function i(){return new e((function(e,a){n(t,r,e,a)}))}return a=a?a.then(i,i):i()}}function x(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,x(t,n),"throw"===n.method))return f;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var a=c(r,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,f;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function D(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}return{next:O}}function O(){return{value:e,done:!0}}return v.prototype=g,s(A,"constructor",g),s(g,"constructor",v),v.displayName=s(g,l,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,s(t,l,"GeneratorFunction")),t.prototype=Object.create(A),t},t.awrap=function(t){return{__await:t}},w(L.prototype),s(L.prototype,o,(function(){return this})),t.AsyncIterator=L,t.async=function(e,n,r,a,i){void 0===i&&(i=Promise);var o=new L(u(e,n,r,a),i);return t.isGeneratorFunction(n)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},w(A),s(A,l,"Generator"),s(A,i,(function(){return this})),s(A,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=D,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],l=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var s=r.call(o,"catchLoc"),u=r.call(o,"finallyLoc");if(s&&u){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var a=r.arg;C(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:D(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),f}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};!function(){"use strict";function t(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function e(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=t[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(t,e)||l(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||l(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.r(r),n(666);var c="http://www.w3.org/2000/svg",d=1e3,h=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.rootElement=e.root,this.data=null,this.sampleCount=null,this.parsedData=null,this.width=1,this.height=1,this.lastPoint=null,this.x=null,this.xRange=null,this.xPonder=1,this.y=null,this.yRange=null,this.yPonder=1}var n,r;return n=t,(r=[{key:"createSignalPath",value:function(t,e,n,r){var a=t-8,i=e-8+16*("up"===n?1:-1),o=document.createElementNS(c,"g");o.classList.add("signal");var l=document.createElementNS(c,"circle");l.classList.add("signal-ring"),l.setAttributeNS(null,"cx",50),l.setAttributeNS(null,"cy",50),l.setAttributeNS(null,"r",60),l.setAttributeNS(null,"shape-rendering","geometricPrecision"),o.appendChild(l);var s=document.createElementNS(c,"mask");s.id="holesMask";var u=document.createElementNS(c,"rect");u.classList.add("mask-white"),u.setAttributeNS(null,"x",0),u.setAttributeNS(null,"y",0),u.setAttributeNS(null,"width",100),u.setAttributeNS(null,"height",100),u.setAttributeNS(null,"shape-rendering","geometricPrecision"),s.appendChild(u);var d=document.createElementNS(c,"circle");d.classList.add("mask-black"),d.setAttributeNS(null,"cx",34.5),d.setAttributeNS(null,"cy",71.5),d.setAttributeNS(null,"r",1.5),d.setAttributeNS(null,"shape-rendering","geometricPrecision"),s.appendChild(d);var h=document.createElementNS(c,"circle");h.classList.add("mask-black"),h.setAttributeNS(null,"cx",65.5),h.setAttributeNS(null,"cy",71.5),h.setAttributeNS(null,"r",1.5),h.setAttributeNS(null,"shape-rendering","geometricPrecision"),s.appendChild(h),o.appendChild(s);var p=document.createElementNS(c,"path");p.classList.add("buoy-stem"),p.setAttributeNS(null,"d","M 47.5 15.5 L 48 24 L 52 24 L 52.5 15.5 Z"),p.classList.add(r),p.setAttributeNS(null,"shape-rendering","geometricPrecision"),o.appendChild(p);var m=document.createElementNS(c,"circle");m.classList.add("buoy-head"),m.setAttributeNS(null,"cx",50),m.setAttributeNS(null,"cy",10),m.setAttributeNS(null,"r",6),m.setAttributeNS(null,"shape-rendering","geometricPrecision"),m.classList.add(r),o.appendChild(m);var f=document.createElementNS(c,"path");f.classList.add("buoy-body"),f.setAttributeNS(null,"mask","url(#holesMask)"),f.setAttributeNS(null,"d","M 45 24 L 43 71.5 L 40 71.5 L 40.5 76 L 37 76 L 37.5 72 C 38 67, 31 67, 31.5 72 L 32 76 L 28.5 76 L 30.5 91 L 69.5 91 L 71.5 76 L 68 76 L 68.5 72 C 69 67, 62 67, 62.5 72 L 63 76 L 59.5 76 L 60 71.5 L 57 71.5 L 55 24 Z"),f.setAttributeNS(null,"shape-rendering","geometricPrecision"),f.classList.add(r),o.setAttributeNS(null,"transform","translate(".concat(a," ").concat(i,") scale(").concat(.16," ").concat(.16,")")),o.appendChild(f);var b=document.createElementNS(c,"circle");b.classList.add("buoy-circle"),b.setAttributeNS(null,"cx",50),b.setAttributeNS(null,"cy",10),b.setAttributeNS(null,"r",6),b.setAttributeNS(null,"shape-rendering","geometricPrecision"),b.classList.add(r),o.appendChild(b);var v=document.createElementNS(c,"animate");v.id="anim-r-1",v.setAttributeNS(null,"attributeName","r"),v.setAttributeNS(null,"attributeType","XML"),v.setAttributeNS(null,"begin","anim-r-1.end + 3s"),v.setAttributeNS(null,"dur","3.6s"),v.setAttributeNS(null,"from","6"),v.setAttributeNS(null,"to","128"),b.appendChild(v);var g=document.createElementNS(c,"animate");g.id="anim-o-1",g.setAttributeNS(null,"attributeName","opacity"),g.setAttributeNS(null,"attributeType","XML"),g.setAttributeNS(null,"begin","anim-r-1.begin + 0.1s"),g.setAttributeNS(null,"dur","3s"),g.setAttributeNS(null,"from","0.6"),g.setAttributeNS(null,"to","0"),g.setAttributeNS(null,"fill","freeze"),b.appendChild(g);var y=document.createElementNS(c,"circle");y.classList.add("buoy-circle"),y.setAttributeNS(null,"cx",50),y.setAttributeNS(null,"cy",10),y.setAttributeNS(null,"r",6),y.setAttributeNS(null,"shape-rendering","geometricPrecision"),y.classList.add(r),o.appendChild(y);var S=document.createElementNS(c,"animate");S.id="anim-r-2",S.setAttributeNS(null,"attributeName","r"),S.setAttributeNS(null,"attributeType","XML"),S.setAttributeNS(null,"begin","anim-r-1.begin + 1s"),S.setAttributeNS(null,"dur","3.6s"),S.setAttributeNS(null,"from","6"),S.setAttributeNS(null,"to","128"),y.appendChild(S);var N=document.createElementNS(c,"animate");N.id="anim-o-2",N.setAttributeNS(null,"attributeName","opacity"),N.setAttributeNS(null,"attributeType","XML"),N.setAttributeNS(null,"begin","anim-r-2.begin + 0.1s"),N.setAttributeNS(null,"dur","3s"),N.setAttributeNS(null,"from","0.6"),N.setAttributeNS(null,"to","0"),N.setAttributeNS(null,"fill","freeze"),y.appendChild(N);var A=document.createElementNS(c,"circle");A.classList.add("buoy-circle"),A.setAttributeNS(null,"cx",50),A.setAttributeNS(null,"cy",10),A.setAttributeNS(null,"r",6),A.setAttributeNS(null,"shape-rendering","geometricPrecision"),A.classList.add(r),o.appendChild(A);var w=document.createElementNS(c,"animate");w.id="anim-r-3",w.setAttributeNS(null,"attributeName","r"),w.setAttributeNS(null,"attributeType","XML"),w.setAttributeNS(null,"begin","anim-r-2.begin + 1s"),w.setAttributeNS(null,"dur","3.6s"),w.setAttributeNS(null,"from","6"),w.setAttributeNS(null,"to","128"),A.appendChild(w);var L=document.createElementNS(c,"animate");return L.id="anim-o-3",L.setAttributeNS(null,"attributeName","opacity"),L.setAttributeNS(null,"attributeType","XML"),L.setAttributeNS(null,"begin","anim-r-3.begin + 0.1s"),L.setAttributeNS(null,"dur","3s"),L.setAttributeNS(null,"from","0.6"),L.setAttributeNS(null,"to","0"),L.setAttributeNS(null,"fill","freeze"),A.appendChild(L),"undefined"==typeof InstallTrigger?v.beginElement():setTimeout((function(){v.beginElement()}),0),o}},{key:"generateSignals",value:function(t){var e=this,n=document.createElementNS(c,"defs");t.appendChild(n);var r=document.createElementNS(c,"linearGradient");r.id="signal-gradient-positive",n.appendChild(r);var a=document.createElementNS(c,"stop");a.classList.add("signal-gradient-stop"),a.classList.add("positive"),a.setAttributeNS(null,"offset","0%"),r.appendChild(a);var i=document.createElementNS(c,"stop");i.classList.add("signal-gradient-stop"),i.setAttributeNS(null,"offset","100%"),r.appendChild(i);var o=document.createElementNS(c,"linearGradient");o.id="signal-gradient-negative",n.appendChild(o);var l=document.createElementNS(c,"stop");l.classList.add("signal-gradient-stop"),l.classList.add("negative"),l.setAttributeNS(null,"offset","0%"),o.appendChild(l);var s=document.createElementNS(c,"stop");s.classList.add("signal-gradient-stop"),s.setAttributeNS(null,"offset","100%"),o.appendChild(s),this.parsedData.signalData.forEach((function(n,r){var a=n.x,i=n.buy,o=n.pos,l=n.direction,s=(a+.5)*(e.width/e.sampleCount),u=-(e.height+(o+e.y)*e.yPonder),d=e.createSignalPath(s,u,l,"".concat(i>0?"positive":"negative")),h=document.createElementNS(c,"line");h.classList.add("signal-line"),h.setAttributeNS(null,"x1",s),h.setAttributeNS(null,"x2",s),h.setAttributeNS(null,"y1",-e.height),h.setAttributeNS(null,"y2",0),h.setAttributeNS(null,"stroke-width","1px"),h.setAttributeNS(null,"shape-rendering","geometricPrecision"),h.classList.add("".concat(i>0?"positive":"negative")),t.appendChild(h);var p=e.width,m=a*(e.width/e.sampleCount);if(m<e.width){r<e.parsedData.signalData.length-1&&(p=e.parsedData.signalData[r+1].x*(e.width/e.sampleCount));var f=document.createElementNS(c,"rect");f.classList.add("signal-area"),f.setAttributeNS(null,"x",s),f.setAttributeNS(null,"y",-e.height),f.setAttributeNS(null,"width",p-m),f.setAttributeNS(null,"height",e.height),f.setAttributeNS(null,"fill","url(#signal-gradient-".concat(i>0?"positive":"negative",")")),f.setAttributeNS(null,"shape-rendering","geometricPrecision"),t.appendChild(f)}t.appendChild(d)}))}},{key:"generateVolumes",value:function(t){var e=this,n=this.parsedData.volumeData.reduce((function(t,e){var n=e.volume;return Math.max(t,n)}),0);this.parsedData.volumeData.forEach((function(r,a){var i=r.volume,o=r.color;if(i){var l=i/n*e.height*(.3/(1.1+.3)),s=document.createElementNS(c,"rect");s.classList.add("volume"),s.setAttributeNS(null,"x",a*(e.width/e.sampleCount)+2),s.setAttributeNS(null,"y",-l),s.setAttributeNS(null,"width",4),s.setAttributeNS(null,"height",l),s.setAttributeNS(null,"shape-rendering","crispEdges"),s.classList.add("".concat(o)),t.appendChild(s)}}))}},{key:"generateCandles",value:function(t){var e=this;this.parsedData.candleData.forEach((function(n,r){var a=n.close-n.open,i=Math.abs(a)*e.yPonder,o=document.createElementNS(c,"rect");o.classList.add("candle-body"),o.setAttributeNS(null,"x",r*(e.width/e.sampleCount));var l=e.height+(Math.max(n.close,n.open)+e.y)*e.yPonder;o.setAttributeNS(null,"y",-l),o.setAttributeNS(null,"width",8),o.setAttributeNS(null,"height",i),o.setAttributeNS(null,"shape-rendering","crispEdges");var s=e.height+(n.high+e.y)*e.yPonder,u=e.height+(n.low+e.y)*e.yPonder,d=document.createElementNS(c,"line");d.classList.add("candle-wick"),d.setAttributeNS(null,"x1",(.5+r)*(e.width/e.sampleCount)),d.setAttributeNS(null,"x2",(.5+r)*(e.width/e.sampleCount)),d.setAttributeNS(null,"y1",-s),d.setAttributeNS(null,"y2",-u),d.setAttributeNS(null,"stroke-width","1px"),d.setAttributeNS(null,"shape-rendering","geometricPrecision"),a&&(o.classList.add("".concat(a>0?"positive":"negative")),d.classList.add("".concat(a>0?"positive":"negative"))),t.appendChild(o),t.appendChild(d)}))}},{key:"generateGrid",value:function(t,e,n){var r=this,a=i(function(){var t,e=64/r.width*r.xRange,n=1,a=1,i="",l=e,s=Math.log10(e);if(s<3){n*=Math.pow(10,Math.floor(s)),i="millisecond";for(var u=[2.5,5,10],c=[].concat(u).map((function(t){return t*n})).filter((function(t){return!(t-Math.trunc(t))})),d=0;c[d]<=e;)d++;l=c[d],a=u[d]*Math.pow(10,Math.floor(s))}else{var h=(t=e/(n*=1e3),60,Math.log(t)/Math.log(60));if(h<2){n*=Math.pow(60,Math.floor(h)),i=h<1?"second":"minute";for(var p=[5,10,30,60],m=[].concat(p).map((function(t){return t*n})),f=0;m[f]<=e;)f++;l=m[f],a=p[f]}else if(e<12*(n*=3600)){i="hour";for(var b=[3,6,12],v=[].concat(b).map((function(t){return t*n})),g=0;v[g]<=e;)g++;l=v[g],a=b[g]}else if(e<14*(n*=24)){i="date";for(var y=[1,2,3,5,7,14],S=[].concat(y).map((function(t){return t*n})),N=0;S[N]<=e;)N++;l=S[N],a=y[N]}else i="bigger"}var A=r.x,w=[];if("bigger"!==i){var L=(A=moment(A).startOf(i))[i]();A="date"===i?a>=7?moment(A.valueOf()).isoWeekday(8):moment(A.valueOf()).add(a-1-(L-1)%a,"day"):moment(A.valueOf()).add(a-1-(L-1)%a,i),w.push(A.valueOf());for(var x=w[w.length-1];x<r.x+r.xRange;){var E=x+l;w.push(E),x=w[w.length-1]}}else{if(e<6*(n*=30)){i="month";for(var C=[1,3,6],M=[].concat(C).map((function(t){return t*n})),D=0;M[D]<=e;)D++;a=C[D]}else!function(){n*=365/30,i="year";for(var t=[1,5,10],r=[].concat(t).map((function(t){return t*n})),o=0,l=0;r[o]<=e;)++o===r.length&&(l||t.splice(1,0,2.5),o=0,l++,r=[].concat(t).map((function(t){return t*Math.pow(10,l)*n})));a=t[o]*Math.pow(10,l)}();var O=(A=moment(r.x).startOf(i).add(1,i))[i]();A=moment(A.valueOf()).add(a-1-(O-1)%a,i),w.push(A.valueOf());for(var T=w[w.length-1];T<r.x+r.xRange;){var P=moment(T).add(a,i).valueOf();w.push(P),T=w[w.length-1]}w.pop()}return"month"===i&&a>1&&(w=o(w).map((function(t){return moment(t).subtract(1,"day").valueOf()}))),[w.map((function(t){return{x:(t-r.x)*r.xPonder,value:t}})),i]}(),2),l=a[0],s=a[1],u=function(t,e){var n=[.5,1,2.5,5,10],a=1,o=16/r.height*t;if(n[n.length-1]*a>o){for(;n[n.length-1]*a>o;)a/=10;a*=10}if(n[0]*a<o){for(;n[0]*a<o;)a*=10;a/=10}var l=i(n.reduce((function(t,e,n){return t[0]*a>o?[t[0],t[1]]:[e,2===n]}),[0,!1]),2),s=l[0],u=l[1],c=0;if(a)for(;Math.pow(10,c)<1/a;)c++;u&&c++,s=Number(Number.parseFloat(s*a).toFixed(c));var d=Number(Number.parseFloat(Math.ceil(e/s)*s).toFixed(c))||0,h=[];if(s)for(h.push(d);h[h.length-1]+s<=e+t;){var p=Number(Number.parseFloat(h[h.length-1]+s).toFixed(c));h.push(p)}return h.map((function(t){return{y:-r.height+(t-r.y)*r.yPonder,value:t}}))}(this.yRange,this.y);l.forEach((function(n){var a=n.x,i=n.value,o=document.createElementNS(c,"line");o.classList.add("grid-line"),o.setAttributeNS(null,"x1",a),o.setAttributeNS(null,"x2",a),o.setAttributeNS(null,"y1",-r.height),o.setAttributeNS(null,"y2",0),o.setAttributeNS(null,"stroke-width","1px"),o.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(o);var l=document.createElementNS(c,"text");l.classList.add("xAxis-text"),l.setAttributeNS(null,"x",a),l.setAttributeNS(null,"y",10),l.setAttribute("font-size","".concat(12)),l.setAttribute("dominant-baseline","hanging"),l.setAttribute("text-anchor","middle"),l.innerHTML="".concat(moment(i).format(function(t){switch(t){case"millisecond":return"ss.SSS";case"second":return"mm:ss";case"minute":case"hour":return"DD.MM HH:mm";case"date":return"DD-MM";case"month":return"DD-MM-YY";case"year":return"YYYY";default:return null}}(s))),e.appendChild(l)})),u.forEach((function(e){var a=e.y,i=e.value,o=document.createElementNS(c,"line");o.classList.add("grid-line"),o.setAttributeNS(null,"x1",0),o.setAttributeNS(null,"x2",r.width),o.setAttributeNS(null,"y1",a),o.setAttributeNS(null,"y2",a),o.setAttributeNS(null,"stroke-width","1px"),o.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(o);var l=document.createElementNS(c,"text");l.classList.add("yAxis-text"),l.setAttributeNS(null,"x",10),l.setAttributeNS(null,"y",a),l.setAttribute("font-size","".concat(12)),l.setAttribute("dominant-baseline","middle"),l.innerHTML="".concat(-i),n.appendChild(l)}))}},{key:"populateSVG",value:function(t,e,n,r){var a,i,o=document.createElementNS(c,"g");o.classList.add("grid-group");var l=document.createElementNS(c,"g");l.id="candle-group";var s=document.createElementNS(c,"g");s.id="volume-group";var u,d,h,p=document.createElementNS(c,"g");p.id="signal-group",t.appendChild(o),t.appendChild(l),t.appendChild(s),t.appendChild(p),null!==(a=this.parsedData)&&void 0!==a&&null!==(i=a.data)&&void 0!==i&&i.length&&(this.generateGrid(o,e,n),null!==(u=this.parsedData.candleData)&&void 0!==u&&u.length&&this.generateCandles(l),null!==(d=this.parsedData.volumeData)&&void 0!==d&&d.length&&this.generateVolumes(s),null!==(h=this.parsedData.signalData)&&void 0!==h&&h.length&&this.generateSignals(p)),r.scrollTo(this.width,0)}},{key:"generateSVGs",value:function(){var t=document.createElementNS(c,"svg");t.classList.add("chart-graph"),t.setAttributeNS(null,"version","1.1"),t.setAttribute("xmlns","http://www.w3.org/2000/svg"),t.setAttributeNS(null,"preserveAspectRatio","none"),t.setAttributeNS(null,"width","".concat(this.width,"px")),t.setAttributeNS(null,"viewBox","0 -".concat(this.height," ").concat(this.width," ").concat(this.height));var e=document.createElementNS(c,"svg");e.classList.add("chart-x-axis"),e.setAttributeNS(null,"version","1.1"),e.setAttributeNS(null,"width","".concat(this.width,"px")),e.setAttributeNS(null,"viewBox","0 0 ".concat(this.width," 40"));var n=document.createElementNS(c,"svg");return n.classList.add("chart-y-axis"),n.setAttributeNS(null,"version","1.1"),n.setAttributeNS(null,"height","".concat(this.height,"px")),n.setAttributeNS(null,"viewBox","0 -".concat(this.height," 50 ").concat(this.height)),[t,e,n]}},{key:"parseData",value:function(t){var n=this,r=["open","low","high","close"],l=i(this.data.data.reduce((function(t,i){var l=o(t[0]),s=n.data.columns.reduce((function(t,n,r){return e(e({},t),{},"date"!==n?a({},n,i[r]):{date:moment(i[r]).valueOf()/d})}),{});l.push(s);var u=r.map((function(t){return s[t]})).sort((function(t,e){return t-e}));return[l,t[1]?Math.min(t[1],u[0]):u[0],t[2]?Math.max(t[2],u[u.length-1]):u[u.length-1]]}),[[],null,null]),3),s=l[0],u=l[1],c=l[2];s.sort((function(t,e){return t.date-e.date})),this.parsedData={start:s[0].date,end:s[s.length-1].date,min:u,max:c,data:s,candleData:s.map((function(t){return{date:t.date,open:t.open,low:t.low,high:t.high,close:t.close}})),signalData:s.reduce((function(t,e,n){var r=e.buy,a=e.sell,i=e.open,l=e.close,s=o(t);return(r||a)&&s.push({x:n,buy:r,sell:a,pos:i,direction:i>l?"down":"up"}),s}),[]),volumeData:s.map((function(t){return{date:t.date,volume:t.volume,color:t.open-t.close>0?"negative":"positive"}}))};var h=Number((8/300*(this.parsedData.end-this.parsedData.start)).toFixed(4)),p=t.getBoundingClientRect().height-40-17;this.width=h,this.height=p,this.lastPoint=this.parsedData.end*d;var m=this.parsedData.start*d,f=300*this.sampleCount*d,b=this.width/f;this.x=m,this.xRange=f,this.xPonder=b;var v=this.parsedData.max-this.parsedData.min,g=-this.parsedData.max-.1*v,y=v*(1.1+.3),S=this.height/y;this.y=g,this.yRange=y,this.yPonder=S}},{key:"renderChart",value:function(){var t=document.createElement("DIV");t.classList.add("chart-area"),this.rootElement.innerHTML="",this.rootElement.appendChild(t),this.parseData(t);var e=i(this.generateSVGs(),3),n=e[0],r=e[1],a=e[2];this.rootElement.appendChild(a),t.appendChild(n),t.appendChild(r),this.populateSVG(n,r,a,t)}},{key:"setData",value:function(t){var e,n;this.data=t,this.data&&null!==(e=this.data)&&void 0!==e&&null!==(n=e.data)&&void 0!==n&&n.length&&(this.sampleCount=this.data.data.length,this.renderChart())}}])&&u(n.prototype,r),t}();function p(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function m(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?p(Object(n),!0).forEach((function(e){f(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function f(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function b(t){return function(t){if(Array.isArray(t))return y(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||g(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=t[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(t,e)||g(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(t,e){if(t){if("string"==typeof t)return y(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(t,e):void 0}}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function S(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var N="http://www.w3.org/2000/svg",A=1e3,w=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.rootElement=e.root,this.data=null,this.parsedData=null,this.width=1,this.height=1,this.x=null,this.xRange=null,this.xPonder=1,this.y=null,this.yRange=null,this.yPonder=1}var e,n;return e=t,(n=[{key:"generateProfit",value:function(t){var e=this,n=this.parsedData.start,r=this.parsedData.data.map((function(t){var r=t.date,a=t.cumulative;return{date:(r-n)*A*e.xPonder,cumulative:a}})),a=-(this.height+this.y*this.yPonder),i=v(r.reduce((function(t,n,i){var o=-(e.height+(n.cumulative+e.y)*e.yPonder);return["".concat(t[0]).concat(0===i?"M":" L"," ").concat(n.date.toFixed(4)," ").concat(t[3]," L ").concat(n.date.toFixed(4)," ").concat(o.toFixed(4)),"".concat(t[1]).concat(0===i?"M":" L"," ").concat(n.date.toFixed(4)," ").concat(t[3]>a?a:t[3]," L ").concat(n.date.toFixed(4)," ").concat(o<a?o.toFixed(4):a).concat(i===r.length-1?" L ".concat(n.date.toFixed(4)," ").concat(a):""),"".concat(t[2]).concat(0===i?"M":" L"," ").concat(n.date.toFixed(4)," ").concat(t[3]<a?a:t[3]," L ").concat(n.date.toFixed(4)," ").concat(o>a?o.toFixed(4):a).concat(i===r.length-1?" L ".concat(n.date.toFixed(4)," ").concat(a):""),o]}),["","","",a]),3),o=i[0],l=i[1],s=i[2],u=document.createElementNS(N,"line");if(u.id="zero-line",u.setAttributeNS(null,"x1",0),u.setAttributeNS(null,"x2",this.width),u.setAttributeNS(null,"y1",-this.height+(0-this.y)*this.yPonder),u.setAttributeNS(null,"y2",-this.height+(0-this.y)*this.yPonder),u.setAttributeNS(null,"stroke-width","0.5px"),u.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(u),r.length){var c=document.createElementNS(N,"path");c.classList.add("path"),c.classList.add("positive"),c.setAttributeNS(null,"d","".concat(l," Z")),c.setAttributeNS(null,"stroke-width","1px"),t.appendChild(c);var d=document.createElementNS(N,"path");d.classList.add("path"),d.classList.add("negative"),d.setAttributeNS(null,"d","".concat(s," Z")),d.setAttributeNS(null,"stroke-width","1px"),t.appendChild(d);var h=document.createElementNS(N,"path");h.classList.add("path"),h.setAttributeNS(null,"d",o),h.setAttributeNS(null,"stroke-width","1px"),t.appendChild(h)}}},{key:"generateGrid",value:function(t,e,n){var r=this,a=v(function(){var t,e=32/r.width*r.xRange,n=1,a=1,i="",o=e,l=Math.log10(e);if(l<3){n*=Math.pow(10,Math.floor(l)),i="millisecond";for(var s=[2.5,5,10],u=[].concat(s).map((function(t){return t*n})).filter((function(t){return!(t-Math.trunc(t))})),c=0;u[c]<=e;)c++;o=u[c],a=s[c]*Math.pow(10,Math.floor(l))}else{var d=(t=e/(n*=1e3),60,Math.log(t)/Math.log(60));if(d<2){n*=Math.pow(60,Math.floor(d)),i=d<1?"second":"minute";for(var h=[5,10,30,60],p=[].concat(h).map((function(t){return t*n})),m=0;p[m]<=e;)m++;o=p[m],a=h[m]}else if(e<12*(n*=3600)){i="hour";for(var f=[3,6,12],v=[].concat(f).map((function(t){return t*n})),g=0;v[g]<=e;)g++;o=v[g],a=f[g]}else if(e<14*(n*=24)){i="date";for(var y=[1,2,3,5,7,14],S=[].concat(y).map((function(t){return t*n})),N=0;S[N]<=e;)N++;o=S[N],a=y[N]}else i="bigger"}var A=r.x,w=[];if("bigger"!==i){var L=(A=moment(A).startOf(i))[i]();A="date"===i?a>=7?moment(A.valueOf()).isoWeekday(8):moment(A.valueOf()).add(a-1-(L-1)%a,"day"):moment(A.valueOf()).add(a-1-(L-1)%a,i),w.push(A.valueOf());for(var x=w[w.length-1];x<r.x+r.xRange;){var E=x+o;w.push(E),x=w[w.length-1]}}else{if(e<6*(n*=30)){i="month";for(var C=[1,3,6],M=[].concat(C).map((function(t){return t*n})),D=0;M[D]<=e;)D++;a=C[D]}else!function(){n*=365/30,i="year";for(var t=[1,5,10],r=[].concat(t).map((function(t){return t*n})),o=0,l=0;r[o]<=e;)++o===r.length&&(l||t.splice(1,0,2.5),o=0,l++,r=[].concat(t).map((function(t){return t*Math.pow(10,l)*n})));a=t[o]*Math.pow(10,l)}();var O=(A=moment(r.x).startOf(i).add(1,i))[i]();A=moment(A.valueOf()).add(a-1-(O-1)%a,i),w.push(A.valueOf());for(var T=w[w.length-1];T<r.x+r.xRange;){var P=moment(T).add(a,i).valueOf();w.push(P),T=w[w.length-1]}w.pop()}return"month"===i&&a>1&&(w=b(w).map((function(t){return moment(t).subtract(1,"day").valueOf()}))),[w.map((function(t){return{x:(t-r.x)*r.xPonder,value:t}})),i]}(),2),i=a[0],o=a[1],l=function(t,e){var n=[.5,1,2.5,5,10],a=1,i=16/r.height*t;if(n[n.length-1]*a>i){for(;n[n.length-1]*a>i;)a/=10;a*=10}if(n[0]*a<i){for(;n[0]*a<i;)a*=10;a/=10}var o=v(n.reduce((function(t,e,n){return t[0]*a>i?[t[0],t[1]]:[e,2===n]}),[0,!1]),2),l=o[0],s=o[1],u=0;if(a)for(;Math.pow(10,u)<1/a;)u++;s&&u++,l=Number(Number.parseFloat(l*a).toFixed(u));var c=Number(Number.parseFloat(Math.ceil(e/l)*l).toFixed(u))||0,d=[];if(l)for(d.push(c);d[d.length-1]+l<=e+t;){var h=Number(Number.parseFloat(d[d.length-1]+l).toFixed(u));d.push(h)}return d.map((function(t){return{y:-r.height+(t-r.y)*r.yPonder,value:t}}))}(this.yRange,this.y);i.forEach((function(n){var a=n.x,i=n.value,l=document.createElementNS(N,"line");l.classList.add("grid-line"),l.setAttributeNS(null,"x1",a),l.setAttributeNS(null,"x2",a),l.setAttributeNS(null,"y1",-r.height),l.setAttributeNS(null,"y2",0),l.setAttributeNS(null,"stroke-width","1px"),l.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(l);var s=document.createElementNS(N,"text");s.classList.add("xAxis-text"),s.setAttributeNS(null,"x",a),s.setAttributeNS(null,"y",10),s.setAttribute("font-size","".concat(12)),s.setAttribute("dominant-baseline","hanging"),s.setAttribute("text-anchor","middle"),s.innerHTML="".concat(moment(i).format(function(t){switch(t){case"millisecond":return"ss.SSS";case"second":return"mm:ss";case"minute":case"hour":return"DD.MM HH:mm";case"date":return"DD-MM";case"month":return"DD-MM-YY";case"year":return"YYYY";default:return null}}(o))),e.appendChild(s)})),l.forEach((function(e){var a=e.y,i=e.value,o=document.createElementNS(N,"line");o.classList.add("grid-line"),o.setAttributeNS(null,"x1",0),o.setAttributeNS(null,"x2",r.width),o.setAttributeNS(null,"y1",a),o.setAttributeNS(null,"y2",a),o.setAttributeNS(null,"stroke-width","1px"),o.setAttributeNS(null,"shape-rendering","crispEdges"),t.appendChild(o);var l=document.createElementNS(N,"text");l.classList.add("yAxis-text"),l.setAttributeNS(null,"x",10),l.setAttributeNS(null,"y",a),l.setAttribute("font-size","".concat(12)),l.setAttribute("dominant-baseline","middle"),l.innerHTML="".concat(-i),n.appendChild(l)}))}},{key:"populateSVG",value:function(t,e,n){var r,a,i=document.createElementNS(N,"g");i.classList.add("grid-group");var o,l=document.createElementNS(N,"g");l.id="profit-group",t.appendChild(i),t.appendChild(l),null!==(r=this.parsedData)&&void 0!==r&&null!==(a=r.data)&&void 0!==a&&a.length&&(this.generateGrid(i,e,n),null!==(o=this.parsedData.data)&&void 0!==o&&o.length&&this.generateProfit(l))}},{key:"generateSVGs",value:function(){var t=document.createElementNS(N,"svg");t.classList.add("chart-graph"),t.setAttributeNS(null,"version","1.1"),t.setAttribute("xmlns","http://www.w3.org/2000/svg"),t.setAttributeNS(null,"preserveAspectRatio","none"),t.setAttributeNS(null,"width","".concat(this.width,"px")),t.setAttributeNS(null,"viewBox","0 -".concat(this.height," ").concat(this.width," ").concat(this.height));var e=document.createElementNS(N,"svg");e.classList.add("chart-x-axis"),e.setAttributeNS(null,"version","1.1"),e.setAttributeNS(null,"width","".concat(this.width,"px")),e.setAttributeNS(null,"viewBox","0 0 ".concat(this.width," 40"));var n=document.createElementNS(N,"svg");return n.classList.add("chart-y-axis"),n.setAttributeNS(null,"version","1.1"),n.setAttributeNS(null,"height","".concat(this.height,"px")),n.setAttributeNS(null,"viewBox","0 -".concat(this.height," 50 ").concat(this.height)),[t,e,n]}},{key:"parseData",value:function(t){var e=v(b(this.data.trades).map((function(t){var e=t.close_timestamp,n=t.close_profit_pct;return{date:Math.round(e/A),profit:n}})).sort((function(t,e){return t.date-e.date})).reduce((function(t,e,n){var r=n?t[0][n-1].cumulative+e.profit:e.profit,a=m(m({},e),{},{cumulative:r}),i=null!==t[1]?Math.min(t[1],r):r,o=null!==t[2]?Math.max(t[2],r):r,l=b(t[0]);return l.push(a),[l,i,o]}),[[],null,null]),3),n=e[0],r=e[1],a=e[2];this.parsedData={start:n[0].date,end:n[n.length-1].date,data:n,min:r,max:a};var i=t.getBoundingClientRect().width,o=t.getBoundingClientRect().height-40;this.width=i,this.height=o;var l=this.parsedData.start*A,s=(this.parsedData.end-this.parsedData.start)*A,u=this.width/s;this.x=l,this.xRange=s,this.xPonder=u;var c=this.parsedData.max-this.parsedData.min,d=-this.parsedData.max-.1*c,h=c*(1.1+.1),p=this.height/h;this.y=d,this.yRange=h,this.yPonder=p}},{key:"renderChart",value:function(){var t=document.createElement("DIV");t.classList.add("chart-area"),this.rootElement.innerHTML="",this.rootElement.appendChild(t),this.parseData(t);var e=v(this.generateSVGs(),3),n=e[0],r=e[1],a=e[2];this.rootElement.appendChild(a),t.appendChild(n),t.appendChild(r),this.populateSVG(n,r,a,t)}},{key:"setData",value:function(t){var e,n;this.data=t,this.data&&null!==(e=this.data)&&void 0!==e&&null!==(n=e.trades)&&void 0!==n&&n.length&&this.renderChart()}}])&&S(e.prototype,n),t}();function L(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var x="http://www.w3.org/2000/svg",E=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.root=e.root,this.timestamp=null,this.signalType="",this.interval=null}var e,n;return e=t,(n=[{key:"setData",value:function(t,e){this.timestamp=t,this.signalType=e,clearInterval(this.interval),this.render()}},{key:"updateTime",value:function(t){var e=Math.round((moment(Date.now()).valueOf()-this.timestamp)/1e3),n=Math.floor(e/60),r=Math.floor(n/60),a=Math.floor(r/24);e-=60*n,n-=60*r,r-=24*a,t.innerHTML="".concat(a?"".concat(a,"d "):"").concat(r?"".concat(r,"h "):"").concat(n?"".concat(n,"m "):"").concat(e?"".concat(e,"s "):""," ago")}},{key:"render",value:function(){var t=this,e="BUY"===this.signalType?"positive":"negative",n=this.root;n.innerHTML="";var r=document.createElementNS(x,"svg");r.id="signal-svg",r.setAttributeNS(null,"version","1.1"),r.setAttribute("xmlns","http://www.w3.org/2000/svg"),r.setAttributeNS(null,"viewBox","-17.5 -75 125 250"),r.setAttributeNS(null,"preserveAspectRatio","none"),n.appendChild(r);var a=document.createElement("div");a.id="signal-div";var i=document.createElement("span");i.id="signal-span",i.innerHTML=this.signalType,i.classList.add(e),a.appendChild(i),this.signalTIME=document.createElement("span"),this.signalTIME.id="signal-time",this.signalTIME.classList.add(e),a.appendChild(this.signalTIME),n.appendChild(a),this.interval=setInterval((function(){return t.updateTime(t.signalTIME)}),1e3);var o=document.createElementNS(x,"path");o.classList.add("buoy-stem"),o.setAttributeNS(null,"d","M 47.5 15.5 L 48 24 L 52 24 L 52.5 15.5 Z"),o.classList.add(e),r.appendChild(o);var l=document.createElementNS(x,"circle");l.classList.add("buoy-head"),l.setAttributeNS(null,"cx",50),l.setAttributeNS(null,"cy",10),l.setAttributeNS(null,"r",6),l.classList.add(e),r.appendChild(l);var s=document.createElementNS(x,"path");s.classList.add("buoy-body"),s.setAttributeNS(null,"mask","url(#holesMask)"),s.setAttributeNS(null,"d","M 45 24 L 43 71.5 L 40 71.5 L 40.5 76 L 37 76 L 37.5 72 C 38 67, 31 67, 31.5 72 L 32 76 L 28.5 76 L 30.5 91 L 69.5 91 L 71.5 76 L 68 76 L 68.5 72 C 69 67, 62 67, 62.5 72 L 63 76 L 59.5 76 L 60 71.5 L 57 71.5 L 55 24 Z"),s.classList.add(e),r.appendChild(s);var u=document.createElementNS(x,"circle");u.classList.add("buoy-circle"),u.setAttributeNS(null,"cx",50),u.setAttributeNS(null,"cy",10),u.setAttributeNS(null,"r",6),u.classList.add(e),r.appendChild(u);var c=document.createElementNS(x,"animate");c.id="anim-r-1",c.setAttributeNS(null,"attributeName","r"),c.setAttributeNS(null,"attributeType","XML"),c.setAttributeNS(null,"begin","anim-r-1.end + 3s"),c.setAttributeNS(null,"dur","3.6s"),c.setAttributeNS(null,"from","6"),c.setAttributeNS(null,"to","64"),u.appendChild(c);var d=document.createElementNS(x,"animate");d.id="anim-o-1",d.setAttributeNS(null,"attributeName","opacity"),d.setAttributeNS(null,"attributeType","XML"),d.setAttributeNS(null,"begin","anim-r-1.begin + 0.1s"),d.setAttributeNS(null,"dur","3s"),d.setAttributeNS(null,"from","0.6"),d.setAttributeNS(null,"to","0"),d.setAttributeNS(null,"fill","freeze"),u.appendChild(d);var h=document.createElementNS(x,"circle");h.classList.add("buoy-circle"),h.setAttributeNS(null,"cx",50),h.setAttributeNS(null,"cy",10),h.setAttributeNS(null,"r",6),h.classList.add(e),r.appendChild(h);var p=document.createElementNS(x,"animate");p.id="anim-r-2",p.setAttributeNS(null,"attributeName","r"),p.setAttributeNS(null,"attributeType","XML"),p.setAttributeNS(null,"begin","anim-r-1.begin + 1s"),p.setAttributeNS(null,"dur","3.6s"),p.setAttributeNS(null,"from","6"),p.setAttributeNS(null,"to","64"),h.appendChild(p);var m=document.createElementNS(x,"animate");m.id="anim-o-2",m.setAttributeNS(null,"attributeName","opacity"),m.setAttributeNS(null,"attributeType","XML"),m.setAttributeNS(null,"begin","anim-r-2.begin + 0.1s"),m.setAttributeNS(null,"dur","3s"),m.setAttributeNS(null,"from","0.6"),m.setAttributeNS(null,"to","0"),m.setAttributeNS(null,"fill","freeze"),h.appendChild(m);var f=document.createElementNS(x,"circle");f.classList.add("buoy-circle"),f.setAttributeNS(null,"cx",50),f.setAttributeNS(null,"cy",10),f.setAttributeNS(null,"r",6),f.classList.add(e),r.appendChild(f);var b=document.createElementNS(x,"animate");b.id="anim-r-3",b.setAttributeNS(null,"attributeName","r"),b.setAttributeNS(null,"attributeType","XML"),b.setAttributeNS(null,"begin","anim-r-2.begin + 1s"),b.setAttributeNS(null,"dur","3.6s"),b.setAttributeNS(null,"from","6"),b.setAttributeNS(null,"to","64"),f.appendChild(b);var v=document.createElementNS(x,"animate");v.id="anim-o-3",v.setAttributeNS(null,"attributeName","opacity"),v.setAttributeNS(null,"attributeType","XML"),v.setAttributeNS(null,"begin","anim-r-3.begin + 0.1s"),v.setAttributeNS(null,"dur","3s"),v.setAttributeNS(null,"from","0.6"),v.setAttributeNS(null,"to","0"),v.setAttributeNS(null,"fill","freeze"),f.appendChild(v),"undefined"==typeof InstallTrigger?c.beginElement():setTimeout((function(){c.beginElement()}),0)}}])&&L(e.prototype,n),t}();function C(t){return function(t){if(Array.isArray(t))return M(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return M(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?M(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}fetch;var D,O=(D=new Map,{addEventListener:function(t,e,n){var r=D.has(t)?D.get(t):{};r[e]=r[e]||[],r[e].push(n),D.set(t,r),t.addEventListener(e,n)},clear:function(t){if(C(t.children).forEach((function(t){if(D.has(t)){var e=D.get(t);Object.keys(e).forEach((function(n){e[n].forEach((function(e){t.removeEventListener(n,e)}))}))}t.children.length&&C(t.children).forEach(O.clear)})),D.has(t)){var e=D.get(t);Object.keys(e).forEach((function(n){e[n].forEach((function(e){t.removeEventListener(n,e)}))}))}}});function T(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}["BTC/USDT","ETH/USDT","MBOX/USDT","BUSD/USDT","SHIB/USDT","SAND/USDT","SOL/USDT","REQ/USDT","LUNA/USDT","MATIC/USDT","GALA/USDT","MANA/USDT","AVAX/USDT","TLM/USDT","ALICE/USDT","TRX/USDT","CTK/USDT","DOT/USDT","SANTOS/USDT","XRP/USDT"].map((function(t){return{name:t,frequency:"5m",delayed:!!Math.round(Math.random())}}));var P=[{name:"4h",value:144e5},{name:"12h",value:432e5},{name:"1D",value:864e5}],j=([{name:"5m",value:3e4}].concat(P),function(){var t=new FormData;return t.append("action","frequencies"),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:t}).then((function(t){return t.json()})).then((function(t){return[].concat(function(t){if(Array.isArray(t))return T(t)}(e=t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(e)||function(t,e){if(t){if("string"==typeof t)return T(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(t,e):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),P);var e}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))}))}),k=function(t,e,n){var r=new FormData;return r.append("action","data"),r.append("pair",t),r.append("frequency",e),r.append("limit",n),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:r}).then((function(t){return t.json()})).then((function(t){return t}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))}))};function I(t){return function(t){if(Array.isArray(t))return B(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||U(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function F(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,a=!1,i=void 0;try{for(var o,l=t[Symbol.iterator]();!(r=(o=l.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{r||null==l.return||l.return()}finally{if(a)throw i}}return n}}(t,e)||U(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function U(t,e){if(t){if("string"==typeof t)return B(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?B(t,e):void 0}}function B(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function R(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}new(function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!e)throw Error("No root element passed to the App");this.rootHTML=e,this.dataCharter=null,this.profitCharter=null,this.latestPositive=null,this.latestNegative=null,this.pairList=[],this.frequencyList=[],this.activePair=null,this.activeFrequency=null,this.loadingMeta=!1,this.metaFetchError=null,this.loadingData=!1,this.dataFetchError=null,this.initialize()}var e,n;return e=t,(n=[{key:"initialize",value:function(){var t,e=this;this.rootHTML.innerHTML='\n    <div id="signals">\n        <div id="signal-panel">\n          <div id="signal-header">\n            <div id="signal-name">BTC/USDT</div>\n            <div id="freq-link">\n              <span>View in FreqUI</span>\n              <span>(coming soon)</span>\n            </div>\n          </div>\n          <div id="latest-signals">\n            <div id="latest-positive"></div>\n            <div id="latest-negative"></div>\n          </div>\n        </div>\n        <div id="data-chart-wrapper"></div>\n        <div id="profit-chart-wrapper"></div>\n      </div>\n      <div id="signal-controls">\n      </div>\n    ',this.dataCharter=new h({root:document.getElementById("data-chart-wrapper")}),this.profitCharter=new w({root:document.getElementById("profit-chart-wrapper")}),this.latestPositive=new E({root:document.getElementById("latest-positive")}),this.latestNegative=new E({root:document.getElementById("latest-negative")}),this.loadingMeta=!0,Promise.all([(t=new FormData,t.append("action","pairs"),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:t}).then((function(t){return t.json()})).then((function(t){return t}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))}))),j()]).then((function(t){var n=F(t,2),r=n[0],a=n[1];e.setFrequencies(a),e.setPairs(r),e.loadingMeta=!1})).then((function(){return e.renderControls()})).catch((function(t){e.metaError=t,e.loadingMeta=!1}))}},{key:"renderControls",value:function(){var t=this,e=document.getElementById("signal-controls");O.clear(e),e.innerHTML="";var n=this.frequencyList.map((function(e){var n=e.name,r=e.value,a=document.createElement("BUTTON");return a.setAttribute("type","button"),a.setAttribute("disabled","5m"!==n),a.innerHTML=n,a.classList.add("freq-control"),a.dataset.id=n,a.dataset.period=r,n===(t.pairList.find((function(e){return e.name===t.activeFrequency}))?t.activeFrequency:t.frequencyList[0].name)&&(a.classList.add("active"),a.click()),a})),r=this.pairList.filter((function(e){return e.frequency===t.activeFrequency})).map((function(e){var n=e.name,r=e.frequency,a=e.delayed,i=document.createElement("BUTTON");i.setAttribute("type","button"),i.classList.add("pair-control"),i.dataset.id=n;var o=document.createElement("SPAN");if(o.innerHTML=n,i.appendChild(o),a){var l=document.createElement("SPAN");l.innerHTML=" (delayed)",i.appendChild(l);var s=document.createElement("DIV");s.classList.add("tooltip"),s.innerHTML="You are not subscribed to this signal.",i.appendChild(s)}O.addEventListener(i,"click",(function e(a){var i;t.loadingData=!0,t.dataFetchError=null,(t.activePair!==n||t.activeFrequency!==r)&&(Promise.all([k(n,r,500),(i=new FormData,i.append("action","trades"),fetch(brainalyzed_wp.ajax_url,{headers:{accept:"application/json"},method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrerPolicy:"no-referrer",body:i}).then((function(t){return t.json()})).then((function(t){return t}),(function(t){throw new Error("Most likely this error occured because server did not respond with JSON. Message was ".concat(t.message))})))]).then((function(e){var n=F(e,2),r=n[0],a=n[1];t.updateSignalData(r),t.updateProfitData(a),t.loadingData=!1})).catch((function(e){t.loadingData=!1,t.dataFetchError=e})),t.activePair=n,t.renderActiveClasses(),null!==t.interval&&clearInterval(t.interval),t.interval=setInterval(e,6e4))}));var u=t.pairList.find((function(e){return e.name===t.activePair}))?t.activePair:t.pairList[0].name;return n===u&&(i.classList.add("active"),i.click()),i})),a=document.createElement("DIV");a.setAttribute("id","frequency-controls"),n.forEach((function(t){return a.appendChild(t)})),e.appendChild(a),r.forEach((function(t){return e.appendChild(t)}))}},{key:"setPairs",value:function(t){Array.isArray(t)&&t.length&&(this.pairList=t)}},{key:"setFrequencies",value:function(t){if(!Array.isArray(t)||!t.length)throw new Error("setFrequencies method must recieve an array with at least one frequency.");this.frequencyList=t,this.activeFrequency=t[0].name}},{key:"updateSignalData",value:function(t){var e,n=(e=t).data.map((function(t){return{date:moment(t[e.columns.indexOf("date")]).valueOf(),buy:t[e.columns.indexOf("buy")],sell:t[e.columns.indexOf("sell")]}})).filter((function(t){return t.buy||t.sell})).map((function(t){return{timestamp:t.date,signalType:t.buy?"BUY":"SELL"}})),r=n[n.length-1];this.dataCharter.setData(t),this.latestPositive.setData(r.timestamp,r.signalType),this.latestNegative.setData(r.timestamp,r.signalType)}},{key:"updateProfitData",value:function(t){this.profitCharter.setData(t)}},{key:"renderActiveClasses",value:function(){var t=this;I(this.rootHTML.getElementsByClassName("pair-control")).forEach((function(e){e.classList.remove("active"),e.dataset.id===t.activePair&&e.classList.add("active")})),I(this.rootHTML.getElementsByClassName("freq-control")).forEach((function(e){e.classList.remove("active"),e.dataset.id===t.activeFrequency&&e.classList.add("active")})),document.getElementById("signal-name").innerHTML=this.activePair}}])&&R(e.prototype,n),t}())(document.getElementById("signals-root"))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,